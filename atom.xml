<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kahvia&#39;s Home</title>
  
  <subtitle>Never give up!</subtitle>
  <link href="https://blog.kahvia.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.kahvia.cn/"/>
  <updated>2022-11-29T05:15:39.648Z</updated>
  <id>https://blog.kahvia.cn/</id>
  
  <author>
    <name>Kahvia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql-Uft8mb4</title>
    <link href="https://blog.kahvia.cn/2022/11/29/MysqlUtf8mb4.html"/>
    <id>https://blog.kahvia.cn/2022/11/29/MysqlUtf8mb4.html</id>
    <published>2022-11-29T04:31:58.919Z</published>
    <updated>2022-11-29T05:15:39.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在使用MySQL数据库存储数据的时候，意外发现不能存储Emoji表情😄。经过百度查证得知，mysql默认的 utf8 是三个字节的，存储不了四个字节的生僻字或者Emoji表情。需要换成支持四个字节的 utf8mb4 ，也就是UTF-8 most byte 4 。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 数据库更换字符集</span><br><span class="line">ALTER DATABASE AchatUserService CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</span><br><span class="line"># 表更换字符集</span><br><span class="line">ALTER TABLE friendship CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"># 需要改变的列进行更换字符集</span><br><span class="line">ALTER TABLE messages CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>仅仅这样是不够的。在建立数据库连接的地方，还需要指定UTF-8字符集。比如在Spring boot项目的配置文件中，指定数据库连接的 url 处。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/AchatUserService?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span> <span class="comment"># here</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">100MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">500MB</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">39939</span></span><br></pre></td></tr></table></figure><p>不指定 utf-8 的话，估计默认是按照 utf8mb3 去连接的吧，这样是修改不了设置了 utf8mb4 字符集的数据的。（这可是重点所在）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在使用MySQL数据库存储数据的时候，意外发现不能存储Emoji表情😄。经过百度查证得知，mysql默认的 utf8 是三个字节的，存储不</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Mysql" scheme="https://blog.kahvia.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-VerticalText</title>
    <link href="https://blog.kahvia.cn/2022/11/19/FlutterVerticalText.html"/>
    <id>https://blog.kahvia.cn/2022/11/19/FlutterVerticalText.html</id>
    <published>2022-11-19T06:35:27.432Z</published>
    <updated>2022-11-19T07:27:35.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>今天有人问了我一个很有意思的问题：如何实现文字竖直排列，就像古诗词一样。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我首先想到的是使用 Container 组件嵌套 Text 组件，固定它的宽度，这样来实现一行一个文字。看起来就像竖直排列一样。但是它的文字垂直间距很显然不方便控制。</p><p>我便去 StackOverflow 上搜索了一番 vertical text。果然有所收获。有人提出，使用 Wrap 组件去实现这个功能。分割需要竖直排列的字符串为单个字，用 Text 组件包裹每个字，然后利用 Wrap 组件的 direction 使得这些 Text 列表垂直排列，排不下则往右边另起一列。</p><p>我自然是希望古诗一列一句的。所以就不用考虑超出换列，手动分割当然最好。既然使用不到 Wrap ，用各种 ListView 来展示上面的 Text 们也是可以的。</p><p>当然了，如果是显示的宋词，那一句太长也是有可能的，为了保险起见，我还是使用了Wrap做了超出处理。</p><p>如此一来，就可以着手实现了。封装一个用 Wrap 为核心的自定义组件，主要用于展示古诗的一句。我们拿到一个古诗后，可以将古诗按标点符号分割，分割后的句子用自定义的 VerticalText 显示就可以了。我更倾向于用 Row 组件去显示，因为我能用它决定主轴方向和交叉轴方向的起点，这能做到古诗句的上对齐，和右对齐。用 ListView 的话，可以很方便地翻转古诗句的顺序，但是不太方便对齐。</p><p>具体的实现可以参考如下代码。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;VerticalText&gt; poetry=<span class="keyword">const</span>[</span><br><span class="line">      VerticalText(<span class="string">&quot;将进酒，&quot;</span>),</span><br><span class="line">      VerticalText(<span class="string">&quot;杯莫停。&quot;</span>),</span><br><span class="line">      VerticalText(<span class="string">&quot;与君歌一曲,&quot;</span>),</span><br><span class="line">      VerticalText(<span class="string">&quot;请君为我倾耳听。&quot;</span>)</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;test&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">          children: <span class="built_in">List</span>.from(poetry.reversed) ,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerticalText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> text;</span><br><span class="line">  <span class="keyword">const</span> VerticalText(<span class="keyword">this</span>.text,&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//分割字符串为单字，每个字包裹一个Text组件，作为Wrap组件的子组件</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Text&gt; texts=text.split(<span class="string">&quot;&quot;</span>).map((string) =&gt; Text(string, style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">17</span>))).toList();</span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">10</span>),</span><br><span class="line">      child: Wrap(</span><br><span class="line">        <span class="comment">//排列方式，vertical代表竖着排，排不够就往旁边排</span></span><br><span class="line">        direction: Axis.vertical,</span><br><span class="line">        <span class="comment">//主轴方向上间距</span></span><br><span class="line">        spacing: <span class="number">20</span>,</span><br><span class="line">        <span class="comment">//交叉轴方向上间距</span></span><br><span class="line">        runSpacing: <span class="number">30</span>,</span><br><span class="line">        alignment: WrapAlignment.center,</span><br><span class="line">        children: texts,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pics.kahvia.cn/img/image-20221119145723737.png" alt="效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;今天有人问了我一个很有意思的问题：如何实现文字竖直排列，就像古诗词一样。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; cla</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>OS-Lab2</title>
    <link href="https://blog.kahvia.cn/2022/11/13/OS-lab2.html"/>
    <id>https://blog.kahvia.cn/2022/11/13/OS-lab2.html</id>
    <published>2022-11-13T11:57:16.204Z</published>
    <updated>2022-11-13T12:01:06.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="练习0"><a href="#练习0" class="headerlink" title="练习0"></a>练习0</h2><blockquote><p>练习0：填写已有实验<br>本实验依赖实验1。请把你做的实验1的代码填入本实验中代码中有“LAB1”的注释相应部分。</p></blockquote><p>使用 Meld Diff Viewer 将 lab1 的代码填入了 lab2 的相应位置。</p><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><blockquote><p>练习1：实现 first-fit 连续物理内存分配算法（需要编程）<br>在实现first fit 内存分配算法的回收函数时，要考虑地址连续的空闲块之间的合并操作。提示:在建立空闲页块链表时，需要按照空闲页块起始地址来排序，形成一个有序的链表。可能会修改default_pmm.c中的default_init，default_init_memmap，default_alloc_pages，default_free_pages等相关函数。请仔细查看和理解default_pmm.c中的注释。<br>请在实验报告中简要说明你的设计实现过程。请回答如下问题：<br>你的first fit算法是否有进一步的改进空间</p></blockquote><ol><li>进入ucore操作系统之后，第一个执行的函数是 default_init_memmap，对内核进行初始化。在其中，调用了初始化物理内存的函数 pmm_init 。</li><li>这个函数主要是完成对于整个物理内存的初始化，页初始化只是其中的一部分，调用位置偏前，函数之后的部分可以不管，直接进入page_init函数。</li><li>函数 page_init 完成了一个整体物理地址的初始化过程。</li><li>页初始化部分，由函数 init_memmap 处理。</li></ol><p>在 kern&#x2F;mm&#x2F;default_pmm.c 文件中，修改各个函数。</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">default_init_memmap</span><span class="params">(<span class="keyword">struct</span> Page *base, <span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    assert(n &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> =</span> base;</span><br><span class="line">    <span class="keyword">for</span> (; p != base + n; p ++) &#123;</span><br><span class="line">        assert(PageReserved(p));</span><br><span class="line">        p-&gt;flags = <span class="number">0</span>;</span><br><span class="line">        SetPageProperty(p);</span><br><span class="line">        p-&gt;property = <span class="number">0</span>;</span><br><span class="line">        set_page_ref(p, <span class="number">0</span>);</span><br><span class="line">        list_add_before(&amp;free_list, &amp;(p-&gt;page_link));</span><br><span class="line">    &#125;</span><br><span class="line">    nr_free += n;</span><br><span class="line">    <span class="comment">//first block</span></span><br><span class="line">    base-&gt;property = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> Page *</span><br><span class="line"><span class="title function_">default_alloc_pages</span><span class="params">(<span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    assert(n &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &gt; nr_free) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">list_entry_t</span> *le, *len;</span><br><span class="line">    le = &amp;free_list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((le=list_next(le)) != &amp;free_list) &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> =</span> le2page(le, page_link);</span><br><span class="line">      <span class="keyword">if</span>(p-&gt;property &gt;= n)&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">          len = list_next(le);</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">pp</span> =</span> le2page(le, page_link);</span><br><span class="line">          SetPageReserved(pp);</span><br><span class="line">          ClearPageProperty(pp);</span><br><span class="line">          list_del(le);</span><br><span class="line">          le = len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;property&gt;n)&#123;</span><br><span class="line">          (le2page(le,page_link))-&gt;property = p-&gt;property - n;</span><br><span class="line">        &#125;</span><br><span class="line">        ClearPageProperty(p);</span><br><span class="line">        SetPageReserved(p);</span><br><span class="line">        nr_free -= n;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">default_free_pages</span><span class="params">(<span class="keyword">struct</span> Page *base, <span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    assert(n &gt; <span class="number">0</span>);</span><br><span class="line">    assert(PageReserved(base));</span><br><span class="line"></span><br><span class="line">    <span class="type">list_entry_t</span> *le = &amp;free_list;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> * <span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">while</span>((le=list_next(le)) != &amp;free_list) &#123;</span><br><span class="line">      p = le2page(le, page_link);</span><br><span class="line">      <span class="keyword">if</span>(p&gt;base)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//list_add_before(le, base-&gt;page_link);</span></span><br><span class="line">    <span class="keyword">for</span>(p=base;p&lt;base+n;p++)&#123;</span><br><span class="line">      list_add_before(le, &amp;(p-&gt;page_link));</span><br><span class="line">    &#125;</span><br><span class="line">    base-&gt;flags = <span class="number">0</span>;</span><br><span class="line">    set_page_ref(base, <span class="number">0</span>);</span><br><span class="line">    ClearPageProperty(base);</span><br><span class="line">    SetPageProperty(base);</span><br><span class="line">    base-&gt;property = n;</span><br><span class="line">    </span><br><span class="line">    p = le2page(le,page_link) ;</span><br><span class="line">    <span class="keyword">if</span>( base+n == p )&#123;</span><br><span class="line">      base-&gt;property += p-&gt;property;</span><br><span class="line">      p-&gt;property = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    le = list_prev(&amp;(base-&gt;page_link));</span><br><span class="line">    p = le2page(le, page_link);</span><br><span class="line">    <span class="keyword">if</span>(le!=&amp;free_list &amp;&amp; p==base<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">while</span>(le!=&amp;free_list)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;property)&#123;</span><br><span class="line">          p-&gt;property += base-&gt;property;</span><br><span class="line">          base-&gt;property = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        le = list_prev(le);</span><br><span class="line">        p = le2page(le,page_link);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nr_free += n;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><blockquote><p>练习2：实现寻找虚拟地址对应的页表项（需要编程）<br>通过设置页表和对应的页表项，可建立虚拟内存地址和物理内存地址的对应关系。其中的get_pte函数是设置页表项环节中的一个重要步骤。此函数找到一个虚地址对应的二级页表项的内核虚地址，如果此二级页表项不存在，则分配一个包含此项的二级页表。本练习需要补全get_pte函数 in kern&#x2F;mm&#x2F;pmm.c，实现其功能。</p></blockquote><p>打开 pmm.c 文件，根据注释实现代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get_pte - get pte and return the kernel virtual address of this pte for la</span></span><br><span class="line"><span class="comment">//        - if the PT contians this pte didn&#x27;t exist, alloc a page for PT</span></span><br><span class="line"><span class="comment">// parameter:</span></span><br><span class="line"><span class="comment">//  pgdir:  the kernel virtual base address of PDT</span></span><br><span class="line"><span class="comment">//  la:     the linear address need to map</span></span><br><span class="line"><span class="comment">//  create: a logical value to decide if alloc a page for PT</span></span><br><span class="line"><span class="comment">// return vaule: the kernel virtual address of this pte</span></span><br><span class="line"><span class="type">pte_t</span> *</span><br><span class="line"><span class="title function_">get_pte</span><span class="params">(<span class="type">pde_t</span> *pgdir, <span class="type">uintptr_t</span> la, <span class="type">bool</span> create)</span> &#123;</span><br><span class="line">    <span class="comment">/* LAB2 EXERCISE 2: YOUR CODE</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If you need to visit a physical address, please use KADDR()</span></span><br><span class="line"><span class="comment">     * please read pmm.h for useful macros</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Maybe you want help comment, BELOW comments can help you finish the code</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Some Useful MACROs and DEFINEs, you can use them in below implementation.</span></span><br><span class="line"><span class="comment">     * MACROs or Functions:</span></span><br><span class="line"><span class="comment">     *   PDX(la) = the index of page directory entry of VIRTUAL ADDRESS la.</span></span><br><span class="line"><span class="comment">     *   KADDR(pa) : takes a physical address and returns the corresponding kernel virtual address.</span></span><br><span class="line"><span class="comment">     *   set_page_ref(page,1) : means the page be referenced by one time</span></span><br><span class="line"><span class="comment">     *   page2pa(page): get the physical address of memory which this (struct Page *) page  manages</span></span><br><span class="line"><span class="comment">     *   struct Page * alloc_page() : allocation a page</span></span><br><span class="line"><span class="comment">     *   memset(void *s, char c, size_t n) : sets the first n bytes of the memory area pointed by s</span></span><br><span class="line"><span class="comment">     *                                       to the specified value c.</span></span><br><span class="line"><span class="comment">     * DEFINEs:</span></span><br><span class="line"><span class="comment">     *   PTE_P           0x001                   // page table/directory entry flags bit : Present</span></span><br><span class="line"><span class="comment">     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable</span></span><br><span class="line"><span class="comment">     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="type">pde_t</span> *pdep = <span class="literal">NULL</span>;   <span class="comment">// (1) find page directory entry</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>) &#123;              <span class="comment">// (2) check if entry is not present</span></span><br><span class="line">                          <span class="comment">// (3) check if creating is needed, then alloc page for page table</span></span><br><span class="line">                          <span class="comment">// CAUTION: this page is used for page table, not for common data page</span></span><br><span class="line">                          <span class="comment">// (4) set page reference</span></span><br><span class="line">        <span class="type">uintptr_t</span> pa = <span class="number">0</span>; <span class="comment">// (5) get linear address of page</span></span><br><span class="line">                          <span class="comment">// (6) clear page content using memset</span></span><br><span class="line">                          <span class="comment">// (7) set page directory entry&#x27;s permission</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;          <span class="comment">// (8) return page table entry</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//尝试获得页表</span></span><br><span class="line">    <span class="type">pde_t</span> *pdep = &amp;pgdir[PDX(la)]; </span><br><span class="line">    <span class="comment">//若是获取不成功</span></span><br><span class="line">    <span class="keyword">if</span> (!(*pdep &amp; PTE_P)) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">page</span>;</span></span><br><span class="line">        <span class="comment">//若是不需要创建或者创建失败</span></span><br><span class="line">        <span class="keyword">if</span> (!create || (page = alloc_page()) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增加引用次数</span></span><br><span class="line">        set_page_ref(page, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//得到该页物理地址</span></span><br><span class="line">        <span class="type">uintptr_t</span> pa = page2pa(page);</span><br><span class="line">        <span class="comment">//物理地址转虚拟地址并初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(KADDR(pa), <span class="number">0</span>, PGSIZE);</span><br><span class="line">        <span class="comment">//设置控制位</span></span><br><span class="line">        *pdep = pa | PTE_U | PTE_W | PTE_P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回的是虚拟地址la对应的页表项入口地址</span></span><br><span class="line">    <span class="keyword">return</span> &amp;((<span class="type">pte_t</span> *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先尝试使用PDX函数，获取一级页表的位置，如果获取成功，可以直接返回。</li><li>如果获取不成功，那么需要根据create标记位来决定是否创建这一个二级页表（注意，一级页表中，存储的都是二级页表的起始地址）。如果create为0，那么不创建，否则创建。</li><li>既然需要查找这个页表，那么页表的引用次数就要加一。</li><li>之后，需要使用memset将新建的这个页表虚拟地址，全部设置为0，因为这个页所代表的虚拟地址都没有被映射。</li><li>接下来是设置控制位。这里应该设置同时设置上PTE_U、PTE_W和PTE_P，分别代表用户态的软件可以读取对应地址的物理内存页内容、物理内存页内容可写、物理内存页存在。</li></ul><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><blockquote><p>练习3：释放某虚地址所在的页并取消对应二级页表项的映射（需要编程）<br>当释放一个包含某虚地址的物理内存页时，需要让对应此物理内存页的管理数据结构Page做相关的清除处理，使得此物理内存页成为空闲；另外还需把表示虚地址与物理地址对应关系的二级页表项清除。请仔细查看和理解page_remove_pte函数中的注释。为此，需要补全在<br>kern&#x2F;mm&#x2F;pmm.c中的page_remove_pte函数。page_remove_pte函数的调用关系图如下所示：<br>图2 page_remove_pte函数的调用关系图<br>请在实验报告中简要说明你的设计实现过程。请回答如下问题：<br>数据结构Page的全局变量（其实是一个数组）的每一项与页表中的页目录项和页表项有无对应关系？如果有，其对应关系是啥？<br>如果希望虚拟地址与物理地址相等，则需要如何修改lab2，完成此事？ 鼓励通过编程来具体完成这个问题</p></blockquote><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p>page_remove_pte函数补全如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//page_remove_pte - free an Page sturct which is related linear address la</span></span><br><span class="line"><span class="comment">//                - and clean(invalidate) pte which is related linear address la</span></span><br><span class="line"><span class="comment">//note: PT is changed, so the TLB need to be invalidate </span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">page_remove_pte</span><span class="params">(<span class="type">pde_t</span> *pgdir, <span class="type">uintptr_t</span> la, <span class="type">pte_t</span> *ptep)</span> &#123;</span><br><span class="line">    <span class="comment">/* LAB2 EXERCISE 3: YOUR CODE</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Please check if ptep is valid, and tlb must be manually updated if mapping is updated</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Maybe you want help comment, BELOW comments can help you finish the code</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Some Useful MACROs and DEFINEs, you can use them in below implementation.</span></span><br><span class="line"><span class="comment">     * MACROs or Functions:</span></span><br><span class="line"><span class="comment">     *   struct Page *page pte2page(*ptep): get the according page from the value of a ptep</span></span><br><span class="line"><span class="comment">     *   free_page : free a page</span></span><br><span class="line"><span class="comment">     *   page_ref_dec(page) : decrease page-&gt;ref. NOTICE: ff page-&gt;ref == 0 , then this page should be free.</span></span><br><span class="line"><span class="comment">     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being</span></span><br><span class="line"><span class="comment">     *                        edited are the ones currently in use by the processor.</span></span><br><span class="line"><span class="comment">     * DEFINEs:</span></span><br><span class="line"><span class="comment">     *   PTE_P           0x001                   // page table/directory entry flags bit : Present</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>) &#123;                      <span class="comment">//(1) check if this page table entry is present</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">page</span> =</span> <span class="literal">NULL</span>; <span class="comment">//(2) find corresponding page to pte</span></span><br><span class="line">                                  <span class="comment">//(3) decrease page reference</span></span><br><span class="line">                                  <span class="comment">//(4) and free this page when page reference reachs 0</span></span><br><span class="line">                                  <span class="comment">//(5) clear second page table entry</span></span><br><span class="line">                                  <span class="comment">//(6) flush tlb</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (*ptep &amp; PTE_P) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">page</span> =</span> pte2page(*ptep);</span><br><span class="line">        <span class="keyword">if</span> (page_ref_dec(page) == <span class="number">0</span>) &#123;</span><br><span class="line">            free_page(page);</span><br><span class="line">        &#125;</span><br><span class="line">        *ptep = <span class="number">0</span>;</span><br><span class="line">        tlb_invalidate(pgdir, la);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断该页被引用的次数，如果只被引用了一次，那么直接释放掉这页， 否则就删掉二级页表的该表项，即该页的入口。我们先将物理页的引用数目减一，如果变为零，那么释放页面；然后将页目录项清零，刷新页表，即可取消页表映射。</p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p>数据结构Page的全局变量的每一项与页表中的页目录项和页表项有关系。数据结构page是最低级的页表，目录项是一级页表，存储的内容是页表项的起始地址（二级页表），而页表项是二级页表，存储的是每个页表的开始地址，这些内容之间的关系时通过线性地址高低位不同功能的寻址体现的。</p><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p>物理地址和虚拟地址之间存在一定偏移offset，通常，这个offset，就是KERNBASE，是由操作系统决定的，而ucore中，定义在（kern&#x2F;mm&#x2F;memlayout.h）。KERNBASE为虚拟地址空间中的内核基址，即偏移量。如果想要让虚拟地址与物理地址相等，就需要修改偏移值为0。</p><p>修改位置如图所示。</p><p><img src="https://pics.kahvia.cn/img/image-20221113195348463.png" alt="image-20221113195348463"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;练习0&quot;&gt;&lt;a href=&quot;#练习0&quot; class=&quot;headerlink&quot; title=&quot;练习0&quot;&gt;&lt;/a&gt;练习0&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;练习0：填写已有实验&lt;br&gt;本实验依赖实验1。请把你做的实验1的代码填入本实验中代码中有“LAB1”的注释</summary>
      
    
    
    
    <category term="课程实验" scheme="https://blog.kahvia.cn/categories/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="OS" scheme="https://blog.kahvia.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>OS-Lab1</title>
    <link href="https://blog.kahvia.cn/2022/11/13/OS-lab1.html"/>
    <id>https://blog.kahvia.cn/2022/11/13/OS-lab1.html</id>
    <published>2022-11-13T11:57:16.199Z</published>
    <updated>2022-11-13T12:01:06.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><blockquote><p>练习1：理解通过make生成执行文件的过程。（要求在报告中写出对下述问题的回答）<br>列出本实验各练习中对应的OS原理的知识点，并说明本实验中的实现部分如何对应和体现了原理中的基本概念和关键知识点。<br>在此练习中，大家需要通过静态分析代码来了解：</p><p>1.操作系统镜像文件ucore.img是如何一步一步生成的？(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)</p><p>2.一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？ </p></blockquote><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>输入make “V&#x3D;” 得到详细的make过程如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[~/moocos/ucore_lab/labcodes/lab1]</span><br><span class="line">moocos-&gt; make <span class="string">&quot;V=&quot;</span></span><br><span class="line">+ cc kern/init/init.c</span><br><span class="line">gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o</span><br><span class="line">kern/init/init.c:95:1: warning: ‘lab1_switch_test’ defined but not used [-Wunused-<span class="keyword">function</span>]</span><br><span class="line"> lab1_switch_test(void) &#123;</span><br><span class="line"> ^</span><br><span class="line">+ cc kern/libs/readline.c</span><br><span class="line">gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o</span><br><span class="line">+ cc kern/libs/stdio.c</span><br><span class="line">gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o</span><br><span class="line">+ cc kern/debug/kdebug.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o</span><br><span class="line">kern/debug/kdebug.c:251:1: warning: ‘read_eip’ defined but not used [-Wunused-<span class="keyword">function</span>]</span><br><span class="line"> read_eip(void) &#123;</span><br><span class="line"> ^</span><br><span class="line">+ cc kern/debug/kmonitor.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o</span><br><span class="line">+ cc kern/debug/panic.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o</span><br><span class="line">+ cc kern/driver/clock.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o</span><br><span class="line">+ cc kern/driver/console.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o</span><br><span class="line">+ cc kern/driver/intr.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o</span><br><span class="line">+ cc kern/driver/picirq.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o</span><br><span class="line">+ cc kern/trap/trap.c</span><br><span class="line">gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trap.c -o obj/kern/trap/trap.o</span><br><span class="line">kern/trap/trap.c:14:13: warning: ‘print_ticks’ defined but not used [-Wunused-<span class="keyword">function</span>]</span><br><span class="line"> static void <span class="function"><span class="title">print_ticks</span></span>() &#123;</span><br><span class="line">             ^</span><br><span class="line">kern/trap/trap.c:30:26: warning: ‘idt_pd’ defined but not used [-Wunused-variable]</span><br><span class="line"> static struct pseudodesc idt_pd = &#123;</span><br><span class="line">                          ^</span><br><span class="line">+ cc kern/trap/trapentry.S</span><br><span class="line">gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trapentry.S -o obj/kern/trap/trapentry.o</span><br><span class="line">+ cc kern/trap/vectors.S</span><br><span class="line">gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/vectors.S -o obj/kern/trap/vectors.o</span><br><span class="line">+ cc kern/mm/pmm.c</span><br><span class="line">gcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o</span><br><span class="line">+ cc libs/printfmt.c</span><br><span class="line">gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o</span><br><span class="line">+ cc libs/string.c</span><br><span class="line">gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o</span><br><span class="line">+ ld bin/kernel</span><br><span class="line">ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o</span><br><span class="line">+ cc boot/bootasm.S</span><br><span class="line">gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o</span><br><span class="line">+ cc boot/bootmain.c</span><br><span class="line">gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</span><br><span class="line">+ cc tools/sign.c</span><br><span class="line">gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o</span><br><span class="line">gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</span><br><span class="line">+ ld bin/bootblock</span><br><span class="line">ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</span><br><span class="line"><span class="string">&#x27;obj/bootblock.out&#x27;</span> size: 472 bytes</span><br><span class="line">build 512 bytes boot sector: <span class="string">&#x27;bin/bootblock&#x27;</span> success!</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">10000+0 records <span class="keyword">in</span></span><br><span class="line">10000+0 records out</span><br><span class="line">5120000 bytes (5.1 MB) copied, 0.0484045 s, 106 MB/s</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">1+0 records <span class="keyword">in</span></span><br><span class="line">1+0 records out</span><br><span class="line">512 bytes (512 B) copied, 0.000105295 s, 4.9 MB/s</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br><span class="line">138+1 records <span class="keyword">in</span></span><br><span class="line">138+1 records out</span><br><span class="line">70775 bytes (71 kB) copied, 0.00033329 s, 212 MB/s</span><br><span class="line">[~/moocos/ucore_lab/labcodes/lab1]</span><br><span class="line">moocos-&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中我们可以看到一些与gcc有关的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c xxxx.c -o xxxx.o</span><br></pre></td></tr></table></figure><p>这个命令的作用是将某个 c 文件经过 预处理(-E)、汇编(-S)、编译(-c) 后，将得到的结果输出到目标文件，即.o后缀的文件。</p><p>还有ld命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld -o [target]  [<span class="built_in">source</span>]</span><br></pre></td></tr></table></figure><p>将 source 对应的源文件作连接处理，得到最终的文件。</p><p>make记录中对应的目标命令如下，将之前gcc编译出来的，一些以.o后缀的对象文件，作连接处理后，得到最终文件 kernel.ld，存放在tools目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o</span><br></pre></td></tr></table></figure><p>第二部分的编译和连接过程更短，可以看得更直观。编译得到bootasm.o和bootmain.o，再通过ld命令连接，得到obj目录下的bootblock.o文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ cc boot/bootasm.S</span><br><span class="line">gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o</span><br><span class="line">+ cc boot/bootmain.c</span><br><span class="line">gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</span><br><span class="line">+ cc tools/sign.c</span><br><span class="line">gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o</span><br><span class="line">gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</span><br><span class="line">+ ld bin/bootblock</span><br><span class="line">ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</span><br><span class="line"><span class="string">&#x27;obj/bootblock.out&#x27;</span> size: 472 bytes</span><br></pre></td></tr></table></figure><p><img src="https://pics.kahvia.cn/img/image-20221112141937226.png" alt="bootblock.o"></p><p>最后则是 dd 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=xxx of=yyy count=number</span><br></pre></td></tr></table></figure><p>类似于拷贝，if 指定输入文件， of 指定输出文件， count 指定拷贝的的块数。</p><p>make过程中对应的代码块如下。conv&#x3D;notrunc指的是“不截短输出文件”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">10000+0 records <span class="keyword">in</span></span><br><span class="line">10000+0 records out</span><br><span class="line">5120000 bytes (5.1 MB) copied, 0.0484045 s, 106 MB/s</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">1+0 records <span class="keyword">in</span></span><br><span class="line">1+0 records out</span><br><span class="line">512 bytes (512 B) copied, 0.000105295 s, 4.9 MB/s</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br><span class="line">138+1 records <span class="keyword">in</span></span><br><span class="line">138+1 records out</span><br><span class="line">70775 bytes (71 kB) copied, 0.00033329 s, 212 MB/s</span><br></pre></td></tr></table></figure><p>具体拷贝的流程我结合指令详解也不是很明白。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>make生成 ucore.img 大概有三步，分别依赖指令 gcc, ld, dd。</p><p>gcc命令负责编译源文件，ld命令负责连接gcc得到的目标文件，dd命令负责拷贝目标文件到指定的位置。而dd 命令完成后得到的最终文件，就是 ucore.img </p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>引导扇区的大小为512字节。</p><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><blockquote><p>练习2：使用qemu执行并调试lab1中的软件。（要求在报告中简要写出练习过程）<br>为了熟悉使用qemu和gdb进行的调试工作，我们进行如下的小练习：<br>1.从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。<br>2.在初始化位置0x7c00设置实地址断点,测试断点正常。<br>3.从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和bootblock.asm进行比较。<br>4.自己找一个bootloader或内核中的代码位置，设置断点并进行测试。</p></blockquote><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p>在lab1目录下，执行 make -debug，进入调试界面，输入si进行单步跟踪，如下图所示</p><p><img src="https://pics.kahvia.cn/img/image-20221112153930312.png" alt="image-20221112153930312"></p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p>设置实地址断点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set architecture i8086</span><br><span class="line">target remote :1234</span><br><span class="line">b *0x7c00</span><br><span class="line">c</span><br><span class="line">x/2i $pc</span><br></pre></td></tr></table></figure><p>再次使用make -debug,测试断点正常</p><p><img src="https://pics.kahvia.cn/img/image-20221112154421915.png" alt="image-20221112154421915"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>将makefile 的第218行起的代码，修改为如下代码</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">debug: <span class="variable">$(UCOREIMG)</span></span></span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">&quot;<span class="variable">$(QEMU)</span> -S -s -d in_asm -D <span class="variable">$(BINDIR)</span>/q.log -parallel stdio -hda <span class="variable">$&lt;</span> -serial null&quot;</span></span><br><span class="line"><span class="variable">$(V)</span>sleep 2</span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">&quot;gdb -q -tui -x tools/gdbinit&quot;</span></span><br></pre></td></tr></table></figure><p>make -debug 后产生 q.log 文件。通过查找断点地址得如下信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IN: </span><br><span class="line">0x00007c00:  cli    </span><br><span class="line">0x00007c01:  cld    </span><br><span class="line">0x00007c02:  xor    %ax,%ax</span><br><span class="line">0x00007c04:  mov    %ax,%ds</span><br><span class="line">0x00007c06:  mov    %ax,%es</span><br><span class="line">0x00007c08:  mov    %ax,%ss</span><br></pre></td></tr></table></figure><p>而 bootasm.S 文件中，如此显示。</p><p><img src="https://pics.kahvia.cn/img/image-20221112155556494.png" alt="image-20221112155556494"></p><p>bootblock.asm 文件中如此显示。</p><p><img src="https://pics.kahvia.cn/img/image-20221112155733053.png" alt="image-20221112155733053"></p><p>通过比较得知，各文件中，指令差别不大。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>设置新断点为 0x7c16</p><p>make -debug 如图所示。</p><p><img src="https://pics.kahvia.cn/img/image-20221112160237581.png" alt="image-20221112160237581"></p><p>此时正在执行的指令为 test 和 jne</p><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><blockquote><p>练习3：分析bootloader进入保护模式的过程。（要求在报告中写出分析）<br>BIOS将通过读取硬盘主引导扇区到内存，并转跳到对应内存中的位置执行bootloader。请分析bootloader是如何完成从实模式进入保护模式的。</p></blockquote><h3 id="1-开启A20门"><a href="#1-开启A20门" class="headerlink" title="1.开启A20门"></a>1.开启A20门</h3><p>在 bootasm.S 文件中，有这样的代码</p><p><img src="https://pics.kahvia.cn/img/image-20221112162346236.png" alt="image-20221112162346236"></p><p>其中seta20.1是往端口0x64写数据0xd1，告诉CPU我要往8042芯片的P2端口写数据；seta20.2是往端口0x60写数据0xdf，从而将8042芯片的P2端口设置为1. 两段代码都需要先读0x64端口的第2位，确保输入缓冲区为空后再进行后续写操作。</p><h3 id="2-初始化GDT表"><a href="#2-初始化GDT表" class="headerlink" title="2.初始化GDT表"></a>2.初始化GDT表</h3><p>同样在这个文件中。</p><p><img src="https://pics.kahvia.cn/img/image-20221112162738325.png" alt="image-20221112162738325"></p><h3 id="3-进入保护模式"><a href="#3-进入保护模式" class="headerlink" title="3.进入保护模式"></a>3.进入保护模式</h3><p>将cr0寄存器的PE位（cr0寄存器的最低位）设置为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movl %cr0, %eax</span><br><span class="line">orl $CR0_PE_ON, %eax</span><br><span class="line">movl %eax, %cr0</span><br></pre></td></tr></table></figure><h2 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h2><blockquote><p>练习4：分析bootloader加载ELF格式的OS的过程。（要求在报告中写出分析）<br>通过阅读bootmain.c，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&amp;OS，<br>1.bootloader如何读取硬盘扇区的？<br>2.bootloader是如何加载ELF格式的OS？</p></blockquote><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p>在boot目录下的 bootmain.c 文件中，读取扇区的核心代码如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* readsect - read a single sector at @secno into @dst */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">readsect</span><span class="params">(<span class="type">void</span> *dst, <span class="type">uint32_t</span> secno)</span> &#123;</span><br><span class="line">    <span class="comment">// wait for disk to be ready</span></span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    outb(<span class="number">0x1F2</span>, <span class="number">1</span>);                         <span class="comment">// count = 1</span></span><br><span class="line">    outb(<span class="number">0x1F3</span>, secno &amp; <span class="number">0xFF</span>);</span><br><span class="line">    outb(<span class="number">0x1F4</span>, (secno &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    outb(<span class="number">0x1F5</span>, (secno &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    outb(<span class="number">0x1F6</span>, ((secno &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xF</span>) | <span class="number">0xE0</span>);</span><br><span class="line">    outb(<span class="number">0x1F7</span>, <span class="number">0x20</span>);                      <span class="comment">// cmd 0x20 - read sectors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wait for disk to be ready</span></span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read a sector</span></span><br><span class="line">    insl(<span class="number">0x1F0</span>, dst, SECTSIZE / <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>等待磁盘就绪</li><li>发出指令</li><li>等待磁盘就绪</li><li>读取扇区</li></ul><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p>加载ELF格式的OS的核心代码如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* bootmain - the entry of bootloader */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">bootmain</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// read the 1st page off disk</span></span><br><span class="line">    readseg((<span class="type">uintptr_t</span>)ELFHDR, SECTSIZE * <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is this a valid ELF?</span></span><br><span class="line">    <span class="keyword">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC) &#123;</span><br><span class="line">        <span class="keyword">goto</span> bad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proghdr</span> *<span class="title">ph</span>, *<span class="title">eph</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// load each program segment (ignores ph flags)</span></span><br><span class="line">    ph = (<span class="keyword">struct</span> proghdr *)((<span class="type">uintptr_t</span>)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class="line">    eph = ph + ELFHDR-&gt;e_phnum;</span><br><span class="line">    <span class="keyword">for</span> (; ph &lt; eph; ph ++) &#123;</span><br><span class="line">        readseg(ph-&gt;p_va &amp; <span class="number">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the entry point from the ELF header</span></span><br><span class="line">    <span class="comment">// note: does not return</span></span><br><span class="line">    ((<span class="type">void</span> (*)(<span class="type">void</span>))(ELFHDR-&gt;e_entry &amp; <span class="number">0xFFFFFF</span>))();</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line">    outw(<span class="number">0x8A00</span>, <span class="number">0x8A00</span>);</span><br><span class="line">    outw(<span class="number">0x8A00</span>, <span class="number">0x8E00</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* do nothing */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从磁盘读取第一页</li><li>判断是否是合法的ELF</li><li>加载每一个扇区</li><li>从ELF头部调用入口函数</li></ul><h2 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h2><blockquote><p>练习5：实现函数调用堆栈跟踪函数 （需要编程）<br>我们需要在lab1中完成kdebug.c中函数print_stackframe的实现，可以通过函数print_stackframe来跟踪函数调用堆栈中记录的返回地址。在如果能够正确实现此函数，可在lab1中执行 “make qemu”后，在qemu模拟器中得到类似如下的输出：<br>……<br>ebp:0x00007b28 eip:0x00100992 args:0x00010094 0x00010094 0x00007b58 0x00100096<br>kern&#x2F;debug&#x2F;kdebug.c:305: print_stackframe+22<br>ebp:0x00007b38 eip:0x00100c79 args:0x00000000 0x00000000 0x00000000 0x00007ba8<br>kern&#x2F;debug&#x2F;kmonitor.c:125: mon_backtrace+10<br>ebp:0x00007b58 eip:0x00100096 args:0x00000000 0x00007b80 0xffff0000 0x00007b84<br>kern&#x2F;init&#x2F;init.c:48: grade_backtrace2+33<br>ebp:0x00007b78 eip:0x001000bf args:0x00000000 0xffff0000 0x00007ba4 0x00000029<br>kern&#x2F;init&#x2F;init.c:53: grade_backtrace1+38<br>ebp:0x00007b98 eip:0x001000dd args:0x00000000 0x00100000 0xffff0000 0x0000001d<br>kern&#x2F;init&#x2F;init.c:58: grade_backtrace0+23<br>ebp:0x00007bb8 eip:0x00100102 args:0x0010353c 0x00103520 0x00001308 0x00000000<br>kern&#x2F;init&#x2F;init.c:63: grade_backtrace+34<br>ebp:0x00007be8 eip:0x00100059 args:0x00000000 0x00000000 0x00000000 0x00007c53<br>kern&#x2F;init&#x2F;init.c:28: kern_init+88<br>ebp:0x00007bf8 eip:0x00007d73 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8<br><unknow>: – 0x00007d72 –<br>……<br>请完成实验，看看输出是否与上述显示大致一致，并解释最后一行各个数值的含义。</p></blockquote><p>实现函数如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print_stackframe(<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="type">uint32_t</span> *ebp = (<span class="type">uint32_t</span> *)read_ebp();</span><br><span class="line">    <span class="type">uint32_t</span> eip = read_eip();</span><br><span class="line">    <span class="keyword">while</span> (ebp)</span><br><span class="line">    &#123;</span><br><span class="line">        cprintf(<span class="string">&quot;ebp:0x%08x eip:0x%08x args:&quot;</span>, (<span class="type">uint32_t</span>)ebp, eip);</span><br><span class="line">        cprintf(<span class="string">&quot;0x%08x 0x%08x 0x%08x 0x%08x\n&quot;</span>, ebp[<span class="number">2</span>], ebp[<span class="number">3</span>], ebp[<span class="number">4</span>], ebp[<span class="number">5</span>]);</span><br><span class="line">        print_debuginfo(eip - <span class="number">1</span>);</span><br><span class="line">        eip = ebp[<span class="number">1</span>];</span><br><span class="line">        ebp = (<span class="type">uint32_t</span> *)*ebp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行make qemu，结果如下所示</p><p><img src="https://pics.kahvia.cn/img/image-20221112164802166.png" alt="image-20221112164802166"></p><ul><li>ebp：ebp的值是kern_init函数的栈顶地址。</li><li>eip：eip的值是kern_init函数的返回地址，也就是bootmain函数调用kern_init对应的指令的下一条指令的地址。</li><li>args：存放的是boot loader指令的前16个字节。</li></ul><h2 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h2><blockquote><p>练习6：完善中断初始化和处理 （需要编程）<br>请完成编码工作和回答如下问题：<br>1.中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？<br>2.请编程完善kern&#x2F;trap&#x2F;trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools&#x2F;vectors.c生成，使用trap.c中声明的vectors数组即可。<br>3.请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。</p></blockquote><h4 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h4><p>中断描述符表一个表项占8个字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成偏移量，即第16~ 32位是段选择子，第0~ 15、48~63位构成的偏移地址，通过段选择子去GDT中找到对应的基地址，然后基地址加上偏移量就是中断处理程序的地址。</p><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">idt_init</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">     <span class="comment">/* LAB1 YOUR CODE : STEP 2 */</span></span><br><span class="line">     <span class="comment">/* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?</span></span><br><span class="line"><span class="comment">      *     All ISR&#x27;s entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?</span></span><br><span class="line"><span class="comment">      *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c</span></span><br><span class="line"><span class="comment">      *     (try &quot;make&quot; command in lab1, then you will find vector.S in kern/trap DIR)</span></span><br><span class="line"><span class="comment">      *     You can use  &quot;extern uintptr_t __vectors[];&quot; to define this extern variable which will be used later.</span></span><br><span class="line"><span class="comment">      * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).</span></span><br><span class="line"><span class="comment">      *     Can you see idt[256] in this file? Yes, it&#x27;s IDT! you can use SETGATE macro to setup each item of IDT</span></span><br><span class="line"><span class="comment">      * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using &#x27;lidt&#x27; instruction.</span></span><br><span class="line"><span class="comment">      *     You don&#x27;t know the meaning of this instruction? just google it! and check the libs/x86.h to know more.</span></span><br><span class="line"><span class="comment">      *     Notice: the argument of lidt is idt_pd. try to find it!</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uintptr_t</span> __vectors[];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(idt) / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> gatedesc); i ++) &#123;</span><br><span class="line">        SETGATE(idt[i], <span class="number">0</span>, GD_KTEXT, __vectors[i], DPL_KERNEL);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// set for switch from user to kernel</span></span><br><span class="line">    SETGATE(idt[T_SWITCH_TOK], <span class="number">0</span>, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);</span><br><span class="line"><span class="comment">// load the IDT</span></span><br><span class="line">    lidt(&amp;idt_pd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IRQ_OFFSET + IRQ_TIMER:</span><br><span class="line">        <span class="comment">/* LAB1 YOUR CODE : STEP 3 */</span></span><br><span class="line">        <span class="comment">/* handle the timer interrupt */</span></span><br><span class="line">        <span class="comment">/* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c</span></span><br><span class="line"><span class="comment">         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().</span></span><br><span class="line"><span class="comment">         * (3) Too Simple? Yes, I think so!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ticks ++;</span><br><span class="line">        <span class="keyword">if</span> (ticks % TICK_NUM == <span class="number">0</span>) &#123;</span><br><span class="line">            print_ticks();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下所示。</p><p><img src="https://pics.kahvia.cn/img/image-20221112170446171.png" alt="image-20221112170446171"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;练习1&quot;&gt;&lt;a href=&quot;#练习1&quot; class=&quot;headerlink&quot; title=&quot;练习1&quot;&gt;&lt;/a&gt;练习1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;练习1：理解通过make生成执行文件的过程。（要求在报告中写出对下述问题的回答）&lt;br&gt;列出本实验各练习中</summary>
      
    
    
    
    <category term="课程实验" scheme="https://blog.kahvia.cn/categories/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="OS" scheme="https://blog.kahvia.cn/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Android-HttpRequest</title>
    <link href="https://blog.kahvia.cn/2022/10/31/AndroidHttpRequest.html"/>
    <id>https://blog.kahvia.cn/2022/10/31/AndroidHttpRequest.html</id>
    <published>2022-10-31T10:34:42.189Z</published>
    <updated>2022-10-31T11:09:39.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>据度娘解释，以前的安卓应用发出 http 请求后，如果请求时间过长，就会产生应用无响应的状态。所以改成了现在这种，直接发出 http 请求就会抛出错误。想要正确地发出http请求，就需要开一个子线程来进行这些操作。</p><p>下方的代码采用的是，直接通过 Thread 类创建子线程，需要传递的参数是一个实现了 Runnable 接口的类的实例对象。这里的对象通过匿名类生成。线程和匿名类的知识，可以在《Java2 实用教程》（俗称 课本）中找到。</p><p>线程的启动使用 start（）方法。启动后，就进入等待cpu使用权的队列。得到使用权就开始运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">requestPost</span><span class="params">()</span> <span class="keyword">throws</span> IOException, JSONException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//创建URL对象</span></span><br><span class="line">                   URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://www.xxx.com/user/check&quot;</span>);</span><br><span class="line">                   <span class="comment">//获取连接</span></span><br><span class="line">                   HttpURLConnection connection= (HttpURLConnection) url.openConnection();</span><br><span class="line">                   <span class="comment">//设定请求方式</span></span><br><span class="line">                   connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">                   <span class="comment">//设置内容类型，这里是json数据</span></span><br><span class="line">                   connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">                   <span class="comment">//期望接收到的请求返回值</span></span><br><span class="line">                   connection.setRequestProperty(<span class="string">&quot;Accept&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                   <span class="comment">//允许通过连接向外输出，即发送数据到服务器</span></span><br><span class="line">                   connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">                   <span class="comment">//允许通过连接向内输出，即安卓应用收到数据</span></span><br><span class="line">                   connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//创建实体对象</span></span><br><span class="line">                   User user=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;914302063&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">                   <span class="comment">//转换为JSONObject对象。user.toString()的toString方法是额外实现的。</span></span><br><span class="line">                   JSONObject jsonObject=<span class="keyword">new</span> <span class="title class_">JSONObject</span>(user.toString());</span><br><span class="line">                   <span class="comment">//转字符串，也就是这个字符串就是俗称的json字符串，是目标数据。</span></span><br><span class="line">                   String json=jsonObject.toString();</span><br><span class="line">                   Log.i(<span class="string">&quot;JsonData&quot;</span>,json);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//通过连接获取输出流</span></span><br><span class="line">                   OutputStream outputStream=connection.getOutputStream();</span><br><span class="line">                   <span class="comment">//把json字符串转换成字符数组，通过输出流输出</span></span><br><span class="line">                   outputStream.write(json.getBytes());</span><br><span class="line">                   <span class="comment">//outputStream输出流缓存区满了会自动调用flush（），输出流关闭前也会调用。所以这里写不写flush都可。</span></span><br><span class="line">                   outputStream.flush();</span><br><span class="line">                   outputStream.close();</span><br><span class="line">                   Log.i(<span class="string">&quot;responseCode&quot;</span>, String.valueOf(connection.getResponseCode()));</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//通过连接获得输入流</span></span><br><span class="line">                   InputStream inputStream=connection.getInputStream();</span><br><span class="line">                   String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                   StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                   InputStreamReader inputStreamReader=<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">                   BufferedReader bufferedReader=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">                   <span class="keyword">while</span>((result=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                       stringBuilder.append(result);</span><br><span class="line">                   &#125;</span><br><span class="line">                   Log.i(<span class="string">&quot;resultData&quot;</span>, String.valueOf(stringBuilder));</span><br><span class="line">               &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                   System.out.println(e);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;<span class="comment">//这个方法在转换对象为JSONObject的时候会用到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pics.kahvia.cn/img/image-20221031190721290.png" alt="效果图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;POST&quot;&gt;&lt;a href=&quot;#POST&quot; class=&quot;headerlink&quot; title=&quot;POST&quot;&gt;&lt;/a&gt;POST&lt;/h3&gt;&lt;p&gt;据度娘解释，以前的安卓应用发出 http 请求后，如果请求时间过长，就会产生应用无响应的状态。所以改成了现在这种，直接发出 </summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Android" scheme="https://blog.kahvia.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-ListWheelScrollView</title>
    <link href="https://blog.kahvia.cn/2022/10/29/FlutterListWheelScrollView.html"/>
    <id>https://blog.kahvia.cn/2022/10/29/FlutterListWheelScrollView.html</id>
    <published>2022-10-29T06:13:54.682Z</published>
    <updated>2022-10-29T06:37:40.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ListWheelScrollView"><a href="#ListWheelScrollView" class="headerlink" title="ListWheelScrollView"></a>ListWheelScrollView</h3><p>和 ListView 类似，但是正如它的名字，它像个轮子，显示的时候有弧度。</p><p>这是官方的组件，并不需要引入第三方依赖包。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>它就像一个横放的圆柱，你只能看到前面这个面。能看到多少东西，取决于它的大小和你离它的位置。</p><p>可以使用 diameterRatio 改变它的圆面直径。你站在一个地方看圆柱，圆柱越大，你看那个面越不像弧面，能看到的东西就越多。就好像本来弯曲的书本，你让它不那么弯曲后，看到的就更多了吧。</p><p>可以使用 perspective 来决定你的透视位置。你离它越远，看到的东西越多。就像一张弯曲的纸上写着很多字，你贴近了看，只能看到几个字，拿远了看，就看得见一些弯曲后的字，总体上来说能看清的字变多了。</p><p>前者是在视野不变的情况下，让圆柱可视面能显示更多的东西。后者是让圆柱面显示的东西不变的情况下，自己去获得更大的视野，企图去看到更多东西。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checker</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Checker(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//层叠布局，用一个阴影来标注当前选项</span></span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        Center(</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: [</span><br><span class="line">              SizedBox(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                child:ListWheelScrollView.useDelegate(</span><br><span class="line">                  <span class="comment">//固定距离滚动，这样可以刚好停留在一个选项上</span></span><br><span class="line">                    physics: <span class="keyword">const</span> FixedExtentScrollPhysics(),</span><br><span class="line">                    <span class="comment">//透视程度。0代表从无限远的地方观察圆柱，而1代表从无限近的地方观察，近到无法渲染</span></span><br><span class="line">                    <span class="comment">//可选择的范围是(0,0.01]，隔得越远，弧线角度变化越不明显，看到的范围也就越大</span></span><br><span class="line">                    perspective: <span class="number">0.005</span>,</span><br><span class="line">                    <span class="comment">//直径比，默认为2。可以代表这个圆柱截面圆的直径。</span></span><br><span class="line">                    <span class="comment">//在某个固定的地方观察圆柱，圆柱截面直径越大，角度变化越不明显。列表看起来越像直线，看的范围反而好像变大了。</span></span><br><span class="line">                    diameterRatio: <span class="number">1.2</span>,</span><br><span class="line">                    <span class="comment">//每个选项的高度</span></span><br><span class="line">                    itemExtent: <span class="number">50</span>,</span><br><span class="line">                    <span class="comment">//子选项构造器</span></span><br><span class="line">                    childDelegate: ListWheelChildBuilderDelegate(</span><br><span class="line">                        childCount: <span class="number">13</span>,</span><br><span class="line">                        builder: (context,index)=&gt;Hour(hour: index,)</span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              SizedBox(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                child: ListWheelScrollView.useDelegate(</span><br><span class="line">                    physics: <span class="keyword">const</span> FixedExtentScrollPhysics(),</span><br><span class="line">                    perspective: <span class="number">0.005</span>,</span><br><span class="line">                    diameterRatio: <span class="number">1.2</span>,</span><br><span class="line">                    itemExtent: <span class="number">50</span>,</span><br><span class="line">                    childDelegate: ListWheelChildBuilderDelegate(</span><br><span class="line">                        childCount: <span class="number">60</span>,</span><br><span class="line">                        builder: (context,index)=&gt;Minute(minute: index)</span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              SizedBox(</span><br><span class="line">                width: <span class="number">100</span>,</span><br><span class="line">                child: ListWheelScrollView.useDelegate(</span><br><span class="line">                    physics: <span class="keyword">const</span> FixedExtentScrollPhysics(),</span><br><span class="line">                    perspective: <span class="number">0.005</span>,</span><br><span class="line">                    diameterRatio: <span class="number">1.2</span>,</span><br><span class="line">                    itemExtent: <span class="number">50</span>,</span><br><span class="line">                    childDelegate: ListWheelChildBuilderDelegate(</span><br><span class="line">                        childCount: <span class="number">2</span>,</span><br><span class="line">                        builder: (context,index)&#123;</span><br><span class="line">                          <span class="keyword">return</span> AmPm(am: index==<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Center(</span><br><span class="line">          child: Container(</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              color: <span class="keyword">const</span> Color.fromRGBO(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>),</span><br><span class="line">              borderRadius: BorderRadius.circular(<span class="number">24</span>)</span><br><span class="line">            ),</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://pics.kahvia.cn/img/image-20221029143240083.png" alt="image-20221029143240083"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ListWheelScrollView&quot;&gt;&lt;a href=&quot;#ListWheelScrollView&quot; class=&quot;headerlink&quot; title=&quot;ListWheelScrollView&quot;&gt;&lt;/a&gt;ListWheelScrollView&lt;/h3&gt;&lt;p&gt;和 </summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-SmoothPageIndicator-Lottie</title>
    <link href="https://blog.kahvia.cn/2022/10/27/FlutterSmoothPageIndicator.html"/>
    <id>https://blog.kahvia.cn/2022/10/27/FlutterSmoothPageIndicator.html</id>
    <published>2022-10-27T05:30:16.234Z</published>
    <updated>2022-10-28T09:31:54.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SmoothPageIndicator"><a href="#SmoothPageIndicator" class="headerlink" title="SmoothPageIndicator"></a>SmoothPageIndicator</h3><p>平滑的页面指示器。我称它为点集。效果与 dots indicator 类似，但样式更多样。</p><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">smooth_page_indicator:</span> <span class="string">^1.0.0+2</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SmoothPageIndicator(</span><br><span class="line">  <span class="comment">//this controller is PageController,which is usually used in PageView to controlle the page changing</span></span><br><span class="line">  controller: _controller,</span><br><span class="line">  count: <span class="number">3</span>,</span><br><span class="line">  onDotClicked: (index)&#123;</span><br><span class="line">    _controller.jumpToPage(index);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//是特效！我加了特效！</span></span><br><span class="line">  <span class="comment">//ExpandingDotsEffect,ColorTransitionEffect,JumpingDotEffect...</span></span><br><span class="line">  effect: SwapEffect(</span><br><span class="line">    activeDotColor: Colors.deepPurple,</span><br><span class="line">    dotColor: Colors.deepPurple.shade200</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h3><p>一个可以渲染动态特效的工具。常用于渲染 AE 导出的 json 格式的特效。</p><p>可配合<a href="https://lottiefiles.com/">LottieFiles</a>使用。</p><h4 id="依赖引入-1"><a href="#依赖引入-1" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lottie:</span> <span class="string">^1.4.3</span> <span class="comment"># A library for animations</span></span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lottie.asset(<span class="string">&quot;assets/lotties/wifi-high-speed-internet.json&quot;</span>) <span class="comment">//通过预设资源使用</span></span><br><span class="line">Lottie.network(<span class="string">&quot;https://assets5.lottiefiles.com/packages/lf20_mdxpRNhzMQ.json&quot;</span>) <span class="comment">//通过网络资源使用</span></span><br></pre></td></tr></table></figure><h3 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntroductionScreensPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">//the page controller is essential</span></span><br><span class="line">  <span class="keyword">final</span> PageController _controller=PageController();</span><br><span class="line"></span><br><span class="line">  IntroductionScreensPage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//only using the stack layout can make the dots bar shown correctly on the screen</span></span><br><span class="line">    <span class="comment">//因为用column会超出屏幕，然后报错</span></span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      alignment: <span class="keyword">const</span> AlignmentDirectional(<span class="number">0</span>, <span class="number">0.75</span>),</span><br><span class="line">      children: [</span><br><span class="line">        PageView(</span><br><span class="line">          controller: _controller,</span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            IntroductionPage1(),</span><br><span class="line">            IntroductionPage2(),</span><br><span class="line">            IntroductionPage3()</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        SmoothPageIndicator(</span><br><span class="line">          controller: _controller,</span><br><span class="line">          count: <span class="number">3</span>,</span><br><span class="line">          onDotClicked: (index)&#123;</span><br><span class="line">            _controller.jumpToPage(index);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//是特效！我加了特效！</span></span><br><span class="line">          <span class="comment">//ExpandingDotsEffect,ColorTransitionEffect,JumpingDotEffect...</span></span><br><span class="line">          effect: SwapEffect(</span><br><span class="line">            activeDotColor: Colors.deepPurple,</span><br><span class="line">            dotColor: Colors.deepPurple.shade200</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntroductionPage1</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> IntroductionPage1(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Container(</span><br><span class="line">        color: Colors.deepPurple.shade300,</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">30</span>,),</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&quot;It&#x27;s Achat&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                fontFamily: <span class="string">&quot;Bebas_Neue&quot;</span>,</span><br><span class="line">                fontSize: <span class="number">70</span>,</span><br><span class="line">                color: Colors.white</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Lottie.asset(<span class="string">&quot;assets/lotties/talk-show2.json&quot;</span>),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">70</span>,),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://pics.kahvia.cn/img/image-20221027134752117.png" alt="image-20221027134752117"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SmoothPageIndicator&quot;&gt;&lt;a href=&quot;#SmoothPageIndicator&quot; class=&quot;headerlink&quot; title=&quot;SmoothPageIndicator&quot;&gt;&lt;/a&gt;SmoothPageIndicator&lt;/h3&gt;&lt;p&gt;平滑</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-PercentIndicator</title>
    <link href="https://blog.kahvia.cn/2022/10/26/FlutterPercentIndicator.html"/>
    <id>https://blog.kahvia.cn/2022/10/26/FlutterPercentIndicator.html</id>
    <published>2022-10-26T11:20:54.541Z</published>
    <updated>2022-10-28T09:32:02.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PercentIndicator"><a href="#PercentIndicator" class="headerlink" title="PercentIndicator"></a>PercentIndicator</h3><p>这是一个百分比指示器的组件，俗称进度条。是第三方组件，用以弥补官方的 CircularProgressIndicator 的不足。我曾想用官方的进度条组件包裹一个圆框，用以展示头像上传进度，然而官方的组件并不支持在圆环中间插入子组件，所以自己做的话，或许要用层叠布局，颇感麻烦。</p><p>但是今天偶然遇见这个第三方组件就解决了这个问题。</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">percent_indicator:</span> <span class="string">^4.0.1</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBarPageContent</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ProgressBarPageContent(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;ProgressBarPageContent&gt; createState() =&gt; _ProgressBarPageContentState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ProgressBarPageContentState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ProgressBarPageContent</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> progress=<span class="number">0</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: [</span><br><span class="line">          CircularPercentIndicator(</span><br><span class="line">            <span class="comment">//开启过渡动画</span></span><br><span class="line">            animation: <span class="keyword">true</span>,</span><br><span class="line">            <span class="comment">//动画起点从上一次动画终点开始。默认从0开始。</span></span><br><span class="line">            animateFromLastPercent: <span class="keyword">true</span>,</span><br><span class="line">            <span class="comment">//圆环底色</span></span><br><span class="line">            backgroundColor: Colors.red[<span class="number">200</span>]!,</span><br><span class="line">            <span class="comment">//外圆半径</span></span><br><span class="line">            radius: <span class="number">150</span>,</span><br><span class="line">            <span class="comment">//圆环宽度</span></span><br><span class="line">            lineWidth: <span class="number">10</span>,</span><br><span class="line">            <span class="comment">//圆环线帽设置，也就是进度条的尾部，多出一部分用作线帽，线帽的形状</span></span><br><span class="line">            circularStrokeCap: CircularStrokeCap.round,</span><br><span class="line">            <span class="comment">//这里圆环中间可放置任意元素。</span></span><br><span class="line">            center: <span class="keyword">const</span> CircleAvatar(</span><br><span class="line">              backgroundImage: AssetImage(<span class="string">&quot;images/head/nilu.png&quot;</span>),</span><br><span class="line">              radius: <span class="number">140</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">//percent为进度</span></span><br><span class="line">            percent: progress</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(height: <span class="number">10</span>,),</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            style: ButtonStyle(</span><br><span class="line">              backgroundColor: MaterialStateProperty.all(Colors.redAccent)</span><br><span class="line">            ),</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                <span class="keyword">if</span>(progress==<span class="number">1</span>) &#123;</span><br><span class="line">                  progress=<span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  progress=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            child: <span class="keyword">const</span> Text(<span class="string">&quot;Show Progress&quot;</span>)</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://pics.kahvia.cn/img/image-20221026192953616.png" alt="image-20221026192953616"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;PercentIndicator&quot;&gt;&lt;a href=&quot;#PercentIndicator&quot; class=&quot;headerlink&quot; title=&quot;PercentIndicator&quot;&gt;&lt;/a&gt;PercentIndicator&lt;/h3&gt;&lt;p&gt;这是一个百分比指示器的组件，</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Slidable</title>
    <link href="https://blog.kahvia.cn/2022/10/23/FlutterSlidable.html"/>
    <id>https://blog.kahvia.cn/2022/10/23/FlutterSlidable.html</id>
    <published>2022-10-23T09:57:18.396Z</published>
    <updated>2022-10-28T10:35:10.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Slidable"><a href="#Slidable" class="headerlink" title="Slidable"></a>Slidable</h3><p>滑动选项卡组件。</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter_slidable: ^<span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Slidable(<span class="comment">//可滑动的组件</span></span><br><span class="line">  <span class="comment">//end代表从右边往左边滑动</span></span><br><span class="line">  endActionPane: ActionPane(<span class="comment">//滑动选项面板</span></span><br><span class="line">    motion: <span class="keyword">const</span> StretchMotion(),<span class="comment">//滑动动画</span></span><br><span class="line">    children: [</span><br><span class="line">      <span class="comment">//SlidableAction是单个滑动选项</span></span><br><span class="line">      SlidableAction(</span><br><span class="line">        onPressed: onDelete,<span class="comment">//触发删除的函数</span></span><br><span class="line">        icon: Icons.delete,<span class="comment">//图标</span></span><br><span class="line">        backgroundColor: Colors.redAccent,<span class="comment">//背景色</span></span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">12</span>),<span class="comment">//圆角</span></span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">  child: Container(</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24</span>),</span><br><span class="line">    <span class="comment">// height: 60,</span></span><br><span class="line">    decoration:  BoxDecoration(</span><br><span class="line">        color: Colors.orange,</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">12</span>)</span><br><span class="line">    ),</span><br><span class="line">    child: Row(</span><br><span class="line">      children: [</span><br><span class="line">        Checkbox(</span><br><span class="line">          value: finished,</span><br><span class="line">          onChanged: onChanged,</span><br><span class="line">          activeColor: Colors.black,</span><br><span class="line">        ),</span><br><span class="line">        Text(</span><br><span class="line">          taskName,</span><br><span class="line">          style: TextStyle(decoration: finished?TextDecoration.lineThrough:TextDecoration.none),</span><br><span class="line">          overflow: TextOverflow.ellipsis,</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> Navigator.of(context).pop();&#x2F;&#x2F;这样Navigator.pop(context);&#x2F;&#x2F;或这样dart</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Slidable&quot;&gt;&lt;a href=&quot;#Slidable&quot; class=&quot;headerlink&quot; title=&quot;Slidable&quot;&gt;&lt;/a&gt;Slidable&lt;/h3&gt;&lt;p&gt;滑动选项卡组件。&lt;/p&gt;
&lt;h3 id=&quot;依赖引入&quot;&gt;&lt;a href=&quot;#依赖引入&quot; cla</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-CircularProgressIndicator</title>
    <link href="https://blog.kahvia.cn/2022/10/20/FlutterCircularProgressIndicator.html"/>
    <id>https://blog.kahvia.cn/2022/10/20/FlutterCircularProgressIndicator.html</id>
    <published>2022-10-20T08:29:31.068Z</published>
    <updated>2022-10-28T09:32:14.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CircularProgressIndicator"><a href="#CircularProgressIndicator" class="headerlink" title="CircularProgressIndicator"></a>CircularProgressIndicator</h3><p>圆形的进度指示。可以用于等待加载的时候。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>常配合 showDialog( ) 使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">showDialog(</span><br><span class="line">    context: context,</span><br><span class="line">    builder: (context)&#123;</span><br><span class="line">      <span class="keyword">return</span> Center(</span><br><span class="line">        child: CircularProgressIndicator(color: MyColors.rgbRed,),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用完以后用 Navigator 回退页面就行了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();<span class="comment">//这样</span></span><br><span class="line">Navigator.pop(context);<span class="comment">//或这样</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CircularProgressIndicator&quot;&gt;&lt;a href=&quot;#CircularProgressIndicator&quot; class=&quot;headerlink&quot; title=&quot;CircularProgressIndicator&quot;&gt;&lt;/a&gt;CircularPro</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-ImagePicker-ImageCropper</title>
    <link href="https://blog.kahvia.cn/2022/10/20/FlutterImagePickerAndCropper.html"/>
    <id>https://blog.kahvia.cn/2022/10/20/FlutterImagePickerAndCropper.html</id>
    <published>2022-10-20T05:49:22.508Z</published>
    <updated>2022-10-28T09:32:25.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ImagePicker"><a href="#ImagePicker" class="headerlink" title="ImagePicker"></a>ImagePicker</h3><p>Flutter用于选择图片的工具包。</p><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image_picker:</span> <span class="string">^0.8.6</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ImagePicker _picker=ImagePicker();<span class="comment">//创建选择器实例</span></span><br><span class="line">onPressed: ()<span class="keyword">async</span>&#123;</span><br><span class="line">        <span class="comment">//从相册选择图片</span></span><br><span class="line">        <span class="keyword">final</span> image=<span class="keyword">await</span> _picker.pickImage(source: ImageSource.gallery);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="ImageCropper"><a href="#ImageCropper" class="headerlink" title="ImageCropper"></a>ImageCropper</h3><p>用于图片裁剪的工具包</p><h4 id="依赖引入-1"><a href="#依赖引入-1" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image_cropper:</span> <span class="string">^3.0.0</span></span><br></pre></td></tr></table></figure><h4 id="相关配置-安卓需要配置，ios不需要"><a href="#相关配置-安卓需要配置，ios不需要" class="headerlink" title="相关配置(安卓需要配置，ios不需要)"></a>相关配置(安卓需要配置，ios不需要)</h4><p>在AndroidManifest.xml加入以下信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.yalantis.ucrop.UCropActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CroppedFile? croppedImage=<span class="keyword">await</span> ImageCropper().cropImage(sourcePath: image.path);<span class="comment">//创建裁剪器给定图片源进行裁剪</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//创建图片选择器实例</span></span><br><span class="line">  <span class="keyword">final</span> ImagePicker _picker=ImagePicker();</span><br><span class="line">  <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">    <span class="comment">//单击按钮触发选择</span></span><br><span class="line">    onPressed: ()<span class="keyword">async</span>&#123;</span><br><span class="line">      <span class="comment">//从相册选择图片</span></span><br><span class="line">      <span class="keyword">final</span> image=<span class="keyword">await</span> _picker.pickImage(source: ImageSource.gallery); <span class="comment">//返回的是XFile对象</span></span><br><span class="line">      <span class="comment">//选择了图片则创建裁剪器实例进入裁剪环节</span></span><br><span class="line">      <span class="keyword">if</span>(image!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        CroppedFile? croppedImage=<span class="keyword">await</span> ImageCropper().cropImage(sourcePath: image.path);<span class="comment">//根据XFile对象的路径获得图片进行裁剪</span></span><br><span class="line">        <span class="comment">//裁剪了则把裁剪后的图片设置为预览的文件源</span></span><br><span class="line">        <span class="keyword">if</span>(croppedImage!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          context.read&lt;ImageData&gt;().setImage(File(croppedImage.path));<span class="comment">//CroppedFile转File，上传图片的时候根据File转MultipartFile即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未裁剪则设置裁剪之前选择的图片作为预览的文件源</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          context.read&lt;ImageData&gt;().setImage(File(image.path));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    style: ButtonStyle(</span><br><span class="line">        shape: MaterialStateProperty.all(<span class="keyword">const</span> RoundedRectangleBorder(</span><br><span class="line">            borderRadius: BorderRadius.all(Radius.circular(<span class="number">30</span>))</span><br><span class="line">        )),</span><br><span class="line">        <span class="comment">//设置按钮宽度高度等</span></span><br><span class="line">        minimumSize: MaterialStateProperty.all(<span class="keyword">const</span> Size(<span class="number">300</span>, <span class="number">40</span>)),</span><br><span class="line">        backgroundColor: MaterialStateProperty.all(MyColors.rgbRed)</span><br><span class="line">    ),</span><br><span class="line">    child: <span class="keyword">const</span> Text(<span class="string">&quot;Select a photo from gallery&quot;</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片选择或裁剪完毕后，单击完成上传</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinishedButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> FinishedButton(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//创建dio实例，用于发送http请求</span></span><br><span class="line">    <span class="keyword">final</span> dio=Dio();</span><br><span class="line">    <span class="comment">//获取已经准备好的图片文件源</span></span><br><span class="line">    File? image=context.watch&lt;ImageData&gt;().image;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: image==null?<span class="comment">//没有文件源代表没有选图片，不进行上传操作</span></span><br><span class="line">      ()&#123;&#125;:<span class="comment">//有文件源就进入上传阶段</span></span><br><span class="line">      ()<span class="keyword">async</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> multipartImg=<span class="keyword">await</span> MultipartFile.fromFile(image.path);<span class="comment">//根据文件源生成媒体图片</span></span><br><span class="line">        <span class="keyword">final</span> map=&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt;&#123;&#125;;<span class="comment">//创建map存储图片</span></span><br><span class="line">        map[<span class="string">&#x27;file&#x27;</span>]=<span class="keyword">await</span> MultipartFile.fromFile(image.path);</span><br><span class="line">        <span class="comment">//将map转为表单数据后，发送post请求，上传服务器，并接收返回的数据</span></span><br><span class="line">        <span class="keyword">var</span> response=<span class="keyword">await</span> dio.post(<span class="string">&quot;<span class="subst">$serviceUploadHeader</span>/<span class="subst">$&#123;context.read&lt;UserMsg&gt;().userId&#125;</span>&quot;</span>,data: FormData.fromMap(map));</span><br><span class="line">        context.read&lt;UserMsg&gt;().setHeadImg(response.data);<span class="comment">//及时更新头像的链接</span></span><br><span class="line">        Navigator.pop(context);<span class="comment">//上传完毕即退回首页</span></span><br><span class="line">      &#125;,</span><br><span class="line">      style: ButtonStyle(</span><br><span class="line">          backgroundColor: image==null?</span><br><span class="line">          MaterialStateProperty.all(Colors.grey):</span><br><span class="line">          MaterialStateProperty.all(MyColors.rgbRed)</span><br><span class="line">      ),</span><br><span class="line">      child:  <span class="keyword">const</span> Text(<span class="string">&quot;Finished&quot;</span>,),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;ImagePicker&quot;&gt;&lt;a href=&quot;#ImagePicker&quot; class=&quot;headerlink&quot; title=&quot;ImagePicker&quot;&gt;&lt;/a&gt;ImagePicker&lt;/h3&gt;&lt;p&gt;Flutter用于选择图片的工具包。&lt;/p&gt;
&lt;h4 id=&quot;依赖引入&quot;&gt;&lt;a href=&quot;#依赖引入&quot; class=&quot;headerlink&quot; title=&quot;依赖引入&quot;&gt;&lt;/a&gt;依赖引入&lt;/h4&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;image_picker:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;^0.8.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ImagePicker _picker=ImagePicker();&lt;span class=&quot;comment&quot;&gt;//创建选择器实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onPressed: ()&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//从相册选择图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; image=&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; _picker.pickImage(source: ImageSource.gallery);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ImageCropper&quot;&gt;&lt;a href=&quot;#ImageCropper&quot; class=&quot;headerlink&quot; title=&quot;ImageCropper&quot;&gt;&lt;/a&gt;ImageCropper&lt;/h3&gt;&lt;p&gt;用于图片裁剪的工具包&lt;/p&gt;
&lt;h4 id=&quot;依赖引入-1&quot;&gt;&lt;a href=&quot;#依赖引入-1&quot; class=&quot;headerlink&quot; title=&quot;依赖引入&quot;&gt;&lt;/a&gt;依赖引入&lt;/h4&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;image_cropper:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;^3.0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;相关配置-安卓需要配置，ios不需要&quot;&gt;&lt;a href=&quot;#相关配置-安卓需要配置，ios不需要&quot; class=&quot;headerlink&quot; title=&quot;相关配置(安卓需要配置，ios不需要)&quot;&gt;&lt;/a&gt;相关配置(安卓需要配置，ios不需要)&lt;/h4&gt;&lt;p&gt;在AndroidManifest.xml加入以下信息。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;com.yalantis.ucrop.UCropActivity&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:screenOrientation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;portrait&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;@style/Theme.AppCompat.Light.NoActionBar&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h4 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CroppedFile? croppedImage=&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; ImageCropper().cropImage(sourcePath: image.path);&lt;span class=&quot;comment&quot;&gt;//创建裁剪器给定图片源进行裁剪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>MicroService-Nacos</title>
    <link href="https://blog.kahvia.cn/2022/10/16/MicroserviceNacos.html"/>
    <id>https://blog.kahvia.cn/2022/10/16/MicroserviceNacos.html</id>
    <published>2022-10-16T04:52:16.493Z</published>
    <updated>2022-10-28T09:32:19.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>用于替代已经停止维护的 Eureka 。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>在<a href="https://github.com/alibaba/nacos">AlibabaNacos</a>的里程碑中选择版本进行下载。</p><p>下载解压后，在 bin 目录下打开终端，输入指令启动。Windows 运行cmd文件，Linux运行sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>默认服务端口为8848，可在 conf 目录下配置文件 application.properties 中更改。</p><span id="more"></span><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在父工程的pom文件中添加依赖管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            包含nacos的项目依赖管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程（各微服务对应的spring boot项目）pom文件中添加 nacos 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程配置文件yml中配置服务端地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">39940</span></span><br></pre></td></tr></table></figure><h3 id="服务多级存储模型"><a href="#服务多级存储模型" class="headerlink" title="服务多级存储模型"></a>服务多级存储模型</h3><p>微服务分集群部署。分集群部署，服务不容易同时挂掉。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://www.kahvia.cn:3306/Blogs?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Mysql3306@.com</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span> </span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span> <span class="comment">#集群名称，常按地名划分，YC为宜昌</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">39940</span></span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>局部策略（在某个微服务中调用指定微服务的负载均衡策略）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UserService:</span> <span class="comment">#为某个微服务配置负载均衡的规则</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#该策略优先远程调用同集群的微服务，同集群挂掉会访问其它集群</span></span><br></pre></td></tr></table></figure><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>在nacos管理页面中，可以为同一微服务同一集群的不同实例设置权重。权重越大，负载均衡选中的几率越大。</p><p>可以通过将权重置零来进行服务的升级，升级完成后设置较小权重进行服务测试。</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>不同环境（不同命名空间）的服务无法互相调用。可用于开发环境与上线后的环境隔离，大概？</p><p>在nacos管理页面中，可新建命名空间，获取它的id后，在需要配置环境隔离的服务项目的 application.yml 中，如下配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">AchatWs</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务端地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span> <span class="comment">#集群模拟，宜昌</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">id</span> <span class="comment">#命名空间的id</span></span><br></pre></td></tr></table></figure><h3 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h3><p>客户端引入nacos配置管理的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要进行配置管理的项目新建 bootstrap.yml 文件，在其中写入与nacos有关的属性，如开发环境、服务端地址、微服务名称等。这些信息在 application.yml 中就可以不写了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bootstrap.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#要获取的配置文件后缀名</span></span><br></pre></td></tr></table></figure><p>项目启动的时候，会优先读取 bootstrap.yml 中的配置信息，再根据其中的信息去nacos服务端获取nacos管理的配置，将这个获取到的配置与之后读取的 application.yml 作合并，最后才完整地启动项目。</p><p>nacos服务端新建配置，ID由“服务名-环境.后缀”组成最好。</p><p><img src="https://img1.imgtp.com/2022/10/16/wDZtkR8c.png" alt="自定义配置"></p><h3 id="Nacos配置管理的热更新"><a href="#Nacos配置管理的热更新" class="headerlink" title="Nacos配置管理的热更新"></a>Nacos配置管理的热更新</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>哪里使用就为那里的类添加热更新注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//加这个注解才能实现配置的热更新</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String format;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time&quot;)</span></span><br><span class="line">    String <span class="title function_">getTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方对@RefreshScope的解释是</p><blockquote><p>Convenience annotation to put a @Bean definition in refresh scope. Beans annotated this way can be refreshed at runtime and any components that are using them will get a new instance on the next method call, fully initialized and injected with all dependencies.</p></blockquote><h4 id="方式二-推荐"><a href="#方式二-推荐" class="headerlink" title="方式二(推荐)"></a>方式二(推荐)</h4><p>自定义配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.userservice.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><span class="comment">//prefix是前缀的意思，前缀和属性名拼接之后的属性若是在配置文件中，就可以实现自动注入</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesFromNacos</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;<span class="comment">//属性名。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDateformat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dateformat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateformat</span><span class="params">(String dateformat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateformat = dateformat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ConfigurationProperties(prefix &#x3D; “xxx”)源码注释</p><blockquote><p>The prefix of the properties that are valid to bind to this object. Synonym for prefix(). A valid prefix is defined by one or more words separated with dots (e.g. “acme.system.feature”).<br>Returns: the prefix of the properties to bind</p></blockquote><p>使用该注释，需要引入依赖</p><blockquote><p>You can easily generate your own configuration metadata file from items annotated with <code>@ConfigurationProperties</code> by using the <code>spring-boot-configuration-processor</code> jar. The jar includes a Java annotation processor which is invoked as your project is compiled.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多环境共享配置"><a href="#多环境共享配置" class="headerlink" title="多环境共享配置"></a>多环境共享配置</h3><p>在nacos管理页面创建配置文件的名字，只需要用服务的名字就可以了。比如，UserService,而不是UserService-dev.</p><p>项目启动时，会同时从nacos读取上述两种配置，后者的优先级大于前者，前者大于本地。同名属性则覆盖。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Nacos&quot;&gt;&lt;a href=&quot;#Nacos&quot; class=&quot;headerlink&quot; title=&quot;Nacos&quot;&gt;&lt;/a&gt;Nacos&lt;/h3&gt;&lt;p&gt;用于替代已经停止维护的 Eureka 。&lt;/p&gt;
&lt;h3 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/alibaba/nacos&quot;&gt;AlibabaNacos&lt;/a&gt;的里程碑中选择版本进行下载。&lt;/p&gt;
&lt;p&gt;下载解压后，在 bin 目录下打开终端，输入指令启动。Windows 运行cmd文件，Linux运行sh文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./startup.cmd -m standalone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;默认服务端口为8848，可在 conf 目录下配置文件 application.properties 中更改。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="MicroService" scheme="https://blog.kahvia.cn/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Springboot项目打 jar 包没有webapp中的静态资源</title>
    <link href="https://blog.kahvia.cn/2022/10/07/SpringbootWithoutWebapp.html"/>
    <id>https://blog.kahvia.cn/2022/10/07/SpringbootWithoutWebapp.html</id>
    <published>2022-10-07T03:21:50.351Z</published>
    <updated>2022-10-24T04:13:33.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题发生场景"><a href="#问题发生场景" class="headerlink" title="问题发生场景"></a>问题发生场景</h3><p>以下场景都建立在 maven 打 jar 包的基础上。</p><p>昨日我如往常一样，在springboot项目中新建 webapp 文件夹，然后在里面放俩空文件夹，作为项目里文件上传中转的地方。然后发现打包后程序运行时并不能找到webapp文件夹中的静态资源。查看编译后产生的 target 目录发现，webapp并没有被编译。如下图所示。</p><p><img src="https://img1.imgtp.com/2022/10/09/KyQk4s01.png" alt="webapp未编译"></p><p>而平时开发，直接通过 idea 运行的时候，却会编译 webapp 下的资源文件到 classes 目录下。如下图所示。</p><p><img src="https://img1.imgtp.com/2022/10/09/0NJ4MtZB.png" alt="idea直接运行"></p><span id="more"></span><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果跟我一样不愿意放弃 webapp 的使用，那么想要解决这个问题，就需要手动指定项目构建时的资源路径。</p><p>在 pom.xml 文件的 build 标签中，添加以下代码，手动指定资源路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：这样只指定webapp的路径的话，resource 中的 static 和 template 就不会被编译了。要是都想要的话，就得都手动指定。</p><p>也就是说，springboot 使用 maven编译时，默认只寻找 resources 中的静态资源，而忽略 webapp。</p><h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><p>自问：为什么我以前学习 spring mvc 的时候，用 webapp 文件夹存放静态资源没有任何问题呢？</p><p>自答：非要说 springboot 和 spring mvc 直观上有哪里不太一样的话，那就是打包方式了。以前学习 spring mvc 的时候，都是打 war 包，然后部署到自己的 tomcat 服务器上。静态资源放在 webapp 中，而我似乎也一直是这么用的。但是当我学了spring boot后，项目都是在本地的idea直接运行，并没有正儿八经打包，然后手动部署过。因为 idea 自身会编译 webapp 下的文件，所以一直没有发现过问题。</p><p>所以另一种解决方案就是把 spring boot 打成 war 包。</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>究其原因还是项目打成 jar 包和 war 包的区别。这里采用网上的描述。</p><ul><li><p>jar文件包括java普通类、资源文件和普通文件，在maven中即是打包 src&#x2F;main&#x2F;java 和 src&#x2F;main&#x2F;resources 资源文件夹下的所有文件。在打包的时候会自动生成 META-INF 文件夹，用于存储 maven 的 pom 信息和 MANIFEST.MF 文件。（未包含 webapp 文件夹）</p></li><li><p>war文件包含全部的web应用程序，即所有的java类，配置信息和jsp、js等静态资源。（也就是说 webapp 文件夹也包含了）</p></li></ul><p>或许这就是为什么学习 spring mvc 的时候我还在前后端一体， 而学习 spring boot 后却下意识的用起了前后端分离吧。码农的直觉？</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题发生场景&quot;&gt;&lt;a href=&quot;#问题发生场景&quot; class=&quot;headerlink&quot; title=&quot;问题发生场景&quot;&gt;&lt;/a&gt;问题发生场景&lt;/h3&gt;&lt;p&gt;以下场景都建立在 maven 打 jar 包的基础上。&lt;/p&gt;
&lt;p&gt;昨日我如往常一样，在springboot项目中新建 webapp 文件夹，然后在里面放俩空文件夹，作为项目里文件上传中转的地方。然后发现打包后程序运行时并不能找到webapp文件夹中的静态资源。查看编译后产生的 target 目录发现，webapp并没有被编译。如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.imgtp.com/2022/10/09/KyQk4s01.png&quot; alt=&quot;webapp未编译&quot;&gt;&lt;/p&gt;
&lt;p&gt;而平时开发，直接通过 idea 运行的时候，却会编译 webapp 下的资源文件到 classes 目录下。如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img1.imgtp.com/2022/10/09/0NJ4MtZB.png&quot; alt=&quot;idea直接运行&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="小问题" scheme="https://blog.kahvia.cn/categories/%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="Springboot" scheme="https://blog.kahvia.cn/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>MicroService-Eureka</title>
    <link href="https://blog.kahvia.cn/2022/10/05/MicroserviceEureka.html"/>
    <id>https://blog.kahvia.cn/2022/10/05/MicroserviceEureka.html</id>
    <published>2022-10-05T06:36:11.655Z</published>
    <updated>2022-10-24T04:13:33.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>微服务的注册中心。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.应用启动入口标注@EnableEurekaServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在 application.yml 中配置相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaServer</span> <span class="comment"># 应用自己的名称，会在eureka中注册后显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost/eureka</span> <span class="comment"># eureka的服务端地址</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1.添加依赖(若是依赖管理中没有客户端的版本，则需要像下面这样手动添加，版本最好跟服务端保持一致)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在 application.yml 中配置相关信息</p><p>修改端口和应用名称，eureka的服务端地址保持不变。</p><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>服务的远程调用包含两个客户端：调用服务的是消费者，被调用服务的是提供者。一个客户端可用同时是消费者和提供者。</p><p>远程调用服务可使用 RestTemplate 类的实例的 getObject 方法。</p><p>比如，我写一个工具类。将构建 RestTemplate 实体的工厂函数注册为 bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在有需要的地方自动装配一个 RestTemplate 对象，调用它的各种请求方法就行了。post示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.controller;</span><br><span class="line"><span class="keyword">import</span> cn.kahvia.imageservice.pojo.UploadResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadImg</span><span class="params">(MultipartFile file, HttpServletRequest request)</span>&#123;</span><br><span class="line">        String path=request.getServletContext().getRealPath(<span class="string">&quot;&quot;</span>);<span class="comment">//获取当前servlet上下文的绝对路径</span></span><br><span class="line"></span><br><span class="line">        File temp=<span class="keyword">new</span> <span class="title class_">File</span>(path,file.getOriginalFilename());<span class="comment">//在这个路径下新建一个临时文件temp</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//接受用户上传的文件，往temp中输出</span></span><br><span class="line">            InputStream inputStream=file.getInputStream();</span><br><span class="line">            FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(temp);</span><br><span class="line">            BufferedOutputStream bufferedOutputStream=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream);</span><br><span class="line">            <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span> b[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//1024个字节，也就1024byte，即1kb</span></span><br><span class="line">            <span class="keyword">while</span> ((n=inputStream.read(b))!=-<span class="number">1</span>)<span class="comment">//read(b)，是说从输入流中读取“b的大小”这么多的数据到b中，并返回读取的字节个数，-1代表读取完了</span></span><br><span class="line">            &#123;</span><br><span class="line">                bufferedOutputStream.write(b);<span class="comment">//把读取到的的，存放在b中的数据写入到输出流指向的文件中</span></span><br><span class="line">            &#125;</span><br><span class="line">            bufferedOutputStream.flush();<span class="comment">//刷新缓存区，刷新后，缓冲输出流指向的底层输入流，即fileOutputStream会立即将缓存的内容写入目的地</span></span><br><span class="line">            bufferedOutputStream.close();<span class="comment">//先关闭上层输出流</span></span><br><span class="line">            inputStream.close();<span class="comment">//再关闭底层输出流。按理说关了上层，底层也会自动关。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个空的map，用来存储请求第三方接口所需的数据</span></span><br><span class="line">        MultiValueMap&lt;String,Object&gt; map= <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//利用刚刚生成的临时文件，创建文件系统资源</span></span><br><span class="line">        FileSystemResource fileSystemResource=<span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(temp);</span><br><span class="line">        <span class="comment">//添加到数据map中，第三方所需的参数名为image</span></span><br><span class="line">        map.add(<span class="string">&quot;image&quot;</span>,fileSystemResource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求头，包括访问的浏览器，和请求体内容固定类型，传输文件要选择表单数据&quot;multipart/form-data&quot;</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>);</span><br><span class="line">        headers.add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成http请求</span></span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; entity=<span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;( map,headers);</span><br><span class="line">        <span class="comment">//发送http请求，返回目标对象。返回的json数据会自动封装为目标对象。</span></span><br><span class="line">        UploadResult uploadResult= restTemplate.postForObject(<span class="string">&quot;https://xxxxxx/api/upload&quot;</span>,entity,UploadResult.class);</span><br><span class="line">        temp.delete();<span class="comment">//删除中转文件</span></span><br><span class="line">        System.out.println(uploadResult.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>为 RestTemplate 的工厂函数添加 @LoadBalanced注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：远程调用其它服务端的接口时，发出的请求会被拦截，然后根据请求的地址获取主机名（如果是eureka服务获取到的就是服务名），获取到服务名后再去eureka注册中心中取得对应服务名的所有服务端地址，根据负载均衡轮询或者随机的规则选取一个合适的地址，替换请求的地址中的服务名后，再放行，从而实现负载均衡。</p><h3 id="负载均衡的策略"><a href="#负载均衡的策略" class="headerlink" title="负载均衡的策略"></a>负载均衡的策略</h3><ul><li>RoundRobinRule：简单的轮询。Ribbon默认策略。</li><li>ZoneAvoidanceRule：以区域为基础，进行服务器的选择。使用Zone进行分类。</li><li>RandomRule：随机。</li><li>RetryRule：重连。</li><li>AvailabilityFilteringRule，BestAvailableRule，WeightedResponseTimeRule等</li></ul><p>全局策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局配置，对所有微服务有效</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//使用负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IRule <span class="title function_">setBalanceRule</span><span class="params">()</span>&#123;<span class="comment">//设置策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BestAvailableRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UserService:</span> <span class="comment">#为某个微服务配置负载均衡的规则</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><h3 id="Ribbon修改饥饿加载"><a href="#Ribbon修改饥饿加载" class="headerlink" title="Ribbon修改饥饿加载"></a>Ribbon修改饥饿加载</h3><p>Ribbon默认是懒加载，也就是说，Ribbon提供的负载均衡的服务 LoadBalancerClient 并不会随着服务端启动而启动。第一次请求远程调用时，会初始化负载均衡服务，所以第一次会比较慢。</p><p>如果想要让负载均衡服务随着服务端启动而启动，就需要设置饥饿加载。在 application.yml 文件中配置饥饿加载。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载，减少第一次远程调用的时间</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">UserService</span> <span class="comment">#饥饿加载的名称,多个则换行以-开头分隔</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h3&gt;&lt;p&gt;微服务的注册中心。&lt;/p&gt;
&lt;h3 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h3&gt;&lt;p&gt;1.添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-netflix-eureka-server&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.应用启动入口标注@EnableEurekaServer&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@EnableEurekaServer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;EurekaServerDemoApplication&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SpringApplication.run(EurekaServerDemoApplication.class, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.在 application.yml 中配置相关信息&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;application:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;eurekaServer&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 应用自己的名称，会在eureka中注册后显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;eureka:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;client:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;service-url:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;defaultZone:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;http://localhost/eureka&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# eureka的服务端地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="MicroService" scheme="https://blog.kahvia.cn/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-TextFormField</title>
    <link href="https://blog.kahvia.cn/2022/10/01/FlutterTextFormField.html"/>
    <id>https://blog.kahvia.cn/2022/10/01/FlutterTextFormField.html</id>
    <published>2022-10-01T03:01:39.421Z</published>
    <updated>2022-10-24T04:13:33.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TextFormField"><a href="#TextFormField" class="headerlink" title="TextFormField"></a>TextFormField</h3><ul><li>decoration：使用 InputDecoration 来创建文本框</li><li>controller：指定 TextEditingController 对象，可以通过这个对象来获取文本框的值</li></ul><h4 id="InputDecoration"><a href="#InputDecoration" class="headerlink" title="InputDecoration"></a>InputDecoration</h4><ul><li>focusedBorder：文本框聚焦的时候的边框样式</li><li>disabledBorder：禁止输入时</li><li>enabledBorder：允许选中时</li><li>contentPadding：文本区实际上是由 InputDecoration 创建的，而此处的 padding 就是设置的这个文本区的 padding</li><li>border：设置为 Border.none 可以不渲染边框。但是常常会造成文本框内容不能居中。</li><li>hintText：输入框的提示字段，类似于 html 中的 placeholder</li></ul><p>ps：想要输入框的内容正常的垂直居中，就需要边框，不想要样式的话，可以设置边框为透明色，宽度为0。除此之外，还需要设置 contentPadding 为0才能保证绝对垂直居中。</p><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TextFormField(</span><br><span class="line">  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">    focusedBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    disabledBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    enabledBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    contentPadding: EdgeInsets.symmetric(vertical: <span class="number">0</span>),</span><br><span class="line">    hintText: <span class="string">&quot;消息&quot;</span>,</span><br><span class="line">  ),</span><br><span class="line">  controller: textEditingController,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;TextFormField&quot;&gt;&lt;a href=&quot;#TextFormField&quot; class=&quot;headerlink&quot; title=&quot;TextFormField&quot;&gt;&lt;/a&gt;TextFormField&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;decoration：使用 InputD</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-购物小测试</title>
    <link href="https://blog.kahvia.cn/2022/09/29/FlutterGoodsStoreDemo.html"/>
    <id>https://blog.kahvia.cn/2022/09/29/FlutterGoodsStoreDemo.html</id>
    <published>2022-09-29T11:29:15.301Z</published>
    <updated>2022-10-24T04:13:33.029Z</updated>
    
    <content type="html"><![CDATA[<p> 在学习 Provider 的时候，我在 flutter 的官方小教程中，看到了一个 demo，有关购买商品，加入购物车的。刚学习 Provider 的时候，很多地方不明白，所以那个案例也没有能够理解。</p><p>今天的我已经能使用 Navigator 和 Provider 的知识了。利用我已有的知识，可以大概模仿出官方 demo 的样子了。</p><h3 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h3><p>这个 demo 涉及到三个页面，第一个是登录界面，第二个是商品界面，第三个是购物车界面。</p><p>分别命名为：Login, Catalog, Cart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Login.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Catalog.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Cart.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routes=&#123;</span><br><span class="line">  <span class="string">&#x27;login&#x27;</span>:(context) =&gt; <span class="keyword">const</span> Login(),</span><br><span class="line">  <span class="string">&quot;catalog&quot;</span>:(context) =&gt; <span class="keyword">const</span> Catalog(),</span><br><span class="line">  <span class="string">&quot;cart&quot;</span>:(context) =&gt; <span class="keyword">const</span> Cart(),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><p>建立数据模型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsModel</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span></span>&#123;<span class="comment">//共享数据的数据模型</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _itemNames = [<span class="comment">//模拟数据，商品名称</span></span><br><span class="line">    <span class="string">&#x27;Code Smell&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Control Flow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Interpreter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Recursion&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sprint&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Heisenbug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spaghetti&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Hydra Code&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Off-By-One&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Scope&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Callback&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Closure&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Automata&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bit Shift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Currying&#x27;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt; _isSelected=<span class="built_in">List</span>.generate(<span class="number">15</span>, (index) =&gt; <span class="keyword">false</span>);<span class="comment">//都设置为未加入购物车</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _selectedItems=[];<span class="comment">//已选中的商品名称</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> itemNames=&gt;_itemNames;<span class="comment">//暴露以上私有成员变量</span></span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> selectedItems=&gt;_selectedItems;</span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> isSelected=&gt;_isSelected;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> selectItem(<span class="built_in">int</span> id)&#123;<span class="comment">//加入购物车</span></span><br><span class="line">    _selectedItems.add(_itemNames[id]);</span><br><span class="line">    _isSelected[id]=<span class="keyword">true</span>;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> unselectItem(<span class="built_in">int</span> id)&#123;<span class="comment">//移出购物车</span></span><br><span class="line">    _selectedItems.remove(_itemNames[id]);</span><br><span class="line">    _isSelected[id]=<span class="keyword">false</span>;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据模型放置在高级节点上，使其子孙组件都能访问共享数据。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider(<span class="comment">//使用共享数据</span></span><br><span class="line">      create: (context)=&gt;GoodsModel(),</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">&quot;Store&quot;</span>,</span><br><span class="line">        debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">        routes: routes,<span class="comment">//设置路由</span></span><br><span class="line">        initialRoute: <span class="string">&#x27;login&#x27;</span>,<span class="comment">//默认路由，即app首页</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>简单的登录界面实现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Login(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(<span class="comment">//标准结构</span></span><br><span class="line">      body: Center(<span class="comment">//整体居中，当然了，只是它的子组件居中，水平和垂直</span></span><br><span class="line">        child: Container(<span class="comment">//有子组件则匹配子组件的大小，没有子组件则看父级有无传递约束，有约束则都尽可能大，如果这个约束是无限，那就尽可能小。自己设定的宽高会覆盖前面所说的大小。</span></span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">50</span>),<span class="comment">//加个内边距</span></span><br><span class="line">          color: Colors.white70,</span><br><span class="line">          child: Column(<span class="comment">//Column会占满可用空间</span></span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,<span class="comment">//想让登录信息的部分居中就要这样做设置，因为上面的Center只是让Column的父级居中了</span></span><br><span class="line">              children: [</span><br><span class="line">                <span class="keyword">const</span> Text(</span><br><span class="line">                  <span class="string">&#x27;Welcome&#x27;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: Colors.black,</span><br><span class="line">                    fontSize: <span class="number">30</span>,</span><br><span class="line">                    fontWeight: FontWeight.bold,<span class="comment">//标题加粗</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                TextFormField(</span><br><span class="line">                  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                    hintText: <span class="string">&#x27;Username&#x27;</span>,<span class="comment">//设置占位信息</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                TextFormField(</span><br><span class="line">                  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                    hintText: <span class="string">&#x27;Password&#x27;</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  obscureText: <span class="keyword">true</span>,<span class="comment">//模糊文本，也就是隐藏文本信息，密码框嘛</span></span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">const</span> SizedBox(<span class="comment">//占位的空白组件</span></span><br><span class="line">                  height: <span class="number">24</span>,</span><br><span class="line">                ),</span><br><span class="line">                ElevatedButton(<span class="comment">//普通的按钮</span></span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pushNamed(context, <span class="string">&#x27;catalog&#x27;</span>);<span class="comment">//登录跳转</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  style: ButtonStyle(</span><br><span class="line">                    backgroundColor: MaterialStateProperty.all(Colors.black)<span class="comment">//设置背景色</span></span><br><span class="line">                  ),</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&#x27;ENTER&#x27;</span>),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/iVZdZmjK.png" alt="登录界面"></p><h3 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h3><p>商品目录。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Catalog</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Catalog(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; itemNames = context.read&lt;GoodsModel&gt;().itemNames <span class="keyword">as</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;;<span class="comment">//获取共享数据中的商品名称</span></span><br><span class="line">    <span class="comment">//根据商品名称生成每一行的商品信息。包括了商品的图片（这里用随机颜色代替），商品id，商品名称。商品类是自定义的。</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Good&gt; goods=<span class="built_in">List</span>.generate(itemNames.length, (index) =&gt; Good(color: Colors.primaries[index],id: index,name: itemNames[index],));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        backgroundColor: Colors.black,</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Catalog&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">        actions: [IconButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              Navigator.pushNamed(context, <span class="string">&#x27;cart&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            icon: <span class="keyword">const</span> Icon(Icons.shopping_cart)</span><br><span class="line">        )],</span><br><span class="line">      ),</span><br><span class="line">      body: GridView(<span class="comment">//这里之所以使用网格列表，是因为网格列表可以滚动，且设置垂直间距更方便</span></span><br><span class="line">        gridDelegate: <span class="keyword">const</span> SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">          crossAxisCount: <span class="number">1</span>,<span class="comment">//一列</span></span><br><span class="line">          mainAxisSpacing: <span class="number">0</span>,<span class="comment">//每一行之间的距离</span></span><br><span class="line">          mainAxisExtent: <span class="number">80</span><span class="comment">//每一行的高度</span></span><br><span class="line">        ),</span><br><span class="line">        children: goods,<span class="comment">//刚刚生成是商品们</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;<span class="comment">//自定义的商品组件</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;<span class="comment">//商品id</span></span><br><span class="line">  <span class="keyword">final</span> Color color;<span class="comment">//商品图片（颜色替代）</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;<span class="comment">//商品名称</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Good(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.color, <span class="keyword">required</span> <span class="keyword">this</span>.id, <span class="keyword">required</span> <span class="keyword">this</span>.name&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">bool</span> selected=context.watch&lt;GoodsModel&gt;().isSelected[id];<span class="comment">//确认商品是否选中再初始化</span></span><br><span class="line">    <span class="keyword">return</span>  Padding(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16</span>,vertical: <span class="number">8</span>),</span><br><span class="line">      child: Row(<span class="comment">//每个商品就是一行</span></span><br><span class="line">        <span class="comment">// mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span></span><br><span class="line">        children: [<span class="comment">//一行中的所有列</span></span><br><span class="line">          Container(<span class="comment">//颜色块</span></span><br><span class="line">            width: <span class="number">50</span>,</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">            color: color,</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(width: <span class="number">24</span>),<span class="comment">//空白块分隔</span></span><br><span class="line">           Expanded(<span class="comment">//拓展区，自动占满剩余未分配区域</span></span><br><span class="line">            child: Text(name,style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                fontSize: <span class="number">24</span></span><br><span class="line">            ),),</span><br><span class="line">          ),</span><br><span class="line">          TextButton(<span class="comment">//添加购物车按钮</span></span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              <span class="keyword">if</span>(selected==<span class="keyword">true</span>)&#123;<span class="comment">//移出购物车</span></span><br><span class="line">                selected=!selected;</span><br><span class="line">                context.read&lt;GoodsModel&gt;().unselectItem(id);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span>&#123;<span class="comment">//加入购物车</span></span><br><span class="line">                selected=!selected;</span><br><span class="line">                context.read&lt;GoodsModel&gt;().selectItem(id);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: selected</span><br><span class="line">                ?<span class="keyword">const</span> Icon(Icons.check,size: <span class="number">20</span>,)<span class="comment">//已经选中，则变成勾勾图标</span></span><br><span class="line">                :<span class="keyword">const</span> Text(<span class="comment">//未选中，则文字ADD</span></span><br><span class="line">              <span class="string">&quot;ADD&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.black,</span><br><span class="line">                fontSize: <span class="number">20</span></span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(width: <span class="number">24</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/XUcRuMDR.png" alt="商品界面"></p><h3 id="Cart"><a href="#Cart" class="headerlink" title="Cart"></a>Cart</h3><p>购物车。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Cart(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        backgroundColor: Colors.black,</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Cart&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: MyCart(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCart</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCart(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; texts=context.watch&lt;GoodsModel&gt;().selectedItems <span class="keyword">as</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;;<span class="comment">//获取共享数据中已经选择的商品</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Text&gt; goods=<span class="built_in">List</span>.generate(texts.length, (index) =&gt; Text(<span class="comment">//生成购物车清单</span></span><br><span class="line">        texts[index],</span><br><span class="line">      style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">        fontSize: <span class="number">30</span></span><br><span class="line">      ),</span><br><span class="line">    ));</span><br><span class="line">    <span class="built_in">int</span> price=texts.length*<span class="number">42</span>;<span class="comment">//每件商品按42美元计算</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.orange,</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">20</span>,vertical: <span class="number">16</span>),</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            Container(</span><br><span class="line">              height: <span class="number">400</span>,</span><br><span class="line">              child: Row(</span><br><span class="line">                children: [</span><br><span class="line">                  Column(</span><br><span class="line">                    mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">                    crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                    children: goods,</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              height: <span class="number">150</span>,</span><br><span class="line">              decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">                  border: Border.symmetric(horizontal: BorderSide(</span><br><span class="line">                      style: BorderStyle.solid</span><br><span class="line">                  ))</span><br><span class="line">              ),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: [</span><br><span class="line">                  <span class="keyword">const</span> SizedBox(width: <span class="number">40</span>,),</span><br><span class="line">                  <span class="keyword">const</span> Text(<span class="string">&quot;\$&quot;</span>,style: TextStyle(fontSize: <span class="number">50</span>),),</span><br><span class="line">                  Text(<span class="string">&quot;<span class="subst">$price</span>&quot;</span>,style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">50</span>),),</span><br><span class="line">                  <span class="keyword">const</span> SizedBox(width: <span class="number">50</span>,),</span><br><span class="line">                  TextButton(</span><br><span class="line">                    onPressed: ()&#123;&#125;,</span><br><span class="line">                    style: ButtonStyle(</span><br><span class="line">                      backgroundColor:MaterialStateProperty.all(Colors.white),</span><br><span class="line">                      minimumSize: MaterialStateProperty.all(<span class="keyword">const</span> Size(<span class="number">120</span>, <span class="number">50</span>))</span><br><span class="line">                    ),</span><br><span class="line">                    child: <span class="keyword">const</span> Text(<span class="string">&quot;BUY&quot;</span>),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/JQ9DN2GD.png" alt="购物车界面"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>难能可贵的综合运用</li><li>布局的思维模式和熟练度有待提升</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt; 在学习 Provider 的时候，我在 flutter 的官方小教程中，看到了一个 demo，有关购买商品，加入购物车的。刚学习 Provider 的时候，很多地方不明白，所以那个案例也没有能够理解。&lt;/p&gt;
&lt;p&gt;今天的我已经能使用 Navigator 和 Provider 的知识了。利用我已有的知识，可以大概模仿出官方 demo 的样子了。&lt;/p&gt;
&lt;h3 id=&quot;路由分析&quot;&gt;&lt;a href=&quot;#路由分析&quot; class=&quot;headerlink&quot; title=&quot;路由分析&quot;&gt;&lt;/a&gt;路由分析&lt;/h3&gt;&lt;p&gt;这个 demo 涉及到三个页面，第一个是登录界面，第二个是商品界面，第三个是购物车界面。&lt;/p&gt;
&lt;p&gt;分别命名为：Login, Catalog, Cart&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;package:dayly/Login.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;package:dayly/Catalog.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;package:dayly/Cart.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; routes=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;login&amp;#x27;&lt;/span&gt;:(context) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Login(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;catalog&amp;quot;&lt;/span&gt;:(context) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Catalog(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;cart&amp;quot;&lt;/span&gt;:(context) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Cart(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="实践" scheme="https://blog.kahvia.cn/categories/%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-BottomNavigatorBar</title>
    <link href="https://blog.kahvia.cn/2022/09/29/FlutterBottomNavigatorBar.html"/>
    <id>https://blog.kahvia.cn/2022/09/29/FlutterBottomNavigatorBar.html</id>
    <published>2022-09-29T04:51:39.100Z</published>
    <updated>2022-10-24T04:13:33.003Z</updated>
    
    <content type="html"><![CDATA[<p>ottomNavigatorBar 是 Scaffold 组件中的，底部的导航栏。</p><h3 id="BottomNavigatorBar"><a href="#BottomNavigatorBar" class="headerlink" title="BottomNavigatorBar"></a>BottomNavigatorBar</h3><ul><li>items：BottomNavigatorBarItem（）<ul><li>label：标签名称</li><li>icon：图标</li><li>backgroundColor：背景颜色，在 BottomNavigatorBar  的type设置为BottomNavigationBarType.shifting时生效</li></ul></li><li>currentIndex：当前选项卡的索引，当前选项卡会高亮</li><li>backgroundColor：导航栏背景图片</li><li>elevation：阴影</li><li>fixedColor：选中的 item 字体颜色和图标颜色</li><li>onTap：点击选项时触发的函数，需要传入 index （点击选项的索引），（index）{xxx}，用于更新当前索引</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ottomNavigatorBar 是 Scaffold 组件中的，底部的导航栏。&lt;/p&gt;
&lt;h3 id=&quot;BottomNavigatorBar&quot;&gt;&lt;a href=&quot;#BottomNavigatorBar&quot; class=&quot;headerlink&quot; title=&quot;BottomN</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Navigator</title>
    <link href="https://blog.kahvia.cn/2022/09/28/Navigator.html"/>
    <id>https://blog.kahvia.cn/2022/09/28/Navigator.html</id>
    <published>2022-09-28T06:02:17.390Z</published>
    <updated>2022-10-24T04:13:33.071Z</updated>
    
    <content type="html"><![CDATA[<p>Navigator用于管理路由。</p><h3 id="三种路由（省略动态路由）"><a href="#三种路由（省略动态路由）" class="headerlink" title="三种路由（省略动态路由）"></a>三种路由（省略动态路由）</h3><ul><li><p>匿名路由</p><ul><li><pre><code class="dart">Navigator.push(context, MaterialPageRoute(build:(context)=&gt;diyWidget()))<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 命名路由</span><br><span class="line"></span><br><span class="line">  * ``` dart</span><br><span class="line">    Navigator.pushNamed(context, name)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>name 指创建的路由表中的 key，如下所示</p></li><li><pre><code class="dart">var routes=&#123;  &#39;home&#39;:(context)=&gt; const IndexPage(),  &#39;OfficialDemo&#39;:(context)=&gt;const OfficialDemo(),  &#39;Container&#39;:(context)=&gt;const ContainerDemo(),  &#39;ColumnRow&#39;:(context)=&gt;const ColumnAndRow(),  &#39;Flex&#39;:(context)=&gt;const FlexPage(),  &#39;Wrap&#39;:(context)=&gt;const WrapPage(),  &#39;Stack&#39;:(context)=&gt;const StackPage(),  &#39;Card&#39;:(context)=&gt;const CardPage(),  &#39;LayoutTest&#39;:(context)=&gt;const LayoutTest(),  &#39;StatefulWidget&#39;:(context)=&gt;const StatefulWidgetPage(),  &#39;Button&#39;:(context)=&gt;const ButtonPage(),  &#39;SingleChildScrollViewPage&#39;:(context)=&gt;const SingleChildScrollViewPage(),  &#39;ListView&#39;:(context)=&gt;const ListViewPage(),  &#39;GridView&#39;:(context)=&gt;const GridViewPage(),&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 路由传参</span><br><span class="line"></span><br><span class="line">* 匿名路由</span><br><span class="line"></span><br><span class="line">  * 在要跳转的页面对应的组件中，写上对应的属性，标记为 required，在跳转页面的时候，传递有关参数即可。</span><br><span class="line">  * 简单来说，就是靠页面对应组件自身的属性和构造函数来进行路由传参。</span><br><span class="line"></span><br><span class="line">* 命名路由</span><br><span class="line"></span><br><span class="line">  * ```dart</span><br><span class="line">    Navigator.pushNamed(context, name, &#123;arguments&#125;)//携带参数的路由跳转</span><br></pre></td></tr></table></figure></code></pre></li><li><p>arguments 是一个 map 对象，就像上面的路由表一样。</p></li><li><pre><code class="dart">ModalRoute.of(context).settings.arguments;//获取传递过来的arguments</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Navigator用于管理路由。&lt;/p&gt;
&lt;h3 id=&quot;三种路由（省略动态路由）&quot;&gt;&lt;a href=&quot;#三种路由（省略动态路由）&quot; class=&quot;headerlink&quot; title=&quot;三种路由（省略动态路由）&quot;&gt;&lt;/a&gt;三种路由（省略动态路由）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-InheritedWidget</title>
    <link href="https://blog.kahvia.cn/2022/09/26/InheritedWidget.html"/>
    <id>https://blog.kahvia.cn/2022/09/26/InheritedWidget.html</id>
    <published>2022-09-26T13:58:19.394Z</published>
    <updated>2022-10-24T04:13:33.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h3><ul><li>flutter中用于数据共享的组件。</li><li>创建自定义类，继承 InheritedWidget ，用这个自定义类的组件实例包裹子组件，使得子组件及其后代都可以访问自定义类实例中的共享数据。</li></ul><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><p>使用 inh 简写快速生成自定义类并继承数据共享组件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingData</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name; <span class="comment">//自定义共享数据，需要final前缀</span></span><br><span class="line">  <span class="keyword">const</span> WaitingData(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> WaitingData of(BuildContext context) &#123;<span class="comment">//静态方法，简化了获取共享数据的方式。不用这种就用下面这行复杂方式</span></span><br><span class="line">    <span class="keyword">final</span> WaitingData? result = context.dependOnInheritedWidgetOfExactType&lt;WaitingData&gt;();</span><br><span class="line">    <span class="keyword">assert</span>(result != <span class="keyword">null</span>, <span class="string">&#x27;No WaitingData found in context&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(WaitingData old) &#123;<span class="comment">//指明什么时候重新渲染组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//true则当数据改变的时候，每次都重新渲染。可以写箭头函数来指明条件。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="自定义类实例的使用"><a href="#自定义类实例的使用" class="headerlink" title="自定义类实例的使用"></a>自定义类实例的使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyPage&gt; createState() =&gt; _MyPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyPage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  WaitingData(</span><br><span class="line">        name: <span class="string">&quot;Kahvia!&quot;</span>,</span><br><span class="line">        child: Builder(<span class="comment">//用Builder才能获取到上下文</span></span><br><span class="line">            builder: (BuildContext centerContext)&#123;<span class="comment">//这个上下文的内容包括Builder（）外面的东西，即包含了name</span></span><br><span class="line">              <span class="keyword">return</span> Center(</span><br><span class="line">                child: Text(</span><br><span class="line">                    <span class="string">&quot;Hello,<span class="subst">$&#123;WaitingData.of(centerContext).name&#125;</span>&quot;</span>,<span class="comment">//如果用的的context，那context上下文中则没有name，会报错</span></span><br><span class="line">                    style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                      fontSize: <span class="number">25</span>,</span><br><span class="line">                      color: Colors.blue</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>明确上下文（context），想要获取共享数据，就需要使用<font color=#66AFE)><strong>共享数据组件的子组件的上下文</strong></font></li><li>获取上下文可以用Builder（）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;InheritedWidget&quot;&gt;&lt;a href=&quot;#InheritedWidget&quot; class=&quot;headerlink&quot; title=&quot;InheritedWidget&quot;&gt;&lt;/a&gt;InheritedWidget&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;flutter中用于数据共享的组件。&lt;/li&gt;
&lt;li&gt;创建自定义类，继承 InheritedWidget ，用这个自定义类的组件实例包裹子组件，使得子组件及其后代都可以访问自定义类实例中的共享数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自定义类&quot;&gt;&lt;a href=&quot;#自定义类&quot; class=&quot;headerlink&quot; title=&quot;自定义类&quot;&gt;&lt;/a&gt;自定义类&lt;/h3&gt;&lt;p&gt;使用 inh 简写快速生成自定义类并继承数据共享组件。&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WaitingData&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InheritedWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; name; &lt;span class=&quot;comment&quot;&gt;//自定义共享数据，需要final前缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; WaitingData(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key? key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt; Widget child,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(key: key, child: child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; WaitingData of(BuildContext context) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//静态方法，简化了获取共享数据的方式。不用这种就用下面这行复杂方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WaitingData? result = context.dependOnInheritedWidgetOfExactType&amp;lt;WaitingData&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt;(result != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;No WaitingData found in context&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result!;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; updateShouldNotify(WaitingData old) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//指明什么时候重新渲染组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//true则当数据改变的时候，每次都重新渲染。可以写箭头函数来指明条件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Provider</title>
    <link href="https://blog.kahvia.cn/2022/09/26/FlutterProvider.html"/>
    <id>https://blog.kahvia.cn/2022/09/26/FlutterProvider.html</id>
    <published>2022-09-26T13:57:14.479Z</published>
    <updated>2022-10-24T04:13:33.041Z</updated>
    
    <content type="html"><![CDATA[<p>Provider是第三方状态管理的库。就我目前的水平来看，它貌似能代替 StatefulWidget 和 InheritedWidget 。</p><h3 id="安装（带-表示可以自动更新）"><a href="#安装（带-表示可以自动更新）" class="headerlink" title="安装（带^表示可以自动更新）"></a>安装（带^表示可以自动更新）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">^6.0.3</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建数据模型（自定义类），继承 ChangeNotifier ，暴露想要共享的数据, 以及创建可选的修改数据的方法。</p></li><li><p>创建观察者，或者说数据模型的提供者——Provider。</p><ul><li>通过Provider（）提供的数据通常是不可变的。</li><li>通过ChangeNotifierProvider（）提供的数据可以改变，并可以通过调用notifyListeners（）来更新使用到共享数据的组件。<ul><li>和 InheritedWidget 类似，包裹需要使用共享数据的子孙组件。包裹一次，子孙组件都可以作为监听者（listener）使用数据。</li><li>为 create 属性提供构造器，需要传入上下文context</li><li>child 子组件，也就是包裹的子孙组件</li></ul></li></ul></li><li><p>作为 Listener 使用共享数据。因为时常需要响应数据的变化，所以叫监听者。</p><ul><li><p>context.watch &lt; Type &gt;( ).atributeName，通过上下文的注入方法（由provider自动注入，也就是附加方法）来获取数据。</p></li><li><p>Provider.Of&lt; Type &gt;(context).atributeName, 通过Provider的静态方法来获取数据。</p></li><li><p>查看源码发现，第一种方法就是封装后的第二种方法</p></li><li><p>&#96;&#96;&#96;dart<br>T watch<T>() {<br>  return Provider.of<T>(this);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">### 代码区</span><br><span class="line"></span><br><span class="line">#### 数据模型</span><br><span class="line"></span><br><span class="line">```dart</span><br><span class="line">class LikeData extends ChangeNotifier&#123;</span><br><span class="line">  int _number=520;</span><br><span class="line">  bool _liking=true;</span><br><span class="line"></span><br><span class="line">  int get number =&gt; _number;//暴露私有变量，让外部访问。</span><br><span class="line">  bool get liking =&gt; _liking;</span><br><span class="line"></span><br><span class="line">  void changeLikeState()&#123;//改变收藏状态的函数</span><br><span class="line">    if(_liking==true)&#123;</span><br><span class="line">      _liking=false;</span><br><span class="line">      _number--;</span><br><span class="line">      notifyListeners();//数据改变了，通知数据监听者（provider）去改变值</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      _liking=true;</span><br><span class="line">      _number++;</span><br><span class="line">      notifyListeners();//数据改变了，通知数据监听者（provider）去改变值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Home(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider(<span class="comment">//包裹需要数据的子孙组件</span></span><br><span class="line">      create: (BuildContext context)=&gt;LikeData(),<span class="comment">//构造器构造数据模型</span></span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Provider&#x27;</span>),</span><br><span class="line">          leading: <span class="keyword">const</span> Icon(Icons.menu),</span><br><span class="line">          actions: <span class="keyword">const</span>[Icon(Icons.settings)],</span><br><span class="line">        ),</span><br><span class="line">        body:  MyPage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听者（使用到共享数据的那一部分）"><a href="#监听者（使用到共享数据的那一部分）" class="headerlink" title="监听者（使用到共享数据的那一部分）"></a>监听者（使用到共享数据的那一部分）</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Widget titleSection = Builder(</span><br><span class="line">    builder: (BuildContext context)=&gt;Container(<span class="comment">//自定义组件，标题部分，即头部部分</span></span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">32</span>),</span><br><span class="line">      child: Row(<span class="comment">//一行</span></span><br><span class="line">        children: [<span class="comment">//三列</span></span><br><span class="line">          Expanded(<span class="comment">//第一列，标题和副标题</span></span><br><span class="line">            child: Column(<span class="comment">//第一列有两行</span></span><br><span class="line">              crossAxisAlignment: CrossAxisAlignment.start,<span class="comment">//交叉轴方向，此处即水平方向对齐方式，在起点处对齐，即左对齐</span></span><br><span class="line">              children: [</span><br><span class="line">                <span class="keyword">const</span> Text(<span class="comment">//第一行</span></span><br><span class="line">                  <span class="string">&quot;Hello,this is Alice!&quot;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    fontWeight: FontWeight.bold,<span class="comment">//加粗，表明主体</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Text(<span class="comment">//第二行</span></span><br><span class="line">                  <span class="string">&quot;Good evening!&quot;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: Colors.grey[<span class="number">500</span>],<span class="comment">//灰色</span></span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">           IconButton(<span class="comment">//第二列，收藏图标</span></span><br><span class="line">             icon: Icon(context.watch&lt;LikeData&gt;().liking?Icons.star:Icons.star_border),<span class="comment">//获取共享数据的第一种方法</span></span><br><span class="line">             color: Colors.red,</span><br><span class="line">             onPressed: context.watch&lt;LikeData&gt;().changeLikeState,</span><br><span class="line">          ),</span><br><span class="line">           Text(<span class="comment">//第三列，收藏数</span></span><br><span class="line">            <span class="string">&quot;<span class="subst">$&#123;Provider.of&lt;LikeData&gt;(context).number&#125;</span>&quot;</span>,<span class="comment">//获取共享数据的第二种方法</span></span><br><span class="line">            <span class="comment">//   &quot;520&quot;</span></span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>代码实现的功能和之前测试的“有状态组件”一样，都是实现收藏功能和它的收藏数变化。</p><p>不同的地方是，使用provider后，没有使用状态组件进行状态管理。但是很显然，这种共享数据的模式在多重嵌套组件下，可以更好的实现状态管理，而不用通过构造函数传递所需数据，也不需要通过手动调用 setState（）进行组件的重新渲染。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Provider是第三方状态管理的库。就我目前的水平来看，它貌似能代替 StatefulWidget 和 InheritedWidget 。&lt;/p&gt;
&lt;h3 id=&quot;安装（带-表示可以自动更新）&quot;&gt;&lt;a href=&quot;#安装（带-表示可以自动更新）&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="知识" scheme="https://blog.kahvia.cn/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Flutter" scheme="https://blog.kahvia.cn/tags/Flutter/"/>
    
  </entry>
  
</feed>
