<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter-Slidable</title>
      <link href="/2022/10/23/FlutterSlidable.html"/>
      <url>/2022/10/23/FlutterSlidable.html</url>
      
        <content type="html"><![CDATA[<h3 id="Slidable"><a href="#Slidable" class="headerlink" title="Slidable"></a>Slidable</h3><p>滑动选项卡组件。</p><h3 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter_slidable: ^<span class="number">2.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Slidable(<span class="comment">//可滑动的组件</span></span><br><span class="line">  <span class="comment">//end代表从右边往左边滑动</span></span><br><span class="line">  endActionPane: ActionPane(<span class="comment">//滑动选项面板</span></span><br><span class="line">    motion: <span class="keyword">const</span> StretchMotion(),<span class="comment">//滑动动画</span></span><br><span class="line">    children: [</span><br><span class="line">      <span class="comment">//SlidableAction是单个滑动选项</span></span><br><span class="line">      SlidableAction(</span><br><span class="line">        onPressed: onDelete,<span class="comment">//触发删除的函数</span></span><br><span class="line">        icon: Icons.delete,<span class="comment">//图标</span></span><br><span class="line">        backgroundColor: Colors.redAccent,<span class="comment">//背景色</span></span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">12</span>),<span class="comment">//圆角</span></span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">  child: Container(</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">24</span>),</span><br><span class="line">    <span class="comment">// height: 60,</span></span><br><span class="line">    decoration:  BoxDecoration(</span><br><span class="line">        color: Colors.orange,</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">12</span>)</span><br><span class="line">    ),</span><br><span class="line">    child: Row(</span><br><span class="line">      children: [</span><br><span class="line">        Checkbox(</span><br><span class="line">          value: finished,</span><br><span class="line">          onChanged: onChanged,</span><br><span class="line">          activeColor: Colors.black,</span><br><span class="line">        ),</span><br><span class="line">        Text(</span><br><span class="line">          taskName,</span><br><span class="line">          style: TextStyle(decoration: finished?TextDecoration.lineThrough:TextDecoration.none),</span><br><span class="line">          overflow: TextOverflow.ellipsis,</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://pics-1312295925.cos.ap-chengdu.myqcloud.com/img/Screenshot_20221023_180755.png" alt="Screenshot_20221023_180755"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-CircularProgressIndicator</title>
      <link href="/2022/10/20/FlutterCircularProgressIndicator.html"/>
      <url>/2022/10/20/FlutterCircularProgressIndicator.html</url>
      
        <content type="html"><![CDATA[<h3 id="CircularProgressIndicator"><a href="#CircularProgressIndicator" class="headerlink" title="CircularProgressIndicator"></a>CircularProgressIndicator</h3><p>圆形的进度指示。可以用于等待加载的时候。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>常配合 showDialog( ) 使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">showDialog(</span><br><span class="line">    context: context,</span><br><span class="line">    builder: (context)&#123;</span><br><span class="line">      <span class="keyword">return</span> Center(</span><br><span class="line">        child: CircularProgressIndicator(color: MyColors.rgbRed,),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>用完以后用 Navigator 回退页面就行了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();<span class="comment">//这样</span></span><br><span class="line">Navigator.pop(context);<span class="comment">//或这样</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-ImagePicker-ImageCropper</title>
      <link href="/2022/10/20/FlutterImagePickerAndCropper.html"/>
      <url>/2022/10/20/FlutterImagePickerAndCropper.html</url>
      
        <content type="html"><![CDATA[<h3 id="ImagePicker"><a href="#ImagePicker" class="headerlink" title="ImagePicker"></a>ImagePicker</h3><p>Flutter用于选择图片的工具包。</p><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image_picker:</span> <span class="string">^0.8.6</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ImagePicker _picker=ImagePicker();<span class="comment">//创建选择器实例</span></span><br><span class="line">onPressed: ()<span class="keyword">async</span>&#123;</span><br><span class="line">        <span class="comment">//从相册选择图片</span></span><br><span class="line">        <span class="keyword">final</span> image=<span class="keyword">await</span> _picker.pickImage(source: ImageSource.gallery);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="ImageCropper"><a href="#ImageCropper" class="headerlink" title="ImageCropper"></a>ImageCropper</h3><p>用于图片裁剪的工具包</p><h4 id="依赖引入-1"><a href="#依赖引入-1" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image_cropper:</span> <span class="string">^3.0.0</span></span><br></pre></td></tr></table></figure><h4 id="相关配置-安卓需要配置，ios不需要"><a href="#相关配置-安卓需要配置，ios不需要" class="headerlink" title="相关配置(安卓需要配置，ios不需要)"></a>相关配置(安卓需要配置，ios不需要)</h4><p>在AndroidManifest.xml加入以下信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.yalantis.ucrop.UCropActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">&quot;portrait&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CroppedFile? croppedImage=<span class="keyword">await</span> ImageCropper().cropImage(sourcePath: image.path);<span class="comment">//创建裁剪器给定图片源进行裁剪</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">//创建图片选择器实例</span></span><br><span class="line">  <span class="keyword">final</span> ImagePicker _picker=ImagePicker();</span><br><span class="line">  <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">    <span class="comment">//单击按钮触发选择</span></span><br><span class="line">    onPressed: ()<span class="keyword">async</span>&#123;</span><br><span class="line">      <span class="comment">//从相册选择图片</span></span><br><span class="line">      <span class="keyword">final</span> image=<span class="keyword">await</span> _picker.pickImage(source: ImageSource.gallery); <span class="comment">//返回的是XFile对象</span></span><br><span class="line">      <span class="comment">//选择了图片则创建裁剪器实例进入裁剪环节</span></span><br><span class="line">      <span class="keyword">if</span>(image!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        CroppedFile? croppedImage=<span class="keyword">await</span> ImageCropper().cropImage(sourcePath: image.path);<span class="comment">//根据XFile对象的路径获得图片进行裁剪</span></span><br><span class="line">        <span class="comment">//裁剪了则把裁剪后的图片设置为预览的文件源</span></span><br><span class="line">        <span class="keyword">if</span>(croppedImage!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          context.read&lt;ImageData&gt;().setImage(File(croppedImage.path));<span class="comment">//CroppedFile转File，上传图片的时候根据File转MultipartFile即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未裁剪则设置裁剪之前选择的图片作为预览的文件源</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          context.read&lt;ImageData&gt;().setImage(File(image.path));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    style: ButtonStyle(</span><br><span class="line">        shape: MaterialStateProperty.all(<span class="keyword">const</span> RoundedRectangleBorder(</span><br><span class="line">            borderRadius: BorderRadius.all(Radius.circular(<span class="number">30</span>))</span><br><span class="line">        )),</span><br><span class="line">        <span class="comment">//设置按钮宽度高度等</span></span><br><span class="line">        minimumSize: MaterialStateProperty.all(<span class="keyword">const</span> Size(<span class="number">300</span>, <span class="number">40</span>)),</span><br><span class="line">        backgroundColor: MaterialStateProperty.all(MyColors.rgbRed)</span><br><span class="line">    ),</span><br><span class="line">    child: <span class="keyword">const</span> Text(<span class="string">&quot;Select a photo from gallery&quot;</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片选择或裁剪完毕后，单击完成上传</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinishedButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> FinishedButton(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//创建dio实例，用于发送http请求</span></span><br><span class="line">    <span class="keyword">final</span> dio=Dio();</span><br><span class="line">    <span class="comment">//获取已经准备好的图片文件源</span></span><br><span class="line">    File? image=context.watch&lt;ImageData&gt;().image;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: image==null?<span class="comment">//没有文件源代表没有选图片，不进行上传操作</span></span><br><span class="line">      ()&#123;&#125;:<span class="comment">//有文件源就进入上传阶段</span></span><br><span class="line">      ()<span class="keyword">async</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> multipartImg=<span class="keyword">await</span> MultipartFile.fromFile(image.path);<span class="comment">//根据文件源生成媒体图片</span></span><br><span class="line">        <span class="keyword">final</span> map=&lt;<span class="built_in">String</span>,<span class="built_in">dynamic</span>&gt;&#123;&#125;;<span class="comment">//创建map存储图片</span></span><br><span class="line">        map[<span class="string">&#x27;file&#x27;</span>]=<span class="keyword">await</span> MultipartFile.fromFile(image.path);</span><br><span class="line">        <span class="comment">//将map转为表单数据后，发送post请求，上传服务器，并接收返回的数据</span></span><br><span class="line">        <span class="keyword">var</span> response=<span class="keyword">await</span> dio.post(<span class="string">&quot;<span class="subst">$serviceUploadHeader</span>/<span class="subst">$&#123;context.read&lt;UserMsg&gt;().userId&#125;</span>&quot;</span>,data: FormData.fromMap(map));</span><br><span class="line">        context.read&lt;UserMsg&gt;().setHeadImg(response.data);<span class="comment">//及时更新头像的链接</span></span><br><span class="line">        Navigator.pop(context);<span class="comment">//上传完毕即退回首页</span></span><br><span class="line">      &#125;,</span><br><span class="line">      style: ButtonStyle(</span><br><span class="line">          backgroundColor: image==null?</span><br><span class="line">          MaterialStateProperty.all(Colors.grey):</span><br><span class="line">          MaterialStateProperty.all(MyColors.rgbRed)</span><br><span class="line">      ),</span><br><span class="line">      child:  <span class="keyword">const</span> Text(<span class="string">&quot;Finished&quot;</span>,),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService-Nacos</title>
      <link href="/2022/10/16/MicroserviceNacos.html"/>
      <url>/2022/10/16/MicroserviceNacos.html</url>
      
        <content type="html"><![CDATA[<h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p>用于替代已经停止维护的 Eureka 。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>在<a href="https://github.com/alibaba/nacos">AlibabaNacos</a>的里程碑中选择版本进行下载。</p><p>下载解压后，在 bin 目录下打开终端，输入指令启动。Windows 运行cmd文件，Linux运行sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>默认服务端口为8848，可在 conf 目录下配置文件 application.properties 中更改。</p><span id="more"></span><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在父工程的pom文件中添加依赖管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            包含nacos的项目依赖管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程（各微服务对应的spring boot项目）pom文件中添加 nacos 依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子工程配置文件yml中配置服务端地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">39940</span></span><br></pre></td></tr></table></figure><h3 id="服务多级存储模型"><a href="#服务多级存储模型" class="headerlink" title="服务多级存储模型"></a>服务多级存储模型</h3><p>微服务分集群部署。分集群部署，服务不容易同时挂掉。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://www.kahvia.cn:3306/Blogs?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Mysql3306@.com</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span> </span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span> <span class="comment">#集群名称，常按地名划分，YC为宜昌</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">39940</span></span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>局部策略（在某个微服务中调用指定微服务的负载均衡策略）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UserService:</span> <span class="comment">#为某个微服务配置负载均衡的规则</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#该策略优先远程调用同集群的微服务，同集群挂掉会访问其它集群</span></span><br></pre></td></tr></table></figure><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>在nacos管理页面中，可以为同一微服务同一集群的不同实例设置权重。权重越大，负载均衡选中的几率越大。</p><p>可以通过将权重置零来进行服务的升级，升级完成后设置较小权重进行服务测试。</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>不同环境（不同命名空间）的服务无法互相调用。可用于开发环境与上线后的环境隔离，大概？</p><p>在nacos管理页面中，可新建命名空间，获取它的id后，在需要配置环境隔离的服务项目的 application.yml 中，如下配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">AchatWs</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos服务端地址</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span> <span class="comment">#集群模拟，宜昌</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">id</span> <span class="comment">#命名空间的id</span></span><br></pre></td></tr></table></figure><h3 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h3><p>客户端引入nacos配置管理的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要进行配置管理的项目新建 bootstrap.yml 文件，在其中写入与nacos有关的属性，如开发环境、服务端地址、微服务名称等。这些信息在 application.yml 中就可以不写了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bootstrap.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">UserService</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">YC</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#要获取的配置文件后缀名</span></span><br></pre></td></tr></table></figure><p>项目启动的时候，会优先读取 bootstrap.yml 中的配置信息，再根据其中的信息去nacos服务端获取nacos管理的配置，将这个获取到的配置与之后读取的 application.yml 作合并，最后才完整地启动项目。</p><p>nacos服务端新建配置，ID由“服务名-环境.后缀”组成最好。</p><p><img src="https://img1.imgtp.com/2022/10/16/wDZtkR8c.png" alt="自定义配置"></p><h3 id="Nacos配置管理的热更新"><a href="#Nacos配置管理的热更新" class="headerlink" title="Nacos配置管理的热更新"></a>Nacos配置管理的热更新</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>哪里使用就为那里的类添加热更新注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//加这个注解才能实现配置的热更新</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String format;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/time&quot;)</span></span><br><span class="line">    String <span class="title function_">getTime</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(format));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方对@RefreshScope的解释是</p><blockquote><p>Convenience annotation to put a @Bean definition in refresh scope. Beans annotated this way can be refreshed at runtime and any components that are using them will get a new instance on the next method call, fully initialized and injected with all dependencies.</p></blockquote><h4 id="方式二-推荐"><a href="#方式二-推荐" class="headerlink" title="方式二(推荐)"></a>方式二(推荐)</h4><p>自定义配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.userservice.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><span class="comment">//prefix是前缀的意思，前缀和属性名拼接之后的属性若是在配置文件中，就可以实现自动注入</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesFromNacos</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;<span class="comment">//属性名。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDateformat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dateformat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDateformat</span><span class="params">(String dateformat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dateformat = dateformat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ConfigurationProperties(prefix &#x3D; “xxx”)源码注释</p><blockquote><p>The prefix of the properties that are valid to bind to this object. Synonym for prefix(). A valid prefix is defined by one or more words separated with dots (e.g. “acme.system.feature”).<br>Returns: the prefix of the properties to bind</p></blockquote><p>使用该注释，需要引入依赖</p><blockquote><p>You can easily generate your own configuration metadata file from items annotated with <code>@ConfigurationProperties</code> by using the <code>spring-boot-configuration-processor</code> jar. The jar includes a Java annotation processor which is invoked as your project is compiled.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多环境共享配置"><a href="#多环境共享配置" class="headerlink" title="多环境共享配置"></a>多环境共享配置</h3><p>在nacos管理页面创建配置文件的名字，只需要用服务的名字就可以了。比如，UserService,而不是UserService-dev.</p><p>项目启动时，会同时从nacos读取上述两种配置，后者的优先级大于前者，前者大于本地。同名属性则覆盖。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MicroService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot项目打 jar 包没有webapp中的静态资源</title>
      <link href="/2022/10/07/SpringbootWithoutWebapp.html"/>
      <url>/2022/10/07/SpringbootWithoutWebapp.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题发生场景"><a href="#问题发生场景" class="headerlink" title="问题发生场景"></a>问题发生场景</h3><p>以下场景都建立在 maven 打 jar 包的基础上。</p><p>昨日我如往常一样，在springboot项目中新建 webapp 文件夹，然后在里面放俩空文件夹，作为项目里文件上传中转的地方。然后发现打包后程序运行时并不能找到webapp文件夹中的静态资源。查看编译后产生的 target 目录发现，webapp并没有被编译。如下图所示。</p><p><img src="https://img1.imgtp.com/2022/10/09/KyQk4s01.png" alt="webapp未编译"></p><p>而平时开发，直接通过 idea 运行的时候，却会编译 webapp 下的资源文件到 classes 目录下。如下图所示。</p><p><img src="https://img1.imgtp.com/2022/10/09/0NJ4MtZB.png" alt="idea直接运行"></p><span id="more"></span><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果跟我一样不愿意放弃 webapp 的使用，那么想要解决这个问题，就需要手动指定项目构建时的资源路径。</p><p>在 pom.xml 文件的 build 标签中，添加以下代码，手动指定资源路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：这样只指定webapp的路径的话，resource 中的 static 和 template 就不会被编译了。要是都想要的话，就得都手动指定。</p><p>也就是说，springboot 使用 maven编译时，默认只寻找 resources 中的静态资源，而忽略 webapp。</p><h3 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h3><p>自问：为什么我以前学习 spring mvc 的时候，用 webapp 文件夹存放静态资源没有任何问题呢？</p><p>自答：非要说 springboot 和 spring mvc 直观上有哪里不太一样的话，那就是打包方式了。以前学习 spring mvc 的时候，都是打 war 包，然后部署到自己的 tomcat 服务器上。静态资源放在 webapp 中，而我似乎也一直是这么用的。但是当我学了spring boot后，项目都是在本地的idea直接运行，并没有正儿八经打包，然后手动部署过。因为 idea 自身会编译 webapp 下的文件，所以一直没有发现过问题。</p><p>所以另一种解决方案就是把 spring boot 打成 war 包。</p><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>究其原因还是项目打成 jar 包和 war 包的区别。这里采用网上的描述。</p><ul><li><p>jar文件包括java普通类、资源文件和普通文件，在maven中即是打包 src&#x2F;main&#x2F;java 和 src&#x2F;main&#x2F;resources 资源文件夹下的所有文件。在打包的时候会自动生成 META-INF 文件夹，用于存储 maven 的 pom 信息和 MANIFEST.MF 文件。（未包含 webapp 文件夹）</p></li><li><p>war文件包含全部的web应用程序，即所有的java类，配置信息和jsp、js等静态资源。（也就是说 webapp 文件夹也包含了）</p></li></ul><p>或许这就是为什么学习 spring mvc 的时候我还在前后端一体， 而学习 spring boot 后却下意识的用起了前后端分离吧。码农的直觉？</p>]]></content>
      
      
      <categories>
          
          <category> 小问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroService-Eureka</title>
      <link href="/2022/10/05/MicroserviceEureka.html"/>
      <url>/2022/10/05/MicroserviceEureka.html</url>
      
        <content type="html"><![CDATA[<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>微服务的注册中心。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>1.添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.应用启动入口标注@EnableEurekaServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在 application.yml 中配置相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaServer</span> <span class="comment"># 应用自己的名称，会在eureka中注册后显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost/eureka</span> <span class="comment"># eureka的服务端地址</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1.添加依赖(若是依赖管理中没有客户端的版本，则需要像下面这样手动添加，版本最好跟服务端保持一致)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在 application.yml 中配置相关信息</p><p>修改端口和应用名称，eureka的服务端地址保持不变。</p><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><p>服务的远程调用包含两个客户端：调用服务的是消费者，被调用服务的是提供者。一个客户端可用同时是消费者和提供者。</p><p>远程调用服务可使用 RestTemplate 类的实例的 getObject 方法。</p><p>比如，我写一个工具类。将构建 RestTemplate 实体的工厂函数注册为 bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在有需要的地方自动装配一个 RestTemplate 对象，调用它的各种请求方法就行了。post示例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.controller;</span><br><span class="line"><span class="keyword">import</span> cn.kahvia.imageservice.pojo.UploadResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/image&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadImg</span><span class="params">(MultipartFile file, HttpServletRequest request)</span>&#123;</span><br><span class="line">        String path=request.getServletContext().getRealPath(<span class="string">&quot;&quot;</span>);<span class="comment">//获取当前servlet上下文的绝对路径</span></span><br><span class="line"></span><br><span class="line">        File temp=<span class="keyword">new</span> <span class="title class_">File</span>(path,file.getOriginalFilename());<span class="comment">//在这个路径下新建一个临时文件temp</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//接受用户上传的文件，往temp中输出</span></span><br><span class="line">            InputStream inputStream=file.getInputStream();</span><br><span class="line">            FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(temp);</span><br><span class="line">            BufferedOutputStream bufferedOutputStream=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream);</span><br><span class="line">            <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span> b[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//1024个字节，也就1024byte，即1kb</span></span><br><span class="line">            <span class="keyword">while</span> ((n=inputStream.read(b))!=-<span class="number">1</span>)<span class="comment">//read(b)，是说从输入流中读取“b的大小”这么多的数据到b中，并返回读取的字节个数，-1代表读取完了</span></span><br><span class="line">            &#123;</span><br><span class="line">                bufferedOutputStream.write(b);<span class="comment">//把读取到的的，存放在b中的数据写入到输出流指向的文件中</span></span><br><span class="line">            &#125;</span><br><span class="line">            bufferedOutputStream.flush();<span class="comment">//刷新缓存区，刷新后，缓冲输出流指向的底层输入流，即fileOutputStream会立即将缓存的内容写入目的地</span></span><br><span class="line">            bufferedOutputStream.close();<span class="comment">//先关闭上层输出流</span></span><br><span class="line">            inputStream.close();<span class="comment">//再关闭底层输出流。按理说关了上层，底层也会自动关。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个空的map，用来存储请求第三方接口所需的数据</span></span><br><span class="line">        MultiValueMap&lt;String,Object&gt; map= <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//利用刚刚生成的临时文件，创建文件系统资源</span></span><br><span class="line">        FileSystemResource fileSystemResource=<span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(temp);</span><br><span class="line">        <span class="comment">//添加到数据map中，第三方所需的参数名为image</span></span><br><span class="line">        map.add(<span class="string">&quot;image&quot;</span>,fileSystemResource);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求头，包括访问的浏览器，和请求体内容固定类型，传输文件要选择表单数据&quot;multipart/form-data&quot;</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        headers.add(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>);</span><br><span class="line">        headers.add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成http请求</span></span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; entity=<span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;( map,headers);</span><br><span class="line">        <span class="comment">//发送http请求，返回目标对象。返回的json数据会自动封装为目标对象。</span></span><br><span class="line">        UploadResult uploadResult= restTemplate.postForObject(<span class="string">&quot;https://xxxxxx/api/upload&quot;</span>,entity,UploadResult.class);</span><br><span class="line">        temp.delete();<span class="comment">//删除中转文件</span></span><br><span class="line">        System.out.println(uploadResult.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>为 RestTemplate 的工厂函数添加 @LoadBalanced注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.kahvia.imageservice.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：远程调用其它服务端的接口时，发出的请求会被拦截，然后根据请求的地址获取主机名（如果是eureka服务获取到的就是服务名），获取到服务名后再去eureka注册中心中取得对应服务名的所有服务端地址，根据负载均衡轮询或者随机的规则选取一个合适的地址，替换请求的地址中的服务名后，再放行，从而实现负载均衡。</p><h3 id="负载均衡的策略"><a href="#负载均衡的策略" class="headerlink" title="负载均衡的策略"></a>负载均衡的策略</h3><ul><li>RoundRobinRule：简单的轮询。Ribbon默认策略。</li><li>ZoneAvoidanceRule：以区域为基础，进行服务器的选择。使用Zone进行分类。</li><li>RandomRule：随机。</li><li>RetryRule：重连。</li><li>AvailabilityFilteringRule，BestAvailableRule，WeightedResponseTimeRule等</li></ul><p>全局策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局配置，对所有微服务有效</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateUtil</span> &#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//使用负载均衡</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IRule <span class="title function_">setBalanceRule</span><span class="params">()</span>&#123;<span class="comment">//设置策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BestAvailableRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部策略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UserService:</span> <span class="comment">#为某个微服务配置负载均衡的规则</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><h3 id="Ribbon修改饥饿加载"><a href="#Ribbon修改饥饿加载" class="headerlink" title="Ribbon修改饥饿加载"></a>Ribbon修改饥饿加载</h3><p>Ribbon默认是懒加载，也就是说，Ribbon提供的负载均衡的服务 LoadBalancerClient 并不会随着服务端启动而启动。第一次请求远程调用时，会初始化负载均衡服务，所以第一次会比较慢。</p><p>如果想要让负载均衡服务随着服务端启动而启动，就需要设置饥饿加载。在 application.yml 文件中配置饥饿加载。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载，减少第一次远程调用的时间</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">UserService</span> <span class="comment">#饥饿加载的名称,多个则换行以-开头分隔</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MicroService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-TextFormField</title>
      <link href="/2022/10/01/FlutterTextFormField.html"/>
      <url>/2022/10/01/FlutterTextFormField.html</url>
      
        <content type="html"><![CDATA[<h3 id="TextFormField"><a href="#TextFormField" class="headerlink" title="TextFormField"></a>TextFormField</h3><ul><li>decoration：使用 InputDecoration 来创建文本框</li><li>controller：指定 TextEditingController 对象，可以通过这个对象来获取文本框的值</li></ul><h4 id="InputDecoration"><a href="#InputDecoration" class="headerlink" title="InputDecoration"></a>InputDecoration</h4><ul><li>focusedBorder：文本框聚焦的时候的边框样式</li><li>disabledBorder：禁止输入时</li><li>enabledBorder：允许选中时</li><li>contentPadding：文本区实际上是由 InputDecoration 创建的，而此处的 padding 就是设置的这个文本区的 padding</li><li>border：设置为 Border.none 可以不渲染边框。但是常常会造成文本框内容不能居中。</li><li>hintText：输入框的提示字段，类似于 html 中的 placeholder</li></ul><p>ps：想要输入框的内容正常的垂直居中，就需要边框，不想要样式的话，可以设置边框为透明色，宽度为0。除此之外，还需要设置 contentPadding 为0才能保证绝对垂直居中。</p><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TextFormField(</span><br><span class="line">  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">    focusedBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    disabledBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    enabledBorder: OutlineInputBorder(</span><br><span class="line">        borderSide: BorderSide(width: <span class="number">0</span>, color: Colors.transparent)),</span><br><span class="line">    contentPadding: EdgeInsets.symmetric(vertical: <span class="number">0</span>),</span><br><span class="line">    hintText: <span class="string">&quot;消息&quot;</span>,</span><br><span class="line">  ),</span><br><span class="line">  controller: textEditingController,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-购物小测试</title>
      <link href="/2022/09/29/FlutterGoodsStoreDemo.html"/>
      <url>/2022/09/29/FlutterGoodsStoreDemo.html</url>
      
        <content type="html"><![CDATA[<p> 在学习 Provider 的时候，我在 flutter 的官方小教程中，看到了一个 demo，有关购买商品，加入购物车的。刚学习 Provider 的时候，很多地方不明白，所以那个案例也没有能够理解。</p><p>今天的我已经能使用 Navigator 和 Provider 的知识了。利用我已有的知识，可以大概模仿出官方 demo 的样子了。</p><h3 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h3><p>这个 demo 涉及到三个页面，第一个是登录界面，第二个是商品界面，第三个是购物车界面。</p><p>分别命名为：Login, Catalog, Cart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Login.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Catalog.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/Cart.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routes=&#123;</span><br><span class="line">  <span class="string">&#x27;login&#x27;</span>:(context) =&gt; <span class="keyword">const</span> Login(),</span><br><span class="line">  <span class="string">&quot;catalog&quot;</span>:(context) =&gt; <span class="keyword">const</span> Catalog(),</span><br><span class="line">  <span class="string">&quot;cart&quot;</span>:(context) =&gt; <span class="keyword">const</span> Cart(),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><p>建立数据模型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsModel</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span></span>&#123;<span class="comment">//共享数据的数据模型</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _itemNames = [<span class="comment">//模拟数据，商品名称</span></span><br><span class="line">    <span class="string">&#x27;Code Smell&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Control Flow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Interpreter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Recursion&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sprint&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Heisenbug&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Spaghetti&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Hydra Code&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Off-By-One&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Scope&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Callback&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Closure&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Automata&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bit Shift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Currying&#x27;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">bool</span>&gt; _isSelected=<span class="built_in">List</span>.generate(<span class="number">15</span>, (index) =&gt; <span class="keyword">false</span>);<span class="comment">//都设置为未加入购物车</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _selectedItems=[];<span class="comment">//已选中的商品名称</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> itemNames=&gt;_itemNames;<span class="comment">//暴露以上私有成员变量</span></span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> selectedItems=&gt;_selectedItems;</span><br><span class="line">  <span class="built_in">List</span> <span class="keyword">get</span> isSelected=&gt;_isSelected;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> selectItem(<span class="built_in">int</span> id)&#123;<span class="comment">//加入购物车</span></span><br><span class="line">    _selectedItems.add(_itemNames[id]);</span><br><span class="line">    _isSelected[id]=<span class="keyword">true</span>;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> unselectItem(<span class="built_in">int</span> id)&#123;<span class="comment">//移出购物车</span></span><br><span class="line">    _selectedItems.remove(_itemNames[id]);</span><br><span class="line">    _isSelected[id]=<span class="keyword">false</span>;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据模型放置在高级节点上，使其子孙组件都能访问共享数据。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider(<span class="comment">//使用共享数据</span></span><br><span class="line">      create: (context)=&gt;GoodsModel(),</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">&quot;Store&quot;</span>,</span><br><span class="line">        debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">        routes: routes,<span class="comment">//设置路由</span></span><br><span class="line">        initialRoute: <span class="string">&#x27;login&#x27;</span>,<span class="comment">//默认路由，即app首页</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>简单的登录界面实现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Login(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(<span class="comment">//标准结构</span></span><br><span class="line">      body: Center(<span class="comment">//整体居中，当然了，只是它的子组件居中，水平和垂直</span></span><br><span class="line">        child: Container(<span class="comment">//有子组件则匹配子组件的大小，没有子组件则看父级有无传递约束，有约束则都尽可能大，如果这个约束是无限，那就尽可能小。自己设定的宽高会覆盖前面所说的大小。</span></span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">50</span>),<span class="comment">//加个内边距</span></span><br><span class="line">          color: Colors.white70,</span><br><span class="line">          child: Column(<span class="comment">//Column会占满可用空间</span></span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,<span class="comment">//想让登录信息的部分居中就要这样做设置，因为上面的Center只是让Column的父级居中了</span></span><br><span class="line">              children: [</span><br><span class="line">                <span class="keyword">const</span> Text(</span><br><span class="line">                  <span class="string">&#x27;Welcome&#x27;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: Colors.black,</span><br><span class="line">                    fontSize: <span class="number">30</span>,</span><br><span class="line">                    fontWeight: FontWeight.bold,<span class="comment">//标题加粗</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                TextFormField(</span><br><span class="line">                  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                    hintText: <span class="string">&#x27;Username&#x27;</span>,<span class="comment">//设置占位信息</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                TextFormField(</span><br><span class="line">                  decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                    hintText: <span class="string">&#x27;Password&#x27;</span>,</span><br><span class="line">                  ),</span><br><span class="line">                  obscureText: <span class="keyword">true</span>,<span class="comment">//模糊文本，也就是隐藏文本信息，密码框嘛</span></span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">const</span> SizedBox(<span class="comment">//占位的空白组件</span></span><br><span class="line">                  height: <span class="number">24</span>,</span><br><span class="line">                ),</span><br><span class="line">                ElevatedButton(<span class="comment">//普通的按钮</span></span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pushNamed(context, <span class="string">&#x27;catalog&#x27;</span>);<span class="comment">//登录跳转</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  style: ButtonStyle(</span><br><span class="line">                    backgroundColor: MaterialStateProperty.all(Colors.black)<span class="comment">//设置背景色</span></span><br><span class="line">                  ),</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&#x27;ENTER&#x27;</span>),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/iVZdZmjK.png" alt="登录界面"></p><h3 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h3><p>商品目录。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Catalog</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Catalog(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; itemNames = context.read&lt;GoodsModel&gt;().itemNames <span class="keyword">as</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;;<span class="comment">//获取共享数据中的商品名称</span></span><br><span class="line">    <span class="comment">//根据商品名称生成每一行的商品信息。包括了商品的图片（这里用随机颜色代替），商品id，商品名称。商品类是自定义的。</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Good&gt; goods=<span class="built_in">List</span>.generate(itemNames.length, (index) =&gt; Good(color: Colors.primaries[index],id: index,name: itemNames[index],));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        backgroundColor: Colors.black,</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Catalog&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">        actions: [IconButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              Navigator.pushNamed(context, <span class="string">&#x27;cart&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            icon: <span class="keyword">const</span> Icon(Icons.shopping_cart)</span><br><span class="line">        )],</span><br><span class="line">      ),</span><br><span class="line">      body: GridView(<span class="comment">//这里之所以使用网格列表，是因为网格列表可以滚动，且设置垂直间距更方便</span></span><br><span class="line">        gridDelegate: <span class="keyword">const</span> SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">          crossAxisCount: <span class="number">1</span>,<span class="comment">//一列</span></span><br><span class="line">          mainAxisSpacing: <span class="number">0</span>,<span class="comment">//每一行之间的距离</span></span><br><span class="line">          mainAxisExtent: <span class="number">80</span><span class="comment">//每一行的高度</span></span><br><span class="line">        ),</span><br><span class="line">        children: goods,<span class="comment">//刚刚生成是商品们</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;<span class="comment">//自定义的商品组件</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;<span class="comment">//商品id</span></span><br><span class="line">  <span class="keyword">final</span> Color color;<span class="comment">//商品图片（颜色替代）</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;<span class="comment">//商品名称</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Good(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.color, <span class="keyword">required</span> <span class="keyword">this</span>.id, <span class="keyword">required</span> <span class="keyword">this</span>.name&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">bool</span> selected=context.watch&lt;GoodsModel&gt;().isSelected[id];<span class="comment">//确认商品是否选中再初始化</span></span><br><span class="line">    <span class="keyword">return</span>  Padding(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16</span>,vertical: <span class="number">8</span>),</span><br><span class="line">      child: Row(<span class="comment">//每个商品就是一行</span></span><br><span class="line">        <span class="comment">// mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span></span><br><span class="line">        children: [<span class="comment">//一行中的所有列</span></span><br><span class="line">          Container(<span class="comment">//颜色块</span></span><br><span class="line">            width: <span class="number">50</span>,</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">            color: color,</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(width: <span class="number">24</span>),<span class="comment">//空白块分隔</span></span><br><span class="line">           Expanded(<span class="comment">//拓展区，自动占满剩余未分配区域</span></span><br><span class="line">            child: Text(name,style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                fontSize: <span class="number">24</span></span><br><span class="line">            ),),</span><br><span class="line">          ),</span><br><span class="line">          TextButton(<span class="comment">//添加购物车按钮</span></span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              <span class="keyword">if</span>(selected==<span class="keyword">true</span>)&#123;<span class="comment">//移出购物车</span></span><br><span class="line">                selected=!selected;</span><br><span class="line">                context.read&lt;GoodsModel&gt;().unselectItem(id);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span>&#123;<span class="comment">//加入购物车</span></span><br><span class="line">                selected=!selected;</span><br><span class="line">                context.read&lt;GoodsModel&gt;().selectItem(id);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: selected</span><br><span class="line">                ?<span class="keyword">const</span> Icon(Icons.check,size: <span class="number">20</span>,)<span class="comment">//已经选中，则变成勾勾图标</span></span><br><span class="line">                :<span class="keyword">const</span> Text(<span class="comment">//未选中，则文字ADD</span></span><br><span class="line">              <span class="string">&quot;ADD&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.black,</span><br><span class="line">                fontSize: <span class="number">20</span></span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(width: <span class="number">24</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/XUcRuMDR.png" alt="商品界面"></p><h3 id="Cart"><a href="#Cart" class="headerlink" title="Cart"></a>Cart</h3><p>购物车。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dayly/main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Cart(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        backgroundColor: Colors.black,</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Cart&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: MyCart(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCart</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyCart(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; texts=context.watch&lt;GoodsModel&gt;().selectedItems <span class="keyword">as</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;;<span class="comment">//获取共享数据中已经选择的商品</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Text&gt; goods=<span class="built_in">List</span>.generate(texts.length, (index) =&gt; Text(<span class="comment">//生成购物车清单</span></span><br><span class="line">        texts[index],</span><br><span class="line">      style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">        fontSize: <span class="number">30</span></span><br><span class="line">      ),</span><br><span class="line">    ));</span><br><span class="line">    <span class="built_in">int</span> price=texts.length*<span class="number">42</span>;<span class="comment">//每件商品按42美元计算</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.orange,</span><br><span class="line">      child: Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">20</span>,vertical: <span class="number">16</span>),</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            Container(</span><br><span class="line">              height: <span class="number">400</span>,</span><br><span class="line">              child: Row(</span><br><span class="line">                children: [</span><br><span class="line">                  Column(</span><br><span class="line">                    mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">                    crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                    children: goods,</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              height: <span class="number">150</span>,</span><br><span class="line">              decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">                  border: Border.symmetric(horizontal: BorderSide(</span><br><span class="line">                      style: BorderStyle.solid</span><br><span class="line">                  ))</span><br><span class="line">              ),</span><br><span class="line">              child: Row(</span><br><span class="line">                children: [</span><br><span class="line">                  <span class="keyword">const</span> SizedBox(width: <span class="number">40</span>,),</span><br><span class="line">                  <span class="keyword">const</span> Text(<span class="string">&quot;\$&quot;</span>,style: TextStyle(fontSize: <span class="number">50</span>),),</span><br><span class="line">                  Text(<span class="string">&quot;<span class="subst">$price</span>&quot;</span>,style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">50</span>),),</span><br><span class="line">                  <span class="keyword">const</span> SizedBox(width: <span class="number">50</span>,),</span><br><span class="line">                  TextButton(</span><br><span class="line">                    onPressed: ()&#123;&#125;,</span><br><span class="line">                    style: ButtonStyle(</span><br><span class="line">                      backgroundColor:MaterialStateProperty.all(Colors.white),</span><br><span class="line">                      minimumSize: MaterialStateProperty.all(<span class="keyword">const</span> Size(<span class="number">120</span>, <span class="number">50</span>))</span><br><span class="line">                    ),</span><br><span class="line">                    child: <span class="keyword">const</span> Text(<span class="string">&quot;BUY&quot;</span>),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/29/JQ9DN2GD.png" alt="购物车界面"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>难能可贵的综合运用</li><li>布局的思维模式和熟练度有待提升</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-BottomNavigatorBar</title>
      <link href="/2022/09/29/FlutterBottomNavigatorBar.html"/>
      <url>/2022/09/29/FlutterBottomNavigatorBar.html</url>
      
        <content type="html"><![CDATA[<p>ottomNavigatorBar 是 Scaffold 组件中的，底部的导航栏。</p><h3 id="BottomNavigatorBar"><a href="#BottomNavigatorBar" class="headerlink" title="BottomNavigatorBar"></a>BottomNavigatorBar</h3><ul><li>items：BottomNavigatorBarItem（）<ul><li>label：标签名称</li><li>icon：图标</li><li>backgroundColor：背景颜色，在 BottomNavigatorBar  的type设置为BottomNavigationBarType.shifting时生效</li></ul></li><li>currentIndex：当前选项卡的索引，当前选项卡会高亮</li><li>backgroundColor：导航栏背景图片</li><li>elevation：阴影</li><li>fixedColor：选中的 item 字体颜色和图标颜色</li><li>onTap：点击选项时触发的函数，需要传入 index （点击选项的索引），（index）{xxx}，用于更新当前索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Navigator</title>
      <link href="/2022/09/28/Navigator.html"/>
      <url>/2022/09/28/Navigator.html</url>
      
        <content type="html"><![CDATA[<p>Navigator用于管理路由。</p><h3 id="三种路由（省略动态路由）"><a href="#三种路由（省略动态路由）" class="headerlink" title="三种路由（省略动态路由）"></a>三种路由（省略动态路由）</h3><ul><li><p>匿名路由</p><ul><li><pre><code class="dart">Navigator.push(context, MaterialPageRoute(build:(context)=&gt;diyWidget()))<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 命名路由</span><br><span class="line"></span><br><span class="line">  * ``` dart</span><br><span class="line">    Navigator.pushNamed(context, name)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>name 指创建的路由表中的 key，如下所示</p></li><li><pre><code class="dart">var routes=&#123;  &#39;home&#39;:(context)=&gt; const IndexPage(),  &#39;OfficialDemo&#39;:(context)=&gt;const OfficialDemo(),  &#39;Container&#39;:(context)=&gt;const ContainerDemo(),  &#39;ColumnRow&#39;:(context)=&gt;const ColumnAndRow(),  &#39;Flex&#39;:(context)=&gt;const FlexPage(),  &#39;Wrap&#39;:(context)=&gt;const WrapPage(),  &#39;Stack&#39;:(context)=&gt;const StackPage(),  &#39;Card&#39;:(context)=&gt;const CardPage(),  &#39;LayoutTest&#39;:(context)=&gt;const LayoutTest(),  &#39;StatefulWidget&#39;:(context)=&gt;const StatefulWidgetPage(),  &#39;Button&#39;:(context)=&gt;const ButtonPage(),  &#39;SingleChildScrollViewPage&#39;:(context)=&gt;const SingleChildScrollViewPage(),  &#39;ListView&#39;:(context)=&gt;const ListViewPage(),  &#39;GridView&#39;:(context)=&gt;const GridViewPage(),&#125;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 路由传参</span><br><span class="line"></span><br><span class="line">* 匿名路由</span><br><span class="line"></span><br><span class="line">  * 在要跳转的页面对应的组件中，写上对应的属性，标记为 required，在跳转页面的时候，传递有关参数即可。</span><br><span class="line">  * 简单来说，就是靠页面对应组件自身的属性和构造函数来进行路由传参。</span><br><span class="line"></span><br><span class="line">* 命名路由</span><br><span class="line"></span><br><span class="line">  * ```dart</span><br><span class="line">    Navigator.pushNamed(context, name, &#123;arguments&#125;)//携带参数的路由跳转</span><br></pre></td></tr></table></figure></code></pre></li><li><p>arguments 是一个 map 对象，就像上面的路由表一样。</p></li><li><pre><code class="dart">ModalRoute.of(context).settings.arguments;//获取传递过来的arguments</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-InheritedWidget</title>
      <link href="/2022/09/26/InheritedWidget.html"/>
      <url>/2022/09/26/InheritedWidget.html</url>
      
        <content type="html"><![CDATA[<h3 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h3><ul><li>flutter中用于数据共享的组件。</li><li>创建自定义类，继承 InheritedWidget ，用这个自定义类的组件实例包裹子组件，使得子组件及其后代都可以访问自定义类实例中的共享数据。</li></ul><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><p>使用 inh 简写快速生成自定义类并继承数据共享组件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitingData</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name; <span class="comment">//自定义共享数据，需要final前缀</span></span><br><span class="line">  <span class="keyword">const</span> WaitingData(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> WaitingData of(BuildContext context) &#123;<span class="comment">//静态方法，简化了获取共享数据的方式。不用这种就用下面这行复杂方式</span></span><br><span class="line">    <span class="keyword">final</span> WaitingData? result = context.dependOnInheritedWidgetOfExactType&lt;WaitingData&gt;();</span><br><span class="line">    <span class="keyword">assert</span>(result != <span class="keyword">null</span>, <span class="string">&#x27;No WaitingData found in context&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(WaitingData old) &#123;<span class="comment">//指明什么时候重新渲染组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//true则当数据改变的时候，每次都重新渲染。可以写箭头函数来指明条件。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="自定义类实例的使用"><a href="#自定义类实例的使用" class="headerlink" title="自定义类实例的使用"></a>自定义类实例的使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyPage&gt; createState() =&gt; _MyPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyPage</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  WaitingData(</span><br><span class="line">        name: <span class="string">&quot;Kahvia!&quot;</span>,</span><br><span class="line">        child: Builder(<span class="comment">//用Builder才能获取到上下文</span></span><br><span class="line">            builder: (BuildContext centerContext)&#123;<span class="comment">//这个上下文的内容包括Builder（）外面的东西，即包含了name</span></span><br><span class="line">              <span class="keyword">return</span> Center(</span><br><span class="line">                child: Text(</span><br><span class="line">                    <span class="string">&quot;Hello,<span class="subst">$&#123;WaitingData.of(centerContext).name&#125;</span>&quot;</span>,<span class="comment">//如果用的的context，那context上下文中则没有name，会报错</span></span><br><span class="line">                    style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                      fontSize: <span class="number">25</span>,</span><br><span class="line">                      color: Colors.blue</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>明确上下文（context），想要获取共享数据，就需要使用<font color=#66AFE)><strong>共享数据组件的子组件的上下文</strong></font></li><li>获取上下文可以用Builder（）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Provider</title>
      <link href="/2022/09/26/FlutterProvider.html"/>
      <url>/2022/09/26/FlutterProvider.html</url>
      
        <content type="html"><![CDATA[<p>Provider是第三方状态管理的库。就我目前的水平来看，它貌似能代替 StatefulWidget 和 InheritedWidget 。</p><h3 id="安装（带-表示可以自动更新）"><a href="#安装（带-表示可以自动更新）" class="headerlink" title="安装（带^表示可以自动更新）"></a>安装（带^表示可以自动更新）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">^6.0.3</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建数据模型（自定义类），继承 ChangeNotifier ，暴露想要共享的数据, 以及创建可选的修改数据的方法。</p></li><li><p>创建观察者，或者说数据模型的提供者——Provider。</p><ul><li>通过Provider（）提供的数据通常是不可变的。</li><li>通过ChangeNotifierProvider（）提供的数据可以改变，并可以通过调用notifyListeners（）来更新使用到共享数据的组件。<ul><li>和 InheritedWidget 类似，包裹需要使用共享数据的子孙组件。包裹一次，子孙组件都可以作为监听者（listener）使用数据。</li><li>为 create 属性提供构造器，需要传入上下文context</li><li>child 子组件，也就是包裹的子孙组件</li></ul></li></ul></li><li><p>作为 Listener 使用共享数据。因为时常需要响应数据的变化，所以叫监听者。</p><ul><li><p>context.watch &lt; Type &gt;( ).atributeName，通过上下文的注入方法（由provider自动注入，也就是附加方法）来获取数据。</p></li><li><p>Provider.Of&lt; Type &gt;(context).atributeName, 通过Provider的静态方法来获取数据。</p></li><li><p>查看源码发现，第一种方法就是封装后的第二种方法</p></li><li><p>&#96;&#96;&#96;dart<br>T watch<T>() {<br>  return Provider.of<T>(this);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">### 代码区</span><br><span class="line"></span><br><span class="line">#### 数据模型</span><br><span class="line"></span><br><span class="line">```dart</span><br><span class="line">class LikeData extends ChangeNotifier&#123;</span><br><span class="line">  int _number=520;</span><br><span class="line">  bool _liking=true;</span><br><span class="line"></span><br><span class="line">  int get number =&gt; _number;//暴露私有变量，让外部访问。</span><br><span class="line">  bool get liking =&gt; _liking;</span><br><span class="line"></span><br><span class="line">  void changeLikeState()&#123;//改变收藏状态的函数</span><br><span class="line">    if(_liking==true)&#123;</span><br><span class="line">      _liking=false;</span><br><span class="line">      _number--;</span><br><span class="line">      notifyListeners();//数据改变了，通知数据监听者（provider）去改变值</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      _liking=true;</span><br><span class="line">      _number++;</span><br><span class="line">      notifyListeners();//数据改变了，通知数据监听者（provider）去改变值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Home(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider(<span class="comment">//包裹需要数据的子孙组件</span></span><br><span class="line">      create: (BuildContext context)=&gt;LikeData(),<span class="comment">//构造器构造数据模型</span></span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Provider&#x27;</span>),</span><br><span class="line">          leading: <span class="keyword">const</span> Icon(Icons.menu),</span><br><span class="line">          actions: <span class="keyword">const</span>[Icon(Icons.settings)],</span><br><span class="line">        ),</span><br><span class="line">        body:  MyPage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听者（使用到共享数据的那一部分）"><a href="#监听者（使用到共享数据的那一部分）" class="headerlink" title="监听者（使用到共享数据的那一部分）"></a>监听者（使用到共享数据的那一部分）</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Widget titleSection = Builder(</span><br><span class="line">    builder: (BuildContext context)=&gt;Container(<span class="comment">//自定义组件，标题部分，即头部部分</span></span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">32</span>),</span><br><span class="line">      child: Row(<span class="comment">//一行</span></span><br><span class="line">        children: [<span class="comment">//三列</span></span><br><span class="line">          Expanded(<span class="comment">//第一列，标题和副标题</span></span><br><span class="line">            child: Column(<span class="comment">//第一列有两行</span></span><br><span class="line">              crossAxisAlignment: CrossAxisAlignment.start,<span class="comment">//交叉轴方向，此处即水平方向对齐方式，在起点处对齐，即左对齐</span></span><br><span class="line">              children: [</span><br><span class="line">                <span class="keyword">const</span> Text(<span class="comment">//第一行</span></span><br><span class="line">                  <span class="string">&quot;Hello,this is Alice!&quot;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    fontWeight: FontWeight.bold,<span class="comment">//加粗，表明主体</span></span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Text(<span class="comment">//第二行</span></span><br><span class="line">                  <span class="string">&quot;Good evening!&quot;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: Colors.grey[<span class="number">500</span>],<span class="comment">//灰色</span></span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">           IconButton(<span class="comment">//第二列，收藏图标</span></span><br><span class="line">             icon: Icon(context.watch&lt;LikeData&gt;().liking?Icons.star:Icons.star_border),<span class="comment">//获取共享数据的第一种方法</span></span><br><span class="line">             color: Colors.red,</span><br><span class="line">             onPressed: context.watch&lt;LikeData&gt;().changeLikeState,</span><br><span class="line">          ),</span><br><span class="line">           Text(<span class="comment">//第三列，收藏数</span></span><br><span class="line">            <span class="string">&quot;<span class="subst">$&#123;Provider.of&lt;LikeData&gt;(context).number&#125;</span>&quot;</span>,<span class="comment">//获取共享数据的第二种方法</span></span><br><span class="line">            <span class="comment">//   &quot;520&quot;</span></span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>代码实现的功能和之前测试的“有状态组件”一样，都是实现收藏功能和它的收藏数变化。</p><p>不同的地方是，使用provider后，没有使用状态组件进行状态管理。但是很显然，这种共享数据的模式在多重嵌套组件下，可以更好的实现状态管理，而不用通过构造函数传递所需数据，也不需要通过手动调用 setState（）进行组件的重新渲染。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-DataTable</title>
      <link href="/2022/09/24/DataTable.html"/>
      <url>/2022/09/24/DataTable.html</url>
      
        <content type="html"><![CDATA[<h3 id="DataTable"><a href="#DataTable" class="headerlink" title="DataTable"></a>DataTable</h3><ul><li>sortColumnIndex：排序的列号</li><li>sortAscending：排序方式，true为升序，false为降序，决定了排序箭头的上下，也决定了排序事件的传入值</li><li>columns：表格头部们</li><li>rows：各行数据，通常是动态生成的</li><li>详情用法见代码部分，我相信未来的我看到代码一定能秒懂。</li></ul><span id="more"></span><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> school;</span><br><span class="line">  <span class="built_in">bool</span> selected;</span><br><span class="line">  <span class="comment">//学生类和它的构造函数</span></span><br><span class="line">  Student(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.school,&#123;<span class="keyword">this</span>.selected=<span class="keyword">false</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyPage&gt; createState() =&gt; _MyPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> asc=<span class="keyword">true</span>;<span class="comment">//定义排序的方式，定义true为升序，false为降序</span></span><br><span class="line">  <span class="comment">//模仿接收后台的数据</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Student&gt; students=[</span><br><span class="line">    Student(<span class="string">&quot;阿东&quot;</span>, <span class="number">21</span>, <span class="string">&quot;Three Gorges&quot;</span>),</span><br><span class="line">    Student(<span class="string">&quot;阿叶&quot;</span>, <span class="number">20</span>, <span class="string">&quot;Three Gorges&quot;</span>)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  getStudentsData()&#123;<span class="comment">//生成表单数据</span></span><br><span class="line">    <span class="built_in">List</span>&lt;DataRow&gt; dataRows=[];<span class="comment">//生成空行们</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> element <span class="keyword">in</span> students) &#123;<span class="comment">//for循环添加数据</span></span><br><span class="line">      dataRows.add(DataRow(</span><br><span class="line">          selected: element.selected,<span class="comment">//这一行默认的选中状态</span></span><br><span class="line">          onSelectChanged: (selected)&#123;<span class="comment">//单击行时调用的函数，selected是当前行点击后的状态</span></span><br><span class="line">            setState(() &#123;<span class="comment">//使用setState是为了重新渲染组件</span></span><br><span class="line">              element.selected=selected!;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          cells: [<span class="comment">//cell，也就是单元格，一行数据中固定最小单位</span></span><br><span class="line">            DataCell(Text(element.name)),</span><br><span class="line">            DataCell(Text(<span class="string">&quot;<span class="subst">$&#123;element.age&#125;</span>&quot;</span>)),<span class="comment">//因为Student定义的年龄是int类型，所以要加双引号变成字符串才能作为Text的内容</span></span><br><span class="line">            DataCell(Text(element.school))</span><br><span class="line">          ]</span><br><span class="line">      ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataRows;<span class="comment">//返回生成好的表单数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SingleChildScrollView(</span><br><span class="line">      physics: <span class="keyword">const</span> BouncingScrollPhysics(),</span><br><span class="line">      child: DataTable(</span><br><span class="line">        sortColumnIndex: <span class="number">1</span>,<span class="comment">//指定需要排序的列号，这里的1为年龄那一列。复选框的那一列不计入。</span></span><br><span class="line">        sortAscending: asc,<span class="comment">//指定排序方式，asc为上面定义的布尔值，同时它决定了排序箭头的方向，也决定了下方点击排序后产生的toBeAsc的值</span></span><br><span class="line">        columns:  [</span><br><span class="line">          <span class="keyword">const</span> DataColumn(label: Text(<span class="string">&quot;name&quot;</span>)),</span><br><span class="line">          DataColumn(</span><br><span class="line">            label: <span class="keyword">const</span> Text(<span class="string">&quot;age&quot;</span>),</span><br><span class="line">            numeric: <span class="keyword">true</span>,<span class="comment">//需要排序的列，要把列设置为数字型的列。</span></span><br><span class="line">            onSort: (<span class="built_in">int</span> index,<span class="built_in">bool</span> toBeAsc)&#123;<span class="comment">//然后定义它的排序方式，传入的是一个匿名函数，index为列号？toBeAsc是点击排序后，传入的布尔值，即是否是升序（ASC）</span></span><br><span class="line">                setState(() &#123;<span class="comment">//自然要用到setState来重新渲染组件</span></span><br><span class="line">                  asc=toBeAsc;<span class="comment">//toBeAsc是点击排序箭头后的值。如果点击前是向上的箭头，即升序(true)，那点击后这个toBeAsc的值，就是false</span></span><br><span class="line">                  <span class="keyword">if</span>(toBeAsc)&#123;<span class="comment">//排序可以看源码注释，就是给sort函数传入一个匿名函数，自己决定如何定义它们的大小。这里是compare年龄来决定大小</span></span><br><span class="line">                    students.sort((a,b) =&gt; a.age.compareTo(b.age));</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span> &#123;</span><br><span class="line">                    students.sort((a,b) =&gt; b.age.compareTo(a.age));</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> DataColumn(label: Text(<span class="string">&quot;school&quot;</span>))</span><br><span class="line">        ],</span><br><span class="line">        rows: getStudentsData(),<span class="comment">//调用函数，获取表单数据</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/24/eeefH0CF.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-ThirdPackage</title>
      <link href="/2022/09/18/ThirdPackage.html"/>
      <url>/2022/09/18/ThirdPackage.html</url>
      
        <content type="html"><![CDATA[<p> 在开发中经常要用到第三方库，而 Flutter 开发经常用的第三方库可以在<a href="https://pub.dev/">pub.dev</a>中寻找。</p><p>使用方法：</p><ol><li><p>在库存中寻找想要的包</p></li><li><p>在项目的 pubspec.yaml 中添加依赖</p></li><li><p>&#96;&#96;&#96;bash<br>flutter pub get </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 有的时候添加依赖后保存了，就自动下载了。用不到上述命令。</span><br><span class="line"></span><br><span class="line">### dio</span><br><span class="line"></span><br><span class="line">dio，跟 Axois 差不多的东西。</span><br><span class="line"></span><br><span class="line">### card_swiper</span><br><span class="line"></span><br><span class="line">做轮播图的。</span><br><span class="line"></span><br><span class="line">```dart</span><br><span class="line">class MyPage extends StatelessWidget &#123;</span><br><span class="line">   MyPage(&#123;Key? key&#125;) : super(key: key);</span><br><span class="line">  final List&lt;String&gt; pics=[</span><br><span class="line">    &quot;images/Alice.jpg&quot;,</span><br><span class="line">    &quot;images/everyone.jpg&quot;,</span><br><span class="line">    &quot;images/dawn.jpg&quot;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return  ListView(</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          height: 300,</span><br><span class="line">          child: Swiper(</span><br><span class="line">            // itemHeight: 10,//这两个属性对于默认的轮播图布局似乎没啥用</span><br><span class="line">            // itemWidth: 10,</span><br><span class="line">            itemCount: pics.length,</span><br><span class="line">            autoplay: true,</span><br><span class="line">            pagination: SwiperPagination(),//小圆点</span><br><span class="line">            // control: SwiperControl(),//手动点击的按钮</span><br><span class="line">            viewportFraction: 0.7,</span><br><span class="line">            scale: 0.6,</span><br><span class="line">            itemBuilder: (context,index)&#123;</span><br><span class="line">              return Image.asset(pics[index],fit: BoxFit.cover,);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          height: 300,</span><br><span class="line">          child: Swiper(</span><br><span class="line">            itemCount: pics.length,</span><br><span class="line">            pagination:const SwiperPagination(),//小圆点</span><br><span class="line">            itemWidth: 300,</span><br><span class="line">            layout: SwiperLayout.STACK,//轮播图使用stack布局的时候，itemWidth不能为空</span><br><span class="line">            itemBuilder: (context,index)&#123;</span><br><span class="line">              return Image.asset(pics[index],fit: BoxFit.cover,);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          height: 300,</span><br><span class="line">          child: Swiper(//垂直轮播图</span><br><span class="line">            itemCount: pics.length,</span><br><span class="line">            scrollDirection: Axis.vertical,//垂直</span><br><span class="line">            pagination:const SwiperPagination(),//小圆点</span><br><span class="line">            // itemWidth: 300,</span><br><span class="line">            // layout: SwiperLayout.STACK,//垂直轮播图似乎只能用默认布局</span><br><span class="line">            itemBuilder: (context,index)&#123;</span><br><span class="line">              return Image.asset(pics[index],fit: BoxFit.cover,);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img1.imgtp.com/2022/09/18/qFXxXuZW.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-列表</title>
      <link href="/2022/09/13/FlutterList.html"/>
      <url>/2022/09/13/FlutterList.html</url>
      
        <content type="html"><![CDATA[<h3 id="SingleChildScrollView"><a href="#SingleChildScrollView" class="headerlink" title="SingleChildScrollView"></a>SingleChildScrollView</h3><ul><li>child</li><li>padding</li><li>scrollDirection ：滚动方向，水平（Axis.horizontal）或垂直（Axis.vertical）</li><li>reverse ：是否翻转，默认第一个组件作为滚动视图的起点</li><li>physics<ul><li>ClampingScrollPhysics ：安卓的微光效果</li><li>BouncingScrollPhysics ：ios的弹性效果</li></ul></li></ul><span id="more"></span><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Stack(</span><br><span class="line">      children: [</span><br><span class="line">        SingleChildScrollView(</span><br><span class="line">          physics: <span class="keyword">const</span> BouncingScrollPhysics(),</span><br><span class="line">          child: Column(</span><br><span class="line">            children: [</span><br><span class="line">              Card(),<span class="comment">//card中代码省略</span></span><br><span class="line">              Card(),</span><br><span class="line">              Card()</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/13/jlsFe5YR.png" alt="效果图"></p><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>三种构造方法，常用的子组件有 ListTile</p><ul><li>ListView( )</li><li>ListView.builder( ) <ul><li>itemCount</li><li>itemExtent</li><li>itemBuilder</li></ul></li><li>ListView.separated( ) <ul><li>separatorBuilder ：分割线构造器</li></ul></li></ul><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Column(</span><br><span class="line">      children: [</span><br><span class="line">        demo1(),</span><br><span class="line">        demo2(),</span><br><span class="line">        demo3()</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo1</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;<span class="comment">//默认的ListView构造</span></span><br><span class="line">  <span class="comment">// demo1(&#123;Key? key&#125;) : super(key: key);</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; tiles=<span class="built_in">List</span>.generate(<span class="number">10</span>, (index) =&gt;  ListTile(</span><br><span class="line">    title: Text(<span class="string">&quot;tile<span class="subst">$index</span>&quot;</span>),</span><br><span class="line">    subtitle: <span class="keyword">const</span> Text(<span class="string">&quot;subtitle&quot;</span>),</span><br><span class="line">    leading: <span class="keyword">const</span> Icon(Icons.account_box,size: <span class="number">40</span>,),</span><br><span class="line">    trailing: <span class="keyword">const</span> Icon(Icons.arrow_left,size: <span class="number">40</span>,),</span><br><span class="line">  ));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.red,</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      child: ListView(</span><br><span class="line">        scrollDirection: Axis.vertical,</span><br><span class="line">        physics: <span class="keyword">const</span> BouncingScrollPhysics(),</span><br><span class="line">        children: tiles,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo2</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;<span class="comment">//ListView的builder构造</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; tiles=<span class="built_in">List</span>.generate(<span class="number">10</span>, (index) =&gt;  ListTile(</span><br><span class="line">    title: Text(<span class="string">&quot;tile<span class="subst">$index</span>&quot;</span>),</span><br><span class="line">    subtitle: <span class="keyword">const</span> Text(<span class="string">&quot;subtitle&quot;</span>),</span><br><span class="line">    leading: <span class="keyword">const</span> Icon(Icons.account_box,size: <span class="number">40</span>,),</span><br><span class="line">    trailing: <span class="keyword">const</span> Icon(Icons.arrow_left,size: <span class="number">40</span>,),</span><br><span class="line">  ));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.orange,</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      child: ListView.builder(</span><br><span class="line">        itemCount: <span class="number">5</span>,<span class="comment">//指定需要多少个item，按需取得</span></span><br><span class="line">        itemExtent: <span class="number">50</span>,<span class="comment">//指定item的大小，或许是高度？固定的大小会处理的更有效。</span></span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">10</span>),</span><br><span class="line">        itemBuilder: (context,index)&#123;<span class="comment">//返回单个</span></span><br><span class="line">          <span class="keyword">return</span> tiles[index];</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo3</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;<span class="comment">//ListView的separated构造</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; tiles=<span class="built_in">List</span>.generate(<span class="number">10</span>, (index) =&gt;  ListTile(</span><br><span class="line">    title: Text(<span class="string">&quot;tile<span class="subst">$index</span>&quot;</span>),</span><br><span class="line">    subtitle: <span class="keyword">const</span> Text(<span class="string">&quot;subtitle&quot;</span>),</span><br><span class="line">    leading: <span class="keyword">const</span> Icon(Icons.account_box,size: <span class="number">40</span>,),</span><br><span class="line">    trailing: <span class="keyword">const</span> Icon(Icons.arrow_left,size: <span class="number">40</span>,),</span><br><span class="line">  ));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.green,</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      child: ListView.separated(</span><br><span class="line">        itemCount: tiles.length,</span><br><span class="line">        itemBuilder: (context,index)&#123;</span><br><span class="line">          <span class="keyword">return</span> tiles[index];</span><br><span class="line">        &#125;,</span><br><span class="line">        separatorBuilder: (context,index)&#123;<span class="comment">//分割线构造器</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">const</span> Divider(</span><br><span class="line">            color:  Colors.red,</span><br><span class="line">            height: <span class="number">30</span>,<span class="comment">//分割线的高度，也就是两个item之间的距离</span></span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/14/bmNcz0ry.png" alt="效果图"></p><h3 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h3><p>三种构造方法</p><ul><li>GridView（默认）<ul><li>children（子组件）</li><li>scrollDirection（滚动方向）</li><li>gridDelegate（网格代表？或许可以理解为网格的总设置）<ul><li>SliverGridDelegateWithFixedCrossAxisCount（指定列数，子组件的宽度自适应）</li><li>SliverGridDelegateWithMaxCrossAxisExtent（指定子组件交叉轴方向的大小，列数自适应）</li></ul></li><li>各轴spacing（调整子组件之间的距离）</li></ul></li><li>GridView.count（列数固定）</li><li>GridView.extend（子组件宽度固定）</li><li>GridView.builder（动态网格布局）</li></ul><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  GridView(<span class="comment">//网格列表</span></span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">10</span>),<span class="comment">//内边距</span></span><br><span class="line">      scrollDirection: Axis.vertical,<span class="comment">//垂直滚动</span></span><br><span class="line">      physics: <span class="keyword">const</span> BouncingScrollPhysics(),<span class="comment">//弹性滚动</span></span><br><span class="line">      gridDelegate: <span class="keyword">const</span> SliverGridDelegateWithFixedCrossAxisCount(<span class="comment">//固定交叉轴方向组件数量</span></span><br><span class="line">        crossAxisCount: <span class="number">2</span>,<span class="comment">//数量</span></span><br><span class="line">        mainAxisSpacing: <span class="number">10</span>,<span class="comment">//主轴方向间距</span></span><br><span class="line">        crossAxisSpacing: <span class="number">10</span>,<span class="comment">//交叉轴方向间距</span></span><br><span class="line">        <span class="comment">// mainAxisExtent: 30//子组件主轴方向的大小</span></span><br><span class="line">        childAspectRatio: <span class="number">0.5</span><span class="comment">//子组件交叉轴方向和主轴方向的大小比例</span></span><br><span class="line">      ),</span><br><span class="line">      children: [</span><br><span class="line">        Container(color: Colors.red,),</span><br><span class="line">        Container(color: Colors.black,),</span><br><span class="line">        Container(color: Colors.green,),</span><br><span class="line">        Container(color: Colors.yellow,),</span><br><span class="line">        Container(color: Colors.orange,),</span><br><span class="line">        Container(color: Colors.grey,),</span><br><span class="line">        Container(color: Colors.red,),</span><br><span class="line">        Container(color: Colors.black,),</span><br><span class="line">        Container(color: Colors.green,),</span><br><span class="line">        Container(color: Colors.yellow,),</span><br><span class="line">        Container(color: Colors.orange,),</span><br><span class="line">        Container(color: Colors.grey,)</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/18/PnvONuDb.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-图片</title>
      <link href="/2022/09/13/FlutterPicture.html"/>
      <url>/2022/09/13/FlutterPicture.html</url>
      
        <content type="html"><![CDATA[<h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><ul><li>Image.asset（）<ul><li>Flutter项目目录下创建存储目录，比如images</li><li>在 pubspec.yaml 中按照注释进行规范配置</li><li>在代码中引用</li></ul></li></ul><h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><ul><li>Image.network</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Button</title>
      <link href="/2022/09/12/FlutterButton.html"/>
      <url>/2022/09/12/FlutterButton.html</url>
      
        <content type="html"><![CDATA[<h3 id="普通按钮（共同的属性见代码区）"><a href="#普通按钮（共同的属性见代码区）" class="headerlink" title="普通按钮（共同的属性见代码区）"></a>普通按钮（共同的属性见代码区）</h3><ul><li>TextButton（文本按钮）</li><li>ElevatedButton（凸起按钮）</li><li>OutlinedButton（轮廓按钮）</li></ul><h3 id="图标按钮"><a href="#图标按钮" class="headerlink" title="图标按钮"></a>图标按钮</h3><ul><li>IconButton<ul><li>tooltip:长按提示</li></ul></li><li>TextButton.icon()</li><li>ElevatedButton.icon()</li><li>OutlinedButton.icon()</li></ul><span id="more"></span><h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><ul><li>ButtonBar</li></ul><h3 id="浮动按钮"><a href="#浮动按钮" class="headerlink" title="浮动按钮"></a>浮动按钮</h3><ul><li>FloatingActionButton：要放在scaffold中，与appbar和body同级</li></ul><h3 id="回退按钮"><a href="#回退按钮" class="headerlink" title="回退按钮"></a>回退按钮</h3><ul><li>BackButton</li></ul><h3 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h3><ul><li>CloseButton</li></ul><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Home(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Work&#x27;</span>),</span><br><span class="line">        leading: <span class="keyword">const</span> Icon(Icons.menu),</span><br><span class="line">        actions: <span class="keyword">const</span>[Icon(Icons.settings)],</span><br><span class="line">      ),</span><br><span class="line">      body: <span class="keyword">const</span> MyPage(),</span><br><span class="line">      floatingActionButton: FloatingActionButton(<span class="comment">//悬浮按钮要放在Scaffold中，与appbar和body同级</span></span><br><span class="line">        tooltip: <span class="string">&quot;挖草&quot;</span>,</span><br><span class="line">        backgroundColor: Colors.orange,</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          <span class="keyword">if</span>(kDebugMode)&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;FloatingActionButton&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.live_tv),<span class="comment">//悬浮按钮中的子组件，放个icon图片</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">2</span>),</span><br><span class="line">      child: Wrap(</span><br><span class="line">        children: [</span><br><span class="line">          TextButton(</span><br><span class="line">            style: <span class="keyword">const</span> ButtonStyle(</span><br><span class="line">            ),</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;TextButton&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&quot;TextButton&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                  fontSize: <span class="number">25</span></span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              <span class="keyword">if</span>(kDebugMode)&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ElevatedButton&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: <span class="keyword">const</span> Text(<span class="string">&quot;ElevatedButton&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          OutlinedButton(</span><br><span class="line">            style:  ButtonStyle(<span class="comment">//按钮的样式</span></span><br><span class="line">              minimumSize: MaterialStateProperty.all(<span class="keyword">const</span> Size(<span class="number">400</span>,<span class="number">40</span>)),<span class="comment">//按钮最小的尺寸，按钮通常根据内容决定尺寸，故可以设定最小尺寸来决定按钮大小</span></span><br><span class="line">              foregroundColor: MaterialStateProperty.resolveWith((states)&#123;</span><br><span class="line">                <span class="keyword">if</span>(states.contains(MaterialState.pressed))&#123;<span class="comment">//当按钮的状态处于按压时</span></span><br><span class="line">                  <span class="keyword">return</span> Colors.red;<span class="comment">//前景色给出红色</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;),</span><br><span class="line">              backgroundColor: MaterialStateProperty.all(Colors.orange),</span><br><span class="line">              side: MaterialStateProperty.all(<span class="keyword">const</span> BorderSide(</span><br><span class="line">                width: <span class="number">3</span>,</span><br><span class="line">                color: Colors.green</span><br><span class="line">              )),</span><br><span class="line">              shape: MaterialStateProperty.all(<span class="keyword">const</span> StadiumBorder()),<span class="comment">//给个形状就行了，边框的颜色和宽度由side来决定</span></span><br><span class="line">              <span class="comment">// overlayColor: MaterialStateProperty.all(Colors.brown),</span></span><br><span class="line">            ),</span><br><span class="line">            onPressed: ()&#123;</span><br><span class="line">              <span class="keyword">if</span>(kDebugMode) &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;OutlinedButton&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: <span class="keyword">const</span> Text(</span><br><span class="line">                <span class="string">&quot;OutlinedButton&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  color: Colors.white</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          IconButton(</span><br><span class="line">            tooltip: <span class="string">&quot;小辣鸡&quot;</span>,<span class="comment">//长按提示</span></span><br><span class="line">              onPressed: ()&#123;</span><br><span class="line">                <span class="keyword">if</span>(kDebugMode)&#123;</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;IconButton&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.favorite,color: Colors.red,)</span><br><span class="line">          ),</span><br><span class="line">          TextButton.icon(</span><br><span class="line">              onPressed: ()&#123;</span><br><span class="line">                <span class="keyword">if</span>(kDebugMode)&#123;</span><br><span class="line">                  <span class="built_in">print</span>(<span class="string">&quot;TextButton.icon&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.person),</span><br><span class="line">              label: <span class="keyword">const</span> Text(<span class="string">&quot;Khvia&quot;</span>)),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/13/FTl5CnY0.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter交互实践</title>
      <link href="/2022/09/11/Flutter-test2.html"/>
      <url>/2022/09/11/Flutter-test2.html</url>
      
        <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img1.imgtp.com/2022/09/11/6uhrySvk.png" alt="image-20220911202033301"></p><span id="more"></span><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  Widget titleSection = Container(<span class="comment">//自定义组件，标题部分，即头部部分</span></span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">32</span>),</span><br><span class="line">    child: Row(<span class="comment">//一行</span></span><br><span class="line">      children: [<span class="comment">//三列</span></span><br><span class="line">        Expanded(<span class="comment">//第一列，标题和副标题</span></span><br><span class="line">          child: Column(<span class="comment">//第一列有两行</span></span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,<span class="comment">//交叉轴方向，此处即水平方向对齐方式，在起点处对齐，即左对齐</span></span><br><span class="line">            children: [</span><br><span class="line">              <span class="keyword">const</span> Text(<span class="comment">//第一行</span></span><br><span class="line">                <span class="string">&quot;Hello,this is Alice!&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  fontWeight: FontWeight.bold,<span class="comment">//加粗，表明主体</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="comment">//第二行</span></span><br><span class="line">                <span class="string">&quot;Good evening!&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  color: Colors.grey[<span class="number">500</span>],<span class="comment">//灰色</span></span><br><span class="line">                ),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> LikeWidget(),<span class="comment">//这是下面写的自定义有状态组件</span></span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  Widget options=Container(<span class="comment">//自定义组件，操作栏部分</span></span><br><span class="line">    margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">    child: Row(<span class="comment">//一行三列</span></span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">      children: [<span class="comment">//三列</span></span><br><span class="line">        Column(<span class="comment">//第一列，图标加文字描述，下同</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.call,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;CALL&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Column(<span class="comment">//第二列</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.route,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;ROUTE&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Column(<span class="comment">//第三列</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.share,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;SHARE&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  Widget text=Container(<span class="comment">//自定义组件，文本区域部分</span></span><br><span class="line">    margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">30</span>),<span class="comment">//内边距30，即四周留空</span></span><br><span class="line">    child: <span class="keyword">const</span> Text(</span><br><span class="line">      <span class="string">&quot;Something exciting happened when I got up this day. Maybe, but I am not sure about the time.&quot;</span></span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Image.asset(<span class="comment">//预设图片</span></span><br><span class="line">          <span class="string">&#x27;images/Alice.jpg&#x27;</span>,</span><br><span class="line">          <span class="comment">// width: 100,</span></span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          fit: BoxFit.cover,<span class="comment">//填充方式，覆盖。</span></span><br><span class="line">        ),</span><br><span class="line">        titleSection,</span><br><span class="line">        options,</span><br><span class="line">        text</span><br><span class="line">      ],</span><br><span class="line">    ) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;<span class="comment">//这个是有状态组件的显示部分</span></span><br><span class="line">  <span class="keyword">const</span> LikeWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;LikeWidget&gt; createState() =&gt; _LikeWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LikeWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LikeWidget</span>&gt; </span>&#123;<span class="comment">//这个是有状态组件的状态部分</span></span><br><span class="line">  <span class="built_in">bool</span> _like=<span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">int</span> _count=<span class="number">41</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _clickLike()&#123;</span><br><span class="line">    setState(() &#123;<span class="comment">//有状态组件通过执行setState（）执行组件的重新渲染，传入的参数是一个自定义函数</span></span><br><span class="line">      <span class="keyword">if</span>(_like)&#123;</span><br><span class="line">        _like=<span class="keyword">false</span>;</span><br><span class="line">        _count--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        _like=<span class="keyword">true</span>;</span><br><span class="line">        _count++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;<span class="comment">//写组件的内容，该咋写咋写，值换动态的就行了</span></span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      children: [</span><br><span class="line">        IconButton(</span><br><span class="line">          icon: _like?<span class="keyword">const</span> Icon(Icons.star,color: Colors.red,):<span class="keyword">const</span> Icon(Icons.star_border,color: Colors.red,),</span><br><span class="line">          onPressed: _clickLike,</span><br><span class="line">        ),</span><br><span class="line">        Text(</span><br><span class="line">          <span class="string">&quot;<span class="subst">$_count</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>无状态组件自身无法改变，根据我的理解，它是那种事先就决定好的内容，无法在程序运行时做更改，比如Text，Icon，IconButton</li><li>有状态组件自身可以更改，通过提前设定状态量，就可以在用户交互的时候，改变状态量，重新渲染组件，比如CheckBox，Radio</li><li>有状态组件的显示部分和状态部分是分开的，build在状态部分中</li><li>有状态组件通过setState（）函数来重新渲染组件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter布局实践</title>
      <link href="/2022/09/11/Flutter-test1.html"/>
      <url>/2022/09/11/Flutter-test1.html</url>
      
        <content type="html"><![CDATA[<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://img1.imgtp.com/2022/09/11/6moImF8u.png" alt="效果图"></p><span id="more"></span><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  Widget titleSection = Container(<span class="comment">//自定义组件，标题部分，即头部部分</span></span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">32</span>),</span><br><span class="line">    child: Row(<span class="comment">//一行</span></span><br><span class="line">      children: [<span class="comment">//三列</span></span><br><span class="line">        Expanded(<span class="comment">//第一列，标题和副标题</span></span><br><span class="line">          child: Column(<span class="comment">//第一列有两行</span></span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,<span class="comment">//交叉轴方向，此处即水平方向对齐方式，在起点处对齐，即左对齐</span></span><br><span class="line">            children: [</span><br><span class="line">              <span class="keyword">const</span> Text(<span class="comment">//第一行</span></span><br><span class="line">                <span class="string">&quot;Hello,this is Alice!&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  fontWeight: FontWeight.bold,<span class="comment">//加粗，表明主体</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Text(<span class="comment">//第二行</span></span><br><span class="line">                <span class="string">&quot;Good evening!&quot;</span>,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                  color: Colors.grey[<span class="number">500</span>],<span class="comment">//灰色</span></span><br><span class="line">                ),</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Icon(<span class="comment">//第二列，收藏图标</span></span><br><span class="line">          Icons.star,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(<span class="comment">//第三列，收藏数</span></span><br><span class="line">          <span class="string">&quot;520&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  Widget options=Container(<span class="comment">//自定义组件，操作栏部分</span></span><br><span class="line">    margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">    child: Row(<span class="comment">//一行三列</span></span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">      children: [<span class="comment">//三列</span></span><br><span class="line">        Column(<span class="comment">//第一列，图标加文字描述，下同</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.call,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;CALL&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Column(<span class="comment">//第二列</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.route,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;ROUTE&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Column(<span class="comment">//第三列</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Icon(</span><br><span class="line">              Icons.share,</span><br><span class="line">              color: Colors.blue,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&quot;SHARE&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  Widget text=Container(<span class="comment">//自定义组件，文本区域部分</span></span><br><span class="line">    margin: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">10</span>),</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">30</span>),<span class="comment">//内边距30，即四周留空</span></span><br><span class="line">    child: <span class="keyword">const</span> Text(</span><br><span class="line">      <span class="string">&quot;Something exciting happened when I got up this day. Maybe, but I am not sure about the time.&quot;</span></span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Image.asset(<span class="comment">//预设图片</span></span><br><span class="line">          <span class="string">&#x27;images/Alice.jpg&#x27;</span>,</span><br><span class="line">          <span class="comment">// width: 100,</span></span><br><span class="line">          height: <span class="number">300</span>,</span><br><span class="line">          fit: BoxFit.cover,<span class="comment">//填充方式，覆盖。</span></span><br><span class="line">        ),</span><br><span class="line">        titleSection,</span><br><span class="line">        options,</span><br><span class="line">        text</span><br><span class="line">      ],</span><br><span class="line">    ) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Flutter 的布局用熟悉了感觉很舒服</li><li>使用预设图片需要存放在项目的images文件夹中，然后在 pubsepc.yaml 中进行相关的设置。最后在代码中用<code>Image.asset</code>进行引用</li><li>布局前要好好思考才是</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动连接校园网（三峡大学）</title>
      <link href="/2022/09/09/AutoConnectCTGUweb.html"/>
      <url>/2022/09/09/AutoConnectCTGUweb.html</url>
      
        <content type="html"><![CDATA[<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>一切参数内容由抓包获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 三大校园网登录地址</span></span><br><span class="line">url = <span class="string">&#x27;http://10.170.1.2:9090/zportal/login/do&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 三大校园网是表单提交</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="comment">#校园网账号</span></span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&#x27;xxxxxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="comment">#密码</span></span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&#x27;xxxxxx&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;validCode&quot;</span>: <span class="string">&quot;验证码&quot;</span>,</span><br><span class="line">    <span class="string">&quot;validCodeFlag&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="comment"># &quot;ssid&quot;: &quot;c24e36c874328833576d4435928a84c5&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;mac&quot;: &quot;c087135cd61a85a7cf6c99c7315776e0&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;t&quot;: &quot;wireless-v2&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;wlanacname&quot;: &quot;b0e16546b46125bff4a79cfb309fda7f&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;url&quot;: &quot;416bc8fc444bf6a0acf42dbf654ac97bb8da2acbab589e29d1bbccb6c3dd8740a89fd1d25528f66848d484798c2c5e4b&quot;,</span></span><br><span class="line">    <span class="string">&quot;nasip&quot;</span>: <span class="string">&quot;aa97548fee0077ad407c5fe8d3a7645b&quot;</span>,</span><br><span class="line">    <span class="comment"># nasip是web认证接入设备,不可省略</span></span><br><span class="line">    <span class="string">&quot;wlanuserip&quot;</span>: <span class="string">&quot;48d7f194ecf5eec0d07b001069ded8e7&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 请求登录的请求头</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;461&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;10.170.1.2:9090&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://10.170.1.2:9090&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://10.170.1.2:9090/zportal/loginForWeb?wlanuserip=48d7f194ecf5eec0d07b001069ded8e7&amp;wlanacname=b0e16546b46125bff4a79cfb309fda7f&amp;ssid=c24e36c874328833576d4435928a84c5&amp;nasip=aa97548fee0077ad407c5fe8d3a7645b&amp;snmpagentip=&amp;mac=c087135cd61a85a7cf6c99c7315776e0&amp;t=wireless-v2&amp;url=416bc8fc444bf6a0acf42dbf654ac97bb8da2acbab589e29d1bbccb6c3dd8740a89fd1d25528f66848d484798c2c5e4b&amp;apmac=&amp;nasid=b0e16546b46125bff4a79cfb309fda7f&amp;vid=b02b05371bcbc4cb&amp;port=3f21ae5e15ce190e&amp;nasportid=b9d2866090de456862a975341d6574397ab2778f3751241f5ea58c9d8660fa0d52aff7761e572a00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Requested-With&quot;</span>: <span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 查看结果</span></span><br><span class="line">response = requests.post(url, data, headers=header)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请求结果:&quot;</span>, response.text)</span><br></pre></td></tr></table></figure><blockquote><p>参考博客：<a href="https://blog.csdn.net/winter2121/article/details/122633696">开机自动登录校园网（西安电子科技大学）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Card</title>
      <link href="/2022/09/09/FlutterCard.html"/>
      <url>/2022/09/09/FlutterCard.html</url>
      
        <content type="html"><![CDATA[<h3 id="Widget—Card"><a href="#Widget—Card" class="headerlink" title="Widget—Card"></a>Widget—Card</h3><ul><li>child 子组件</li><li>color 背景色</li><li>shadowColor 阴影色</li><li>elevation 阴影高度</li><li>shape 边框样式（可以用RoundedRectangleBorder来设置，意为圆角矩形边框）</li><li>margin 外边距</li></ul><h3 id="Widget—ListTile"><a href="#Widget—ListTile" class="headerlink" title="Widget—ListTile"></a>Widget—ListTile</h3><ul><li>leading 头部组件</li><li>title 标题</li><li>subtitle 副标题</li></ul><span id="more"></span><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Column(</span><br><span class="line">      children:  [</span><br><span class="line">        Card(</span><br><span class="line">          margin: <span class="keyword">const</span> EdgeInsets.all(<span class="number">30</span>),<span class="comment">//外边距</span></span><br><span class="line">          shadowColor: Colors.black,<span class="comment">//阴影颜色</span></span><br><span class="line">          elevation: <span class="number">20</span>,<span class="comment">//阴影高度</span></span><br><span class="line">          shape:  <span class="keyword">const</span> RoundedRectangleBorder(<span class="comment">//圆角矩形边框</span></span><br><span class="line">            borderRadius: BorderRadius.all(Radius.circular(<span class="number">10</span>)),<span class="comment">//圆弧</span></span><br><span class="line">            side: BorderSide(color: Colors.lightBlueAccent)<span class="comment">//边，亮色蓝</span></span><br><span class="line">          ),</span><br><span class="line">          child: Column(<span class="comment">//card的子组件，描述信息，多个子组件用Column来包含</span></span><br><span class="line">            children: <span class="keyword">const</span> [</span><br><span class="line">              ListTile(</span><br><span class="line">                leading: CircleAvatar(<span class="comment">//leading，头部信息，用圆角头像</span></span><br><span class="line">                  radius: <span class="number">30</span>,<span class="comment">//大小</span></span><br><span class="line">                  backgroundImage: NetworkImage(<span class="string">&#x27;https://img1.imgtp.com/2022/08/23/HgJi7gyB.JPG&#x27;</span>),<span class="comment">//地址</span></span><br><span class="line">                ),</span><br><span class="line">                title: Text(<span class="string">&#x27;Kahvia!&#x27;</span>),<span class="comment">//标题，这里指人名</span></span><br><span class="line">                subtitle: Text(<span class="string">&#x27;三峡大学&#x27;</span>),<span class="comment">//副标题，这里指学校</span></span><br><span class="line">              ),</span><br><span class="line">              Divider(<span class="comment">//分割线</span></span><br><span class="line">                color: Colors.grey,</span><br><span class="line">              ),</span><br><span class="line">              ListTile(<span class="comment">//信息1，其实不用这个组件也行的</span></span><br><span class="line">                title: Text(<span class="string">&#x27;联系方式：1313131313&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ListTile(<span class="comment">//信息2</span></span><br><span class="line">                title: Text(<span class="string">&#x27;QQ：914302063&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/09/I9GO3Qyt.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-层叠布局</title>
      <link href="/2022/09/07/FlutterStack.html"/>
      <url>/2022/09/07/FlutterStack.html</url>
      
        <content type="html"><![CDATA[<h3 id="Widget—Stack"><a href="#Widget—Stack" class="headerlink" title="Widget—Stack"></a>Widget—Stack</h3><ul><li><p>Stack（层叠组件，类似css中的z-index）</p><ul><li>alignment（声明未定位的子组件的对齐方式）</li><li>textDirection（声明未定位的子组件的排列顺序）</li><li>未定位组件也会进行重叠</li></ul><span id="more"></span><ul><li>Stack的最小容器大小会包含所有的未定位组件的容器大小。若是stack外层容器没有设置大小，则容器大小为最小容器大小</li></ul><p><img src="https://img1.imgtp.com/2022/09/08/yCkagei1.png" alt="image-20220908171102819"></p><ul><li>若是外层容器有设置大小，则stack大小为外层容器大小（蓝色为外层容器大小，红色为未定位容器大小）</li></ul><p><img src="https://img1.imgtp.com/2022/09/08/ImckUH47.png" alt="image-20220908171621720"></p><ul><li>如果未定位组件不设置容器大小，外层容器也不设置大小，则填充整个屏幕（没有红色是因为这次我设了透明）</li></ul><p><img src="https://img1.imgtp.com/2022/09/08/AeSr8bG6.png" alt="image-20220908170753793"></p></li><li><p>Positioned（绝对定位组件）</p><ul><li>child（声明子组件）</li><li>left，top，right，bottom</li><li>width，height</li></ul></li><li><p>NetworkImage（网络图片组件）</p><ul><li>NetworkImage（‘图片地址’）</li><li>在 AndroidManifest.xml 文件中添加<code>&lt;use-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></li></ul></li></ul><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Container(</span><br><span class="line">      width: <span class="number">400</span>,</span><br><span class="line">      height: <span class="number">400</span>,</span><br><span class="line">      color: Colors.orange,</span><br><span class="line">      child:Container(</span><br><span class="line">        color: Colors.lightBlueAccent,</span><br><span class="line">        child:  Stack(<span class="comment">//按顺序进行渲染，先渲染的组件在下面，后渲染的在上面，我指的是垂直屏幕方向。</span></span><br><span class="line">          alignment: AlignmentDirectional.bottomCenter,<span class="comment">//未定位组件的对齐方式，底部居中</span></span><br><span class="line">          textDirection: TextDirection.rtl,<span class="comment">//未定位组件的排列顺序，从右到左，这会决定alignment对齐的起点和终点</span></span><br><span class="line">          children:   [</span><br><span class="line">            Container(</span><br><span class="line">              color: Colors.red,<span class="comment">//红色</span></span><br><span class="line">              width: <span class="number">250</span>,</span><br><span class="line">              height: <span class="number">250</span>,</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              color: Colors.yellowAccent,<span class="comment">//黄色</span></span><br><span class="line">              width: <span class="number">200</span>,</span><br><span class="line">              height: <span class="number">200</span>,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> Positioned(</span><br><span class="line">                top: <span class="number">40</span>,<span class="comment">//距离stack容器顶部40单位处</span></span><br><span class="line">                left: <span class="number">60</span>,<span class="comment">//距离stack容器左边60单位处</span></span><br><span class="line">                child: CircleAvatar(<span class="comment">//圆形头像，在流式布局中有提及</span></span><br><span class="line">                  backgroundImage: NetworkImage(<span class="string">&#x27;https://img1.imgtp.com/2022/09/03/svQ5krdh.jpg&#x27;</span>),</span><br><span class="line">                  radius: <span class="number">50</span>,<span class="comment">//圆的半径</span></span><br><span class="line">                )</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/08/Kb7B9qig.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-流式布局</title>
      <link href="/2022/09/06/FlutterWrap.html"/>
      <url>/2022/09/06/FlutterWrap.html</url>
      
        <content type="html"><![CDATA[<h3 id="Widget—Wrap"><a href="#Widget—Wrap" class="headerlink" title="Widget—Wrap"></a>Widget—Wrap</h3><p>Wrap（解决内容溢出）：在flutter中，默认不是流式布局，内容溢出不会自动换行，需要使用流式布局来进行自动换行。</p><ul><li>spacing（主轴方向子组件之间的间距）</li><li>alignment（主轴方向的对齐方式）</li><li>runSpacing（纵轴方向子组件的间距）</li><li>runAlignment（纵轴方向的对齐方式）</li></ul><p>Chip（标签）</p><p>CircleAvatar（圆形的“化身”）（圆形头像）</p><span id="more"></span><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">      children: [</span><br><span class="line">        Row(<span class="comment">//在线性布局中，不会自动换行，内容超出会报错</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh&#x27;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                fontSize: <span class="number">40</span></span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        Wrap(<span class="comment">//流式布局就换行了，莫得问题</span></span><br><span class="line">          children: <span class="keyword">const</span> [</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh&#x27;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                  fontSize: <span class="number">40</span>,</span><br><span class="line">                  color: Colors.red</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/06/117HUTKP.png" alt="image-20220906210846453"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-弹性布局</title>
      <link href="/2022/09/06/FlutterFlex.html"/>
      <url>/2022/09/06/FlutterFlex.html</url>
      
        <content type="html"><![CDATA[<h3 id="Widget—Flex"><a href="#Widget—Flex" class="headerlink" title="Widget—Flex"></a>Widget—Flex</h3><p>Flex</p><ul><li>direction(主轴方向)</li><li>mainAxisAlignment（主轴对齐方式）</li><li>crossAxisAlignment（交叉轴对齐方式）</li><li>textDirection（水平方向上的排列顺序）</li><li>verticalDirection（垂直方向上的排列顺序）</li><li>children（子组件）</li></ul><p>Expended（可伸缩组件，放在弹性布局组件中）</p><ul><li>flex（声明弹性布局所占比例）</li><li>child（子组件）</li></ul><span id="more"></span><p>代码区</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Flex(</span><br><span class="line">      direction: Axis.horizontal,<span class="comment">//主轴方向为水平</span></span><br><span class="line">      textDirection: TextDirection.rtl,<span class="comment">//内容方向从右往左排列，故设置的图标在右，溜冰鞋在左</span></span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,<span class="comment">//交叉轴对齐方式是从起点开始对齐，这里起点就是垂直方向的上边缘吧</span></span><br><span class="line">      children:  [</span><br><span class="line">        Expanded(</span><br><span class="line">          flex: <span class="number">2</span>,<span class="comment">//这个部分的组件占两份</span></span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.orange,<span class="comment">//橘色</span></span><br><span class="line">            height: <span class="number">60</span>,</span><br><span class="line">            child: <span class="keyword">const</span> Icon(Icons.settings,size: <span class="number">40</span>,),<span class="comment">//图标：设置</span></span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">          flex: <span class="number">1</span>,<span class="comment">//这个部分的组件占一份</span></span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.lightBlue,<span class="comment">//亮蓝色</span></span><br><span class="line">            height: <span class="number">40</span>,</span><br><span class="line">            child: <span class="keyword">const</span> Icon(Icons.ice_skating,size: <span class="number">40</span>,),<span class="comment">//图标：溜冰鞋</span></span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/06/VMjYtNO4.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-线性布局</title>
      <link href="/2022/09/05/ColumAndRow.html"/>
      <url>/2022/09/05/ColumAndRow.html</url>
      
        <content type="html"><![CDATA[<h3 id="Widget—Column"><a href="#Widget—Column" class="headerlink" title="Widget—Column"></a>Widget—Column</h3><ul><li>Column中主轴方向是垂直方向</li><li>mainAxisAlignment设置主轴对齐方式</li><li>crossAxisAlignment设置交叉轴对齐方式</li><li>children设置内容</li></ul><h3 id="Widget—Row"><a href="#Widget—Row" class="headerlink" title="Widget—Row"></a>Widget—Row</h3><p>主轴方向为水平方向，其余属性一致</p><span id="more"></span><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Center(<span class="comment">//居中组件,当没有指定widthFactor和heightFactor的时候，会尽可能的大</span></span><br><span class="line">      child: Container(<span class="comment">//用有颜色属性的Container包裹部件，加上背景色，方便识别</span></span><br><span class="line">        color: Colors.orange,<span class="comment">//橘色为大部件</span></span><br><span class="line">        child: Column(<span class="comment">//包含了一个线性布局的大部件</span></span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceEvenly,<span class="comment">//部件之间的距离，与部件和边框的距离，相等</span></span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,<span class="comment">//因为外面有Center部件包裹了，所以这里写不写都一样的居中效果。</span></span><br><span class="line">          children:  [<span class="comment">//以下四个Container是线性布局中的四个小部件</span></span><br><span class="line">            Container(</span><br><span class="line">              color: Colors.white,</span><br><span class="line">              child: <span class="keyword">const</span> Icon(Icons.settings,size: <span class="number">50</span>,),</span><br><span class="line">            ),</span><br><span class="line">             Container(</span><br><span class="line">              color: Colors.red,</span><br><span class="line">              child: <span class="keyword">const</span> Icon(Icons.access_alarm,size: <span class="number">50</span>,),</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              color: Colors.blueAccent,</span><br><span class="line">              child: <span class="keyword">const</span> Icon(Icons.account_box,size: <span class="number">50</span>,),</span><br><span class="line">            ),</span><br><span class="line">            Container(<span class="comment">//这个部件是Row布局部件，其中的小部件水平排列，即一行里面分列展示</span></span><br><span class="line">              color: Colors.grey,<span class="comment">//灰色区域，Row布局自然是一行灰色了</span></span><br><span class="line">              child: Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.spaceAround,<span class="comment">//部件之间的距离，与部件和边框的距离，是二比一的关系</span></span><br><span class="line">                children: <span class="keyword">const</span> [</span><br><span class="line">                  Icon(Icons.settings,size: <span class="number">50</span>,),</span><br><span class="line">                  Icon(Icons.access_alarm,size: <span class="number">50</span>,),</span><br><span class="line">                  Icon(Icons.account_box,size: <span class="number">50</span>,),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/05/tLu0Raxd.png" alt="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读 Unix Time Sharing System 有感</title>
      <link href="/2022/09/04/UnixTtimeSharingSystem.html"/>
      <url>/2022/09/04/UnixTtimeSharingSystem.html</url>
      
        <content type="html"><![CDATA[<h3 id="文件系统包含三种文件"><a href="#文件系统包含三种文件" class="headerlink" title="文件系统包含三种文件"></a>文件系统包含三种文件</h3><ol><li>普通文件：程序控制的文件</li><li>目录文件：目录提供了文件名称和文件本身之间的映射</li><li>特殊文件：I&#x2F;O相关文件</li></ol><span id="more"></span><h4 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h4><p>由应用程序控制。从Windows操作系统来看，就类似于word文档这个程序生成了以.doc为后缀的文件。这种文件想要被正确地读取也需要应用程序来操作。</p><h4 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h4><ul><li>简单地理解，目录是一种文件，这种文件记录了其它文件的“家”。这种记录至少包含两个，一个是目录本身，一个是它的父目录。通过父目录来返回上一级，通过目录本身来访问该目录下的文件。</li><li>根据原论文，“相同的非目录文件可能出现在多个目录中，名称可能不同，这个特性被称为链接。”或许我们可以理解为windows的快捷方式？</li></ul><blockquote><p>The same nondirectory file may appear in severaldirectories under possibly different names. This feature is called linking; a directory entry for a file is sometimes called a link.</p></blockquote><h4 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h4><p>与输入输出设备（I&#x2F;O）有关的文件。对它的读写请求会激活相关的设备。</p><blockquote><p>好吧，这篇论文太难了，对于我来说实在是难以看懂。能理解的差不多就上面那些。</p><p>参考文献：<a href="http://www.lib.ctgu.edu.cn/asset/detail/0/203156716660">《Unix Time Sharing System》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unix </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床测试</title>
      <link href="/2022/09/03/tt.html"/>
      <url>/2022/09/03/tt.html</url>
      
        <content type="html"><![CDATA[<h3 id="图床测试"><a href="#图床测试" class="headerlink" title="图床测试"></a>图床测试</h3><p>github</p><p><img src="https://cdn.jsdelivr.net/gh/kahvia-d/imgs/kahviablog/image-20220903210223638.png" alt="image-20220903210223638"></p><p>smms</p><p><img src="https://img1.imgtp.com/2022/09/03/xiHwP629.png" alt="image-20220903211936956"></p><p>imgTP</p><p><img src="https://img1.imgtp.com/2022/09/03/svQ5krdh.jpg" alt="everyone"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Layout</title>
      <link href="/2022/09/03/Flutter-Layout.html"/>
      <url>/2022/09/03/Flutter-Layout.html</url>
      
        <content type="html"><![CDATA[<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><ul><li><p>child(子组件)</p></li><li><p>padding(margin)</p><ul><li>EdgeInsets. ( all( ),fromLTRB( ),only( ) )</li></ul></li><li><p>decoration</p><ul><li>BoxDecoration(边框、圆角、渐变、阴影、背景色、背景图片)</li></ul></li><li><p>alignment</p><ul><li>Alignment(内容对齐)</li></ul></li><li><p>transform</p><ul><li>Matrix4（平移-translate、旋转rotate、缩放-scale、斜切、skew）</li></ul></li><li><p>Container没有子组件的时候会尽可能大，但是如果Container的父组件有传递一个无限大（无边界）的约束给它，那Container就会尽可能小。</p></li></ul><span id="more"></span><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span>  Center(<span class="comment">//居中组件</span></span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">100</span>,</span><br><span class="line">        height: <span class="number">100</span>,</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">2</span>),</span><br><span class="line">        <span class="comment">// color: Colors.red, //不能同时使用color和decoration，想都用的话，color只能在decoration里面使用</span></span><br><span class="line">        alignment: Alignment.center, <span class="comment">//容器内容居中</span></span><br><span class="line">        <span class="comment">// transform: Matrix4.rotationZ(2),//旋转，X是竖直方向，Y是水平方向，Z是垂直屏幕方向</span></span><br><span class="line">        decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">          color: Colors.amber,</span><br><span class="line">          borderRadius: BorderRadius.all(Radius.circular(<span class="number">20.0</span>))</span><br><span class="line">        ),</span><br><span class="line">        child: <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;Hello Kahvia !&#x27;</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/09/03/PqlAbOMI.png" alt="效果如图所示" title="效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxx</title>
      <link href="/2022/09/03/FlutterColor.html"/>
      <url>/2022/09/03/FlutterColor.html</url>
      
        <content type="html"><![CDATA[<h3 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h3><ul><li>Color<ul><li>Color(0xFF42A5F5)</li><li>Color.fromARGB(x,y,z,f)</li><li>Color.fromRGBO(255,255,255,1.0)      &#x2F;&#x2F;Opacity</li></ul></li><li>Colors(通过单词声明)<ul><li>如Colors.red</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> xxx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Icon</title>
      <link href="/2022/09/03/Icon.html"/>
      <url>/2022/09/03/Icon.html</url>
      
        <content type="html"><![CDATA[<h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>Icon是Flutter的图标库，使用方法Icon(Icons.icoName)<br>预览官网：<a href="https://material-io.cn/resources">https://material-io.cn/resources</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Text</title>
      <link href="/2022/09/03/Flutter-Text.html"/>
      <url>/2022/09/03/Flutter-Text.html</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter-Text"><a href="#Flutter-Text" class="headerlink" title="Flutter-Text"></a>Flutter-Text</h3><ul><li>Text<ul><li>TextDirection(文本方向)</li><li>TextStyle(文本样式)<ul><li>Clolors</li><li>FontWeight</li><li>FontStyle</li><li>TextDecoration(文本修饰：删除线等)</li></ul></li><li>TextAlign</li><li>TextOverflow</li><li>maxLines</li></ul></li><li>RichText和TextSpan    给文本生成多种样式</li></ul><span id="more"></span><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><ol><li>在<a href="fonts.google.com">https://fonts.google.com/</a>下载</li><li>将解压后的字体文件夹放到项目下的fonts文件夹中</li><li>在pubspec.yaml中按注释示例进行配置</li><li>在全局层面设置字体：在MaterialApp中配置theme : ThemeData(fontFamily: ‘xxx’);</li><li>局部设置：在Text的style中设置fontFamily : ‘xxx’</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart数据类型</title>
      <link href="/2022/08/31/dart2.html"/>
      <url>/2022/08/31/dart2.html</url>
      
        <content type="html"><![CDATA[<p>这个笔记写下了Dart语言中一些常见的数据类型。</p><span id="more"></span><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>Dart的数字有三个关键字<ul><li>num(整数或小数)</li><li>int表示整数，声明变量时就不能输入浮点数，不然会报错。</li><li>double表示浮点数，即便声明变量时给的是整数，输出也是3.0之类。</li></ul></li></ul><p>一些少见的类型转换</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a=<span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">double</span> b；</span><br><span class="line">b=a.round();<span class="comment">//保留整数的四舍五入</span></span><br><span class="line">b=a.toStringAsFixed(<span class="number">4</span>);<span class="comment">//保留四位小数的四舍五入</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">double</span> b;</span><br><span class="line">b=a.compareTo(<span class="number">10</span>);<span class="comment">//b为0则相同，1大于，-1小于</span></span><br><span class="line">b=a.remainder(<span class="number">4</span>);<span class="comment">//结果为a除以4的余数</span></span><br><span class="line">b=a.gcd(<span class="number">19</span>);<span class="comment">//结果为a和19的最大公约数</span></span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>声明字符串<ul><li>单引号、双引号</li><li>三个引号可声明带换行符的字符串</li></ul></li><li>正则表达式<ul><li>RegExp(r’正则表达式’)</li></ul></li><li>常见API<ul><li>replaceAll(str1,str2);  支持正则替换，即str1可以用正则表达式</li><li>isEmpty</li><li>isNotEmpty</li><li>contains(str)  查找字符串</li><li>indexOf(str) 定位字符串</li></ul></li></ul><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul><li>关键字为bool</li><li>值只有true和false</li><li>使用变量进行条件语句的判断时，尽量使用显式的判断，如if(a&#x3D;&#x3D;0)，而不是if(!a),因为dart中，变量的值不会进行隐式转换。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>Dart中的数组，由List对象表示。有两种声明方式。<ul><li>字面量方式<ul><li><code>List list=[] //不限数据类型</code></li><li><code>List list=&lt;int&gt;[] //指定数据类型</code></li></ul></li><li>构造函数方式<ul><li><code> List list=new List.empty(growable:true)//不限制长度的空列表</code></li><li><code> List list=new List.filled(3,0)//前一个参数指定长度，后一个指定填充值，这里创建出来为[0,0,0]</code></li></ul></li></ul></li><li>常见API<ul><li>addAll([x,y,…,z ])</li><li>remove(element)</li><li>removeAt(int i)  删除指定下标的元素</li><li>insert(index,element) 在指定下标的位置添加元素</li><li>clear( )  清空</li><li>join(str) 将列表中的元素用str连接合并起来</li></ul></li><li>遍历List<ul><li>forEach()</li><li>map()<ul><li>var newList&#x3D;nums.map((e) {<br>  return e*e;<br>  });</li></ul></li><li>where()  返回包含满足要求的元素的新列表</li><li>any()  有一个元素满足要求就返回true</li><li>every() 都满足要求才返回true</li></ul></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>set是无序的，元素唯一的集合</li><li>set同样有字面量和构造函数两种声明方式，字面量用大括号{ }</li><li>对List变量使用toSet( )方法，将重复元素去除</li><li>交集：map1.intersection(map2)</li><li>并集：map1.union(map2)</li><li>差集：map1.difference(map2)</li><li>第一个元素：map1.first</li><li>最后一个元素：map1.last</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>Map是无序的键值对映射。又称哈希或字典。</li><li>声明方式<ul><li>var map&#x3D;{key1:value1,…};</li><li>var map&#x3D;new Map( );</li><li>map[‘key’]&#x3D;value;</li></ul></li><li>常用API<ul><li>map1.containsKey(str)     判断key存在与否</li><li>map1.putIfAbsent(key,( )-&gt;value )    key不存在则赋值</li><li>map1.keys</li><li>map1.values</li><li>map1.removeWhere( )    按条件删除</li></ul></li></ul><h3 id="其它数据类型"><a href="#其它数据类型" class="headerlink" title="其它数据类型"></a>其它数据类型</h3><ul><li>Runes （符文）    Runes对象是一个32位的字符对象。可以把文字转换成符号表情或者特定的文字。<a href="https://copychar.cc/">CopyChar</a></li><li>Symbol    在Dart中用#开头来表示的标识符</li><li>dynamic    动态数据类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart入门</title>
      <link href="/2022/08/31/dart1.html"/>
      <url>/2022/08/31/dart1.html</url>
      
        <content type="html"><![CDATA[<p>这里是Dart的小小语法基础。</p><span id="more"></span><h3 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> fun1(<span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;this is <span class="subst">$age</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    fun1(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在js中声明函数使用function，而dart中则不用。更贴近c语言的函数形式。</li><li>打印用print而不是console.log</li><li>语句后面的分号不可省略</li><li>支持模板字符串，即字符串中添加$+变量名来展示。</li><li>void main( ){}是主函数入口。</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释和多行注释同js一样。<br>&#x2F;&#x2F;&#x2F;三斜杠是文档注释，支持markdown语法。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量是一个引用，变量存储的是对象的引用。</li><li>声明变量：  <ol><li>明确指定类型：<code>int age=18;</code></li><li>不明确类型：<code>var age=18;</code>或<code> dynamic age=18;</code></li></ol></li><li>变量名大小写敏感</li><li>变量默认值为null，js中默认为undefined</li><li>dart变量的值不会进行隐式转换，即null不会自动转成false</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>常量是不可变的变量</li><li>声明常量<ol><li><code>const age=18;</code></li><li><code>final age=18;</code></li></ol></li><li>无法将运行时的值分配给const变量，但是可以分配给final变量。比如说 DateTime.now()</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg的strokeDasharray和strokeDashoffset</title>
      <link href="/2022/08/29/svgStroke.html"/>
      <url>/2022/08/29/svgStroke.html</url>
      
        <content type="html"><![CDATA[<p>这一块知识在前端中有时会用到，比如说制作描边图展示的时候。</p><span id="more"></span><h3 id="strokeDasharray"><a href="#strokeDasharray" class="headerlink" title="strokeDasharray"></a>strokeDasharray</h3><p>它指的是svg图中，每一条边的描边的线长，也可以说是线宽。可以设置一个值，或者两个以及两个以上的值。</p><p>设置一个值的时候，它是指虚线的长和虚线之间的距离相等，都等于那个值。<br>设置两个值的时候，它是分别指虚线和的宽和虚线之间的距离。<br>两个以上，则宽、间距、宽循环。</p><h3 id="strokeDashoffset"><a href="#strokeDashoffset" class="headerlink" title="strokeDashoffset"></a>strokeDashoffset</h3><p>它指的是描边虚线的起点偏移量。如果说边的起点和终点为A、B，描边的起点为C、D，那么偏移量就是AC的长度。AC&#x3D;&#x3D;0的时候，描边刚好和边。反之，只看得见部分描边。</p><h3 id="描边图展示"><a href="#描边图展示" class="headerlink" title="描边图展示"></a>描边图展示</h3><p>strokeDasharray设置为边长，strokeDashoffset也设置为边长。此时描边虚线的长度等于边长，且虚线部分刚好完全偏移起点。svg边的部分刚好是虚线和虚线之间的距离（也就是空白），只要通过动画让偏移慢慢归零，即可实现虚线缓缓顺着边出现，即描边动画。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anime.js动画库的使用</title>
      <link href="/2022/08/29/animejs.html"/>
      <url>/2022/08/29/animejs.html</url>
      
        <content type="html"><![CDATA[<p>anime.js是一个方便好用的动画库。一些使用方法将记录在此。</p><span id="more"></span><h3 id="引入vue项目"><a href="#引入vue项目" class="headerlink" title="引入vue项目"></a>引入vue项目</h3><p>先在终端安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install animejs --save</span><br><span class="line">```  </span><br><span class="line">再在script代码块中引入</span><br><span class="line">```js</span><br><span class="line">import anime from <span class="string">&#x27;animejs/lib/anime.es.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="选择动画目标"><a href="#选择动画目标" class="headerlink" title="选择动画目标"></a>选择动画目标</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">anime</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>:<span class="string">&#x27;#circle&#x27;</span>,   <span class="comment">//可以使用css选择器，也可以先选完了在这里直接用</span></span><br><span class="line">    <span class="attr">translateX</span>:<span class="number">0</span>  <span class="comment">//水平移动</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="设定动画初始值"><a href="#设定动画初始值" class="headerlink" title="设定动画初始值"></a>设定动画初始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">anime</span>(&#123;</span><br><span class="line">        <span class="attr">targets</span>:<span class="string">&#x27;#circle&#x27;</span>,   </span><br><span class="line">        <span class="attr">translateX</span>:[start,end]  <span class="comment">//在指定的位置start开始动画，在end处结束动画</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="属性关键帧"><a href="#属性关键帧" class="headerlink" title="属性关键帧"></a>属性关键帧</h3><p>当设定不同属性的动画时，同时开始执行。如下，两组关键帧同时开始执行。x向右立刻偏移100，偏移开始时，y偏移的前摇开始，在x偏移完毕后，执行x向左偏移的前摇，同时y向右偏移的前摇时间结束，开始偏移，偏移结束时，x向左偏移的前摇结束，x向左偏移。从而，偏移顺序是，右，下，左，上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">anime</span>(&#123;</span><br><span class="line">        <span class="attr">targets</span>:<span class="string">&#x27;#circle&#x27;</span>,</span><br><span class="line">        <span class="attr">translateX</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">100</span>,<span class="attr">duration</span>:<span class="number">1000</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">duration</span>: <span class="number">1000</span>,<span class="attr">delay</span>:<span class="number">1000</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">translateY</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">100</span>,<span class="attr">duration</span>:<span class="number">1000</span>,<span class="attr">delay</span>:<span class="number">1000</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">duration</span>: <span class="number">1000</span>,<span class="attr">delay</span>: <span class="number">1000</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">easing</span>: <span class="string">&#x27;easeOutElastic(1, .8)&#x27;</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="描边动画"><a href="#描边动画" class="headerlink" title="描边动画"></a>描边动画</h3><p>svg图片的边长可以通过对path标签对应的dom对象调用方法getTotalLength( )来获得。设置描边的虚线长度和偏移量等于边长，前者可以使得描边的虚线很长，看起来就像实线，后者可以让这个虚线部分完全偏移起点，展现出的是虚线之间的空白距离，也就是透明线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> paths=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;paths.<span class="property">length</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    paths[i].<span class="property">style</span>.<span class="property">strokeDasharray</span>=paths[i].<span class="title function_">getTotalLength</span>()+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    paths[i].<span class="property">style</span>.<span class="property">strokeDashoffset</span>=paths[i].<span class="title function_">getTotalLength</span>()+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过动画缓慢调整虚线的偏移值，一点点露出来，就能看见这个虚线顺着边描线了。offset为0时，虚线刚好就能展示完毕，也就是描边完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">anime</span>(&#123;</span><br><span class="line">    <span class="attr">targets</span>: <span class="string">&#x27;#msg path&#x27;</span>,</span><br><span class="line">    <span class="attr">strokeDashoffset</span>: [anime.<span class="property">setDashoffset</span>, <span class="number">0</span>],<span class="comment">//anime.setDashoffset会得到边长，作为offset时，刚好没开始描边，这里作为起点。终点是0，也就是完全画好的状态</span></span><br><span class="line">    <span class="attr">easing</span>: <span class="string">&#x27;easeInOutSine&#x27;</span>,<span class="comment">//匀速</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1500</span>, <span class="comment">//描线的持续时间</span></span><br><span class="line">    <span class="attr">delay</span>: <span class="keyword">function</span>(<span class="params">el, i</span>) &#123; <span class="keyword">return</span> i * <span class="number">250</span> &#125;,  <span class="comment">//不同时描线，会更好看</span></span><br><span class="line">    <span class="attr">direction</span>: <span class="string">&#x27;alternate&#x27;</span>,<span class="comment">//正向动画做完再反着来一遍。</span></span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> animejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk的问题集</title>
      <link href="/2022/08/25/helpForGitalk.html"/>
      <url>/2022/08/25/helpForGitalk.html</url>
      
        <content type="html"><![CDATA[<p>问题集1：<a href="https://blog.csdn.net/gaocongzhi/article/details/116567800">前往此处</a><br>问题集2：<a href="https://www.dazhuanlan.com/flyex/topics/1193058">前往此处</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxx</title>
      <link href="/2022/08/25/CommentTest.html"/>
      <url>/2022/08/25/CommentTest.html</url>
      
        <content type="html"><![CDATA[<h3 id="测试GITALK"><a href="#测试GITALK" class="headerlink" title="测试GITALK"></a>测试GITALK</h3>]]></content>
      
      
      <categories>
          
          <category> xxx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的部分用法</title>
      <link href="/2022/08/25/usageOfHexo.html"/>
      <url>/2022/08/25/usageOfHexo.html</url>
      
        <content type="html"><![CDATA[<p>hexo安装完成后，需要进行一些小小的配置，才能拥有全部功能。比如分类啊，标签呀。还有about，也就是个人主页呀。<br> <span id="more"></span></p><h3 id="创建about页面"><a href="#创建about页面" class="headerlink" title="创建about页面"></a>创建about页面</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>生成后，在source目录下的about中，编辑默认的md文件即可展示。</p><h3 id="hexo配置自己的categories和tags"><a href="#hexo配置自己的categories和tags" class="headerlink" title="hexo配置自己的categories和tags"></a>hexo配置自己的categories和tags</h3><p>在hexo自动生成的文件夹根目录下，比如我是自己创建的kahviaBlog文件夹，hexo在里面生成了诸如source这类的文件夹。那我就在kahviaBlog文件夹中，打开控制台。输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories </span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>指令执行完毕后，将在source目录下生成categories、tags文件夹。用编辑器打开其中的md文件。比如我的长下面这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-08-25 14:08:25</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-08-25 14:39:58</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>那么我只需要分别在它们的后面添加 type: categories 和 type: tags 即可。需要注意的是，冒号后面有一个空格，这是必须的。经过测试，空格后的 type 名可以加引号，也可以不加引号。<br>正确的格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2022-08-25 14:08:25</span><br><span class="line">type: categories</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2022-08-25 14:39:58</span><br><span class="line">type: tags</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建自己的博客"><a href="#创建自己的博客" class="headerlink" title="创建自己的博客"></a>创建自己的博客</h3><p>在source目录下的 _post 文件夹中，创建自己的 md 文件。md 指的是markdown。可以用自己喜欢的编辑器区写博客。我使用的是 <a href="https://github.com/vnotex/vnote">VNote</a> 。<br>用VNote选择“从文件夹中新建笔记本”，打开自己的source文件夹下的 _post 创建自己的笔记本。再新建笔记即可。<br>我自己的模板长这样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">categories: xxx</span><br><span class="line">tags:</span><br><span class="line">     - xxx</span><br><span class="line">---</span><br><span class="line">分割线以下为正文区</span><br></pre></td></tr></table></figure><p>值得一提的是，如果要为某篇博客添加多个标签，应当换行后，以减号开头，加一个空格，其后接一个标签名，再重复上述操作直到满意为止。这时，tags的冒号后面的空格可以省略，因为有了换行。<br>如果是单标签，也可以，tags: name,冒号后有空格。</p><h3 id="选择不进行页面渲染的文件"><a href="#选择不进行页面渲染的文件" class="headerlink" title="选择不进行页面渲染的文件"></a>选择不进行页面渲染的文件</h3><p>当命令行输入 hexo g 后，hexo会自动将source目录下的所有文件都进行渲染，生成新的public文件夹。最好先用 hexo cl 清理掉以前的public文件夹，再用g命令生成比较好。</p><p>如果使用了VNote进行创建笔记，那么它会在你的 _post 文件夹下生成一些与软件相关的文件夹或者文件，比如vx_notebook，vx_recycle_bin，vx.json等。</p><p>你也不希望这些无关的文件被当成博客展示在页面上吧？这时候就需要用到hexo 自己的配置文件_config.yml了，注意，不是主题下面的_config.yml。</p><p>在其中找到skip_render: [ ],在里面添加不想渲染的东西就可以了。路径是以source为准的相对路径。比如我source下面的 _post 里有个 vx_notebook 文件夹，我就在数组中加一个 _posts&#x2F;vx_notebook&#x2F;** 就可以了，用不用引号包裹都可以，我试过了。选择具体的文件的话，像 _posts&#x2F;vx.json 这样就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: [_posts/vx_notebook/**,_posts/vx.json,_posts/vx_recycle_bin/**,about/vx_notebook/**,about/vx.json,about/vx_recycle_bin/**]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离，后端无法获取正确的session</title>
      <link href="/2022/08/23/TestBlog.html"/>
      <url>/2022/08/23/TestBlog.html</url>
      
        <content type="html"><![CDATA[<p>当我在前后端分离的开发中，遇到了前端请求后端数据，后端却无法判断请求的session id。经查阅和浏览器开发者工具抓包，发现每次请求都没有正常携带cookie，因而后端无法根据cookie中的session id 查找到正确的session。</p><p>在vue项目中，前端的main.js中添加如下代码即可正常携带cookie。</p><pre><code class="js">    axios.defaults.withCredentials = true;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 小问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/22/hello-world.html"/>
      <url>/2022/08/22/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p> <span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/category/index.html"/>
      <url>/category/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-It’s-Kahvia"><a href="#Hello-It’s-Kahvia" class="headerlink" title="Hello, It’s Kahvia ."></a>Hello, It’s <a href="#">Kahvia</a> .</h1><hr><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p>是雪枫糖呀，也是Kahvia呀。</p><blockquote><p><strong>天不生我雪枫糖，三大万古如长夜。</strong></p></blockquote><h3 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h3><ol><li>Java</li><li>Spring Mvc &#x2F; Spring boot</li><li>Vue2</li></ol><h3 id="待学习"><a href="#待学习" class="headerlink" title="待学习"></a>待学习</h3><ul><li><input disabled="" type="checkbox"> Dart</li><li><input disabled="" type="checkbox"> Flutter</li><li><input disabled="" type="checkbox"> Redis</li><li><input disabled="" type="checkbox"> Spring Cloud</li><li><input disabled="" type="checkbox"> React</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>赞赏</title>
      <link href="/donate/index.html"/>
      <url>/donate/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！<br>网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 <br>你们的支持是我前进的最大动力！</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;}div#menus {    font-family: "ZhuZiAYuanJWD";}h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: ZhuZiAYuanJWD;}.iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #f2b94b;}.bangumi-info-item span {    color: #f2b94b;}.bangumi-info-item em {    color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {    width: 1.19em;    height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts>.recent-post-item {    background: #121212;}[data-theme="dark"] .card-widget {    background: #121212 !important;}[data-theme="dark"] div#post {    background: #121212 !important;}[data-theme="dark"] div#tag {    background: #121212 !important;}[data-theme="dark"] div#archive {    background: #121212 !important;}[data-theme="dark"] div#page {    background: #121212 !important;}[data-theme="dark"] div#category {    background: #121212 !important;}[data-theme="dark"] div#category {    background: transparent !important;}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside>div>button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 10px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: #425aef;    border-radius: 2em;}::-webkit-scrollbar-corner {    background-color: transparent;}::-moz-selection {    color: #fff;    background-color: #425aef;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {    display: none !important;  } */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {    cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #425aef;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/friend/index.html"/>
      <url>/friend/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎交换友链</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/comment/index.html"/>
      <url>/comment/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tag/index.html"/>
      <url>/tag/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
